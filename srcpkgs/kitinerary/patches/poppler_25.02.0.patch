--- a/src/lib/pdf/pdfdocument.cpp	2024-08-16 07:00:56.000000000 +0200
+++ b/src/lib/pdf/pdfdocument.cpp	2025-02-23 22:41:15.141361948 +0100
@@ -39,10 +39,15 @@
     m_doc->m_popplerDoc->displayPageSlice(&device, m_pageNum + 1, 72, 72, 0, false, true, false, -1, -1, -1, -1);
     m_doc->m_popplerDoc->processLinks(&device, m_pageNum + 1);
     device.finalize();
-    const auto pageRect = m_doc->m_popplerDoc->getPage(m_pageNum + 1)->getCropBox();
-    std::unique_ptr<GooString> s(device.getText(pageRect->x1, pageRect->y1, pageRect->x2, pageRect->y2));
 
+	const auto pageRect = m_doc->m_popplerDoc->getPage(m_pageNum + 1)->getCropBox();
+#if KPOPPLER_VERSION < QT_VERSION_CHECK(25, 1, 0)
+	std::unique_ptr<GooString> s(device.getText(pageRect->x1, pageRect->y1, pageRect->x2, pageRect->y2));
     m_text = QString::fromUtf8(s->c_str());
+#else
+	const auto s = device.getText(pageRect->x1, pageRect->y1, pageRect->x2, pageRect->y2);
+	m_text = QString::fromUtf8(s.c_str());
+#endif
     m_images = std::move(device.m_images);
     for (auto it = m_images.begin(); it != m_images.end(); ++it) {
         (*it).d->m_page = this;
@@ -107,8 +112,13 @@
 
     TextOutputDev device(nullptr, false, 0, false, false);
     d->m_doc->m_popplerDoc->displayPageSlice(&device, d->m_pageNum + 1, 72, 72, 0, false, true, false, -1, -1, -1, -1);
+#if KPOPPLER_VERSION <QT_VERSION_CHECK(25, 1, 0)
     std::unique_ptr<GooString> s(device.getText(l, t, r, b));
     return QString::fromUtf8(s->c_str());
+#else
+    const auto s = device.getText(l, t, r, b);
+    return QString::fromUtf8(s.c_str());
+#endif
 }
 
 int PdfPage::imageCount() const
@@ -314,9 +324,14 @@
 #endif
         return QString::fromUtf16(reinterpret_cast<const char16_t*>(s->toStr().c_str()), s->toStr().size() / 2);
     } else {
+#if KPOPPLER_VERSION >= QT_VERSION_CHECK(25, 2, 0)
+        const auto utf16Data = pdfDocEncodingToUTF16(s->toStr());
+        return QString::fromUtf16(reinterpret_cast<const char16_t *>(utf16Data.c_str()), utf16Data.size() / 2);
+#else
         int len = 0;
         std::unique_ptr<const char[]> utf16Data(pdfDocEncodingToUTF16(s->toStr(), &len));
         return QString::fromUtf16(reinterpret_cast<const char16_t*>(utf16Data.get()), len / 2);
+#endif
     }
 
     return QString::fromUtf8(s->c_str());
