--- a/src/channel.cpp
+++ b/src/channel.cpp
@@ -147,7 +147,7 @@ void channel::handle_expiration(const co
     LOG_DEBUG(LOG_NETWORK)
         << "Channel lifetime expired [" << authority() << "]";
 
-    stop(error::channel_timeout);
+    stop(error::make_error_code(error::channel_timeout));
 }
 
 void channel::start_inactivity()
@@ -168,7 +168,7 @@ void channel::handle_inactivity(const co
     LOG_DEBUG(LOG_NETWORK)
         << "Channel inactivity timeout [" << authority() << "]";
 
-    stop(error::channel_timeout);
+    stop(error::make_error_code(error::channel_timeout));
 }
 
 } // namespace network
--- a/src/proxy.cpp
+++ b/src/proxy.cpp
@@ -150,7 +150,7 @@ void proxy::handle_read_heading(const bo
     {
         LOG_WARNING(LOG_NETWORK)
             << "Invalid heading from [" << authority() << "]";
-        stop(error::bad_stream);
+        stop(error::make_error_code(error::bad_stream));
         return;
     }
 
@@ -160,7 +160,7 @@ void proxy::handle_read_heading(const bo
         LOG_DEBUG(LOG_NETWORK)
             << "Invalid heading magic (" << head.magic() << ") from ["
             << authority() << "]";
-        stop(error::bad_stream);
+        stop(error::make_error_code(error::bad_stream));
         return;
     }
 
@@ -170,7 +170,7 @@ void proxy::handle_read_heading(const bo
             << "Oversized payload indicated by " << head.command()
             << " heading from [" << authority() << "] ("
             << head.payload_size() << " bytes)";
-        stop(error::bad_stream);
+        stop(error::make_error_code(error::bad_stream));
         return;
     }
 
@@ -212,7 +212,7 @@ void proxy::handle_read_payload(const bo
         LOG_WARNING(LOG_NETWORK)
             << "Invalid " << head.command() << " payload from [" << authority()
             << "] bad checksum.";
-        stop(error::bad_stream);
+        stop(error::make_error_code(error::bad_stream));
         return;
     }
 
@@ -250,7 +250,7 @@ void proxy::handle_read_payload(const bo
         LOG_WARNING(LOG_NETWORK)
             << "Invalid " << head.command() << " payload from [" << authority()
             << "] trailing bytes.";
-        stop(error::bad_stream);
+        stop(make_error_code(error::bad_stream));
         return;
     }
 
@@ -333,7 +333,7 @@ void proxy::stop(const code& ec)
 
 void proxy::stop(const boost_code& ec)
 {
-    stop(error::boost_to_error_code(ec));
+    stop(error::make_error_code(error::boost_to_error_code(ec)));
 }
 
 bool proxy::stopped() const
