--- a/src/fsearch_time_utils.c
+++ b/src/fsearch_time_utils.c
@@ -377,7 +377,7 @@ parse_implicit_date_time_constants(const
 }
 
 static bool
-parse_date_time_constants(const char *str, time_t *time_start_out, time_t *time_end_out) {
+parse_date_time_constants(const char *str, int64_t *time_start_out, int64_t *time_end_out) {
     struct tm tm_start = {};
     struct tm tm_end = {};
 
@@ -469,7 +469,7 @@ round_down_tm_to_reference_with_date_tim
 }
 
 bool
-fsearch_date_time_parse_interval(const char *str, time_t *time_start_out, time_t *time_end_out) {
+fsearch_date_time_parse_interval(const char *str, int64_t *time_start_out, int64_t *time_end_out) {
     if (parse_date_time_constants(str, time_start_out, time_end_out)) {
         return true;
     }
--- a/src/fsearch_time_utils.h
+++ b/src/fsearch_time_utils.h
@@ -1,7 +1,7 @@
 #pragma once
 
 #include <stdbool.h>
-#include <time.h>
+#include <stdint.h>
 
 bool
-fsearch_date_time_parse_interval(const char *str, time_t *time_start_out, time_t *time_end_out);
\ No newline at end of file
+fsearch_date_time_parse_interval(const char *str, int64_t *time_start_out, int64_t *time_end_out);
--- a/src/tests/test_time_utils.c
+++ b/src/tests/test_time_utils.c
@@ -49,8 +49,8 @@ test_parse_time_interval(void) {
 
     for (gint i = 0; i < G_N_ELEMENTS(strings); ++i) {
         FsearchTestTimeIntervalParseContext *ctx = &strings[i];
-        time_t time_start = 0;
-        time_t time_end = 0;
+        int64_t time_start = 0;
+        int64_t time_end = 0;
 
         gboolean res = fsearch_date_time_parse_interval(ctx->string, &time_start, &time_end);
         g_assert_true(res == ctx->expected_success);
