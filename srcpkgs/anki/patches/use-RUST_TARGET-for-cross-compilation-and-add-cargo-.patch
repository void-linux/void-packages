From 10eb39ba63a6244d837b8ab150f3f61527378008 Mon Sep 17 00:00:00 2001
From: Komeil Parseh <komeilparseh@disroot.org>
Date: Sat, 2 Aug 2025 18:56:47 +0330
Subject: [PATCH] use RUST_TARGET for cross-compilation and add cargo verbosity

---
 build/ninja_gen/src/cargo.rs |  2 +-
 build/runner/src/build.rs    | 18 ++++++++++++++----
 2 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/build/ninja_gen/src/cargo.rs b/build/ninja_gen/src/cargo.rs
index 2a33977..64df768 100644
--- a/build/ninja_gen/src/cargo.rs
+++ b/build/ninja_gen/src/cargo.rs
@@ -86,7 +86,7 @@ pub struct CargoBuild<'a> {
 
 impl BuildAction for CargoBuild<'_> {
     fn command(&self) -> &str {
-        "cargo build $release_arg $target_arg $cargo_flags $extra_args"
+        "cargo build $release_arg $target_arg $cargo_flags $extra_args --verbose --verbose"
     }
 
     fn files(&mut self, build: &mut impl FilesHandle) {
diff --git a/build/runner/src/build.rs b/build/runner/src/build.rs
index 107be97..f2f1411 100644
--- a/build/runner/src/build.rs
+++ b/build/runner/src/build.rs
@@ -4,6 +4,7 @@
 use std::env;
 use std::fs;
 use std::io::Write;
+use std::path::PathBuf;
 use std::process::Command;
 use std::time::Instant;
 
@@ -152,10 +153,19 @@ fn setup_build_root() -> Utf8PathBuf {
 }
 
 fn bootstrap_build() {
-    let status = Command::new("cargo")
-        .args(["run", "-p", "configure"])
-        .status();
-    assert!(status.expect("ninja").success());
+    let rust_target = env::var("RUST_TARGET")
+        .expect("RUST_TARGET environment variable not set");
+    Command::new("cargo")
+        .args([
+            "run",
+            "-p",
+            "configure",
+            "--target",
+            rust_target.as_str(),
+            "--verbose"
+        ])
+        .status()
+        .expect("failed to run configure");
 }
 
 fn maybe_update_buildhash(build_root: &Utf8Path) {
-- 
2.50.1

