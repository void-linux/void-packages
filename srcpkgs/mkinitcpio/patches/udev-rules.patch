From 4afcb3aaae2ca86582c21ee5b4c3f52a43168b83 Mon Sep 17 00:00:00 2001
From: classabbyamp <dev@placeviolette.net>
Date: Wed, 18 Dec 2024 16:06:31 -0500
Subject: [PATCH 1/2] udev: add 11-dm-initramfs.rules

referenced in sd-encrypt, encrypt, and lvm2 install hooks but originated
in arch's device-mapper package[1], so it did not exist in other distros

[1]: https://gitlab.archlinux.org/archlinux/packaging/packages/lvm2/-/blob/14768631e41e23715cb02f1d00531cb3683bfb4d/11-dm-initramfs.rules
---
 Makefile                   | 1 +
 udev/11-dm-initramfs.rules | 3 +++
 2 files changed, 4 insertions(+)
 create mode 100644 udev/11-dm-initramfs.rules

diff --git a/Makefile b/Makefile
index 0feb3a3..d63b8f0 100644
--- a/Makefile
+++ b/Makefile
@@ -71,6 +71,7 @@ install-generator: all prepare
 	install -m755 -t $(DESTDIR)/usr/lib/initcpio init shutdown functions
 	install -m644 -t $(DESTDIR)/usr/lib/initcpio init_functions
 	install -m644 udev/01-memdisk.rules $(DESTDIR)/usr/lib/initcpio/udev/01-memdisk.rules
+	install -m644 udev/11-dm-initramfs.rules $(DESTDIR)/usr/lib/initcpio/udev/11-dm-initramfs.rules
 
 	cp -at $(DESTDIR)/usr/lib/initcpio hooks install
 	install -m644 -t $(DESTDIR)/usr/share/mkinitcpio mkinitcpio.d/*
diff --git a/udev/11-dm-initramfs.rules b/udev/11-dm-initramfs.rules
new file mode 100644
index 0000000..d2c1673
--- /dev/null
+++ b/udev/11-dm-initramfs.rules
@@ -0,0 +1,3 @@
+# needed with new udev/mkinitcpio and as implemented in dracut:
+# <http://git.kernel.org/?p=boot/dracut/dracut.git;a=commitdiff;h=12b9736228f2b34c15a9cb63be79cf7b6e865b54>
+SUBSYSTEM=="block", KERNEL=="dm-[0-9]*", ACTION=="add|change", OPTIONS="db_persist"
-- 
2.47.1


From 8f09f64772bb9779b0927d6ebb0ed2cbe423dd2f Mon Sep 17 00:00:00 2001
From: classabbyamp <dev@placeviolette.net>
Date: Wed, 18 Dec 2024 16:08:18 -0500
Subject: [PATCH 2/2] udev: add patched 69-dm-lvm.rules

referenced in the lvm2 install hook for nonsystemd initcpios, but originated
in arch's lvm2 package[1], so it did not exist in other distros. this is a
patched version of the upstream udev rule.

[1]: https://gitlab.archlinux.org/archlinux/packaging/packages/lvm2/-/blob/14768631e41e23715cb02f1d00531cb3683bfb4d/0001-udev-initcpio.patch
---
 Makefile             |  1 +
 udev/69-dm-lvm.rules | 63 ++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 64 insertions(+)
 create mode 100644 udev/69-dm-lvm.rules

diff --git a/Makefile b/Makefile
index d63b8f0..c675e8c 100644
--- a/Makefile
+++ b/Makefile
@@ -72,6 +72,7 @@ install-generator: all prepare
 	install -m644 -t $(DESTDIR)/usr/lib/initcpio init_functions
 	install -m644 udev/01-memdisk.rules $(DESTDIR)/usr/lib/initcpio/udev/01-memdisk.rules
 	install -m644 udev/11-dm-initramfs.rules $(DESTDIR)/usr/lib/initcpio/udev/11-dm-initramfs.rules
+	install -m644 udev/69-dm-lvm.rules $(DESTDIR)/usr/lib/initcpio/udev/69-dm-lvm.rules
 
 	cp -at $(DESTDIR)/usr/lib/initcpio hooks install
 	install -m644 -t $(DESTDIR)/usr/share/mkinitcpio mkinitcpio.d/*
diff --git a/udev/69-dm-lvm.rules b/udev/69-dm-lvm.rules
new file mode 100644
index 0000000..743d1cb
--- /dev/null
+++ b/udev/69-dm-lvm.rules
@@ -0,0 +1,63 @@
+# Copyright (C) 2012,2021 Red Hat, Inc. All rights reserved.
+#
+# This file is part of LVM.
+#
+# This rule requires blkid to be called on block devices before so only devices
+# used as LVM PVs are processed (ID_FS_TYPE="LVM2_member").
+
+SUBSYSTEM!="block", GOTO="lvm_end"
+
+
+ENV{DM_UDEV_DISABLE_OTHER_RULES_FLAG}=="1", GOTO="lvm_end"
+
+# Only process devices already marked as a PV - this requires blkid to be called before.
+ENV{ID_FS_TYPE}!="LVM2_member", GOTO="lvm_end"
+ENV{DM_MULTIPATH_DEVICE_PATH}=="1", GOTO="lvm_end"
+ACTION=="remove", GOTO="lvm_end"
+
+# Create /dev/disk/by-id/lvm-pv-uuid-<PV_UUID> symlink for each PV
+ENV{ID_FS_UUID_ENC}=="?*", SYMLINK+="disk/by-id/lvm-pv-uuid-$env{ID_FS_UUID_ENC}"
+
+# If the PV is a special device listed below, scan only if the device is
+# properly activated. These devices are not usable after an ADD event,
+# but they require an extra setup and they are ready after a CHANGE event.
+# Also support coldplugging with ADD event but only if the device is already
+# properly activated.
+# This logic should be eventually moved to rules where those particular
+# devices are processed primarily (MD and loop).
+
+# DM device:
+KERNEL!="dm-[0-9]*", GOTO="next"
+ENV{DM_UDEV_PRIMARY_SOURCE_FLAG}=="1", ENV{DM_ACTIVATION}=="1", GOTO="lvm_scan"
+GOTO="lvm_end"
+
+# MD device:
+LABEL="next"
+KERNEL!="md[0-9]*", GOTO="next"
+IMPORT{db}="LVM_MD_PV_ACTIVATED"
+ACTION=="add", ENV{LVM_MD_PV_ACTIVATED}=="1", GOTO="lvm_scan"
+ACTION=="change", ENV{LVM_MD_PV_ACTIVATED}!="1", TEST=="md/array_state", ENV{LVM_MD_PV_ACTIVATED}="1", GOTO="lvm_scan"
+ACTION=="add", KERNEL=="md[0-9]*p[0-9]*", GOTO="lvm_scan"
+GOTO="lvm_end"
+
+# Loop device:
+LABEL="next"
+KERNEL!="loop[0-9]*", GOTO="next"
+ACTION=="add", ENV{LVM_LOOP_PV_ACTIVATED}=="1", GOTO="lvm_scan"
+ACTION=="change", ENV{LVM_LOOP_PV_ACTIVATED}!="1", TEST=="loop/backing_file", ENV{LVM_LOOP_PV_ACTIVATED}="1", GOTO="lvm_scan"
+GOTO="lvm_end"
+
+LABEL="next"
+ACTION!="add", GOTO="lvm_end"
+
+LABEL="lvm_scan"
+
+RUN+="/usr/bin/lvm pvscan --background --cache --activate ay --major $major --minor $minor", ENV{LVM_SCANNED}="1"
+GOTO="lvm_end"
+
+LABEL="lvm_direct_vgchange"
+ENV{LVM_VG_NAME_COMPLETE}=="?*", RUN+="/usr/bin/lvm vgchange -aay --autoactivation event $env{LVM_VG_NAME_COMPLETE}"
+GOTO="lvm_end"
+
+LABEL="lvm_end"
+
-- 
2.47.1

