# Template file for 'nvidia'

_desc="NVIDIA drivers for linux"

pkgname=nvidia
version=430.14
revision=2
maintainer="Juan RP <xtraeme@voidlinux.org>"
license="Proprietary NVIDIA license"
homepage="http://www.nvidia.com"

archs="i686 x86_64"
nopie=yes
repository="nonfree"
create_wrksrc=yes
short_desc="${_desc} - Libraries and Utilities"
conflicts="catalyst>=0 xserver-abi-video>24_1"

build_options="glvnd"
desc_option_glvnd="Add support for NVIDIA's GL Vendor Neutral Dispatch implementation"
build_options_default="glvnd"

if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
	_pkg="NVIDIA-Linux-x86_64-${version}-no-compat32"
	distfiles="http://uk.download.nvidia.com/XFree86/Linux-x86_64/${version}/${_pkg}.run"
	checksum=0f583a277b1731cb8327510b75dba9cf7adf5c781247e4f48bcc9f358253278f
	subpackages="nvidia-gtklibs nvidia-dkms
	 nvidia-opencl nvidia-libs"
	depends="nvidia-libs-${version}_${revision}
	 nvidia-gtklibs-${version}_${revision}
	 nvidia-dkms-${version}_${revision} pkgconf"
else
	_pkg="NVIDIA-Linux-x86_64-${version}"
	distfiles="http://uk.download.nvidia.com/XFree86/Linux-x86_64/${version}/${_pkg}.run"
	checksum=00d46ffaf3e1e430081ddbd68b74cc361cd1328e8944224dfe69630dd8540f17
	subpackages="nvidia-libs"
	depends="pkgconf"
fi

do_extract() {
	install -m755 ${XBPS_SRCDISTDIR}/${pkgname}-${version}/${_pkg}.run ${wrksrc}
	cd ${wrksrc}
	./${_pkg}.run --extract-only
	rm -f ${_pkg}.run
}

pre_install() {
	cd ${_pkg}
	cp nvidia_icd.json.template nvidia_icd.json
	sed -i -e 's:__NV_VK_ICD__:libGLX_nvidia.so.0:g' nvidia_icd.json
}

do_install() {
	cd ${_pkg}

	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		# X driver
		vinstall nvidia_drv.so 755 usr/lib/xorg/modules/drivers

		# GLX extension module for X
		vinstall libglxserver_nvidia.so.${version} 755 usr/lib/xorg/modules/extensions
		ln -sf libglxserver_nvidia.so.${version} \
			${DESTDIR}/usr/lib/xorg/modules/extensions/libglxserver_nvidia.so
		ln -sf libglxserver_nvidia.so.${version} \
			${DESTDIR}/usr/lib/xorg/modules/extensions/libglxserver_nvidia.so.1

		vinstall libnvidia-egl-wayland.so.1.1.2 755 usr/lib
		ln -sf libnvidia-egl-wayland.so.1.1.2 \
			${DESTDIR}/usr/lib/libnvidia-egl-wayland.so.1

		vinstall 10_nvidia.json 755 usr/share/glvnd/egl_vendor.d
		vinstall 10_nvidia_wayland.json \
			755 usr/share/egl/egl_external_platform.d

		vinstall libnvidia-cfg.so.${version} 755 usr/lib
		ln -sf libnvidia-cfg.so.${version} ${DESTDIR}/usr/lib/libnvidia-cfg.so
		ln -sf libnvidia-cfg.so.${version} ${DESTDIR}/usr/lib/libnvidia-cfg.so.1

		vbin nvidia-cuda-mps-control
		vbin nvidia-cuda-mps-server
		gzip -d nvidia-cuda-mps-control.1.gz
		vman nvidia-cuda-mps-control.1

		# nvidia-xconfig
		vbin nvidia-xconfig
		gzip -d nvidia-xconfig.1.gz
		vman nvidia-xconfig.1

		# nvidia-settings
		vbin nvidia-settings
		gzip -d nvidia-settings.1.gz
		vman nvidia-settings.1
		vinstall nvidia-settings.desktop 644 usr/share/applications
		vinstall nvidia-settings.png 644 usr/share/pixmaps
		sed -e 's:__UTILS_PATH__:/usr/bin:' \
			-e 's:__PIXMAP_PATH__:/usr/share/pixmaps:' \
			-i ${DESTDIR}/usr/share/applications/nvidia-settings.desktop

		vinstall libnvidia-gtk3.so.${version} 755 usr/lib
		vinstall libnvidia-gtk2.so.${version} 755 usr/lib

		# application profiles (needed by nvidia-settings)
		vinstall nvidia-application-profiles-${version}-key-documentation \
			644 usr/share/nvidia
		vinstall nvidia-application-profiles-${version}-rc 644 usr/share/nvidia

		# nvidia-bug-report
		vbin nvidia-bug-report.sh nvidia-bug-report
		vbin nvidia-debugdump

		# nvidia-smi
		vbin nvidia-smi
		gzip -d nvidia-smi.1.gz
		vman nvidia-smi.1

		# nvidia-modprobe
		vinstall nvidia-modprobe 4755 usr/bin
		gzip -d nvidia-modprobe.1.gz
		vman nvidia-modprobe.1

		# opencl pkg
		vinstall nvidia.icd 644 etc/OpenCL/vendors

		vinstall libnvidia-compiler.so.${version} 755 usr/lib

		vinstall libnvidia-opencl.so.${version} 755 usr/lib
		ln -sf libnvidia-opencl.so.${version} \
			${DESTDIR}/usr/lib/libnvidia-opencl.so
		ln -sf libnvidia-opencl.so.${version} \
			${DESTDIR}/usr/lib/libnvidia-opencl.so.1

		# vulkan icd
		vinstall nvidia_icd.json 644 usr/share/vulkan/icd.d

		# vulkan real-time ray tracing extensions
		vinstall libnvidia-rtcore.so.${version} 755 usr/lib
		vinstall libnvidia-cbl.so.${version} 755 usr/lib

		# optix ray racing engine
		vinstall libnvoptix.so.${version} 755 usr/lib

		# dkms pkg
		vmkdir usr/src/nvidia-${version}
		vcopy "kernel/*" usr/src/nvidia-${version}
		vcopy ${FILESDIR}/dkms.conf usr/src/nvidia-${version}
		sed -e "s/__PKGVER/${version}/g" \
			-e 's/__MAKEJOBS/-j$(nproc)/g' \
			-i ${DESTDIR}/usr/src/nvidia-${version}/dkms.conf

		vmkdir /usr/share/X11/xorg.conf.d/
		vinstall nvidia-drm-outputclass.conf 644 \
			/usr/share/X11/xorg.conf.d 30-nvidia-drm-outputclass.conf

		# Blacklist nouveau
		vmkdir usr/lib/modprobe.d
		echo "blacklist nouveau" > ${DESTDIR}/usr/lib/modprobe.d/nvidia.conf
		chmod 644 ${DESTDIR}/usr/lib/modprobe.d/nvidia.conf

		# Omit drm dracut module too
		vmkdir usr/lib/dracut/dracut.conf.d
		echo "omit_dracutmodules+=\" drm \"" > \
		${DESTDIR}/usr/lib/dracut/dracut.conf.d/99-nvidia.conf

		# License and documentation
		vlicense LICENSE
		vdoc README.txt README
		vdoc NVIDIA_Changelog
	else
		cd 32
	fi

	# Following libs are common between x86_64 and i686

	# GLX client libs
	if [ "${build_option_glvnd}" ]; then
		# ----- Also provided by the libglvnd package (todo)
		vinstall libGL.so.1.7.0 755 usr/lib
		ln -sf libGL.so.1.7.0 ${DESTDIR}/usr/lib/libGL.so
		ln -sf libGL.so.1.7.0 ${DESTDIR}/usr/lib/libGL.so.1

		vinstall libGLX.so.0 755 usr/lib
		ln -sf libGLX.so.0 ${DESTDIR}/usr/lib/libGLX.so
		# --------------------------------------------------

		# Required for GLVND option
		vinstall libGLX_nvidia.so.${version} 755 usr/lib
		ln -sf libGLX_nvidia.so.${version} ${DESTDIR}/usr/lib/libGLX_nvidia.so.0
		ln -sf libGLX_nvidia.so.${version} ${DESTDIR}/usr/lib/libGLX_indirect.so.0
	else
		vinstall libGL.so.${version} 755 usr/lib
		ln -sf libGL.so.${version} ${DESTDIR}/usr/lib/libGL.so
		ln -sf libGL.so.${version} ${DESTDIR}/usr/lib/libGL.so.1

		# Not required for non-GLVND option but recommended
		# more info: https://devtalk.nvidia.com/default/topic/915640/multiple-glx-client-libraries-in-the-nvidia-linux-driver-installer-package/
		vinstall libGLX_nvidia.so.${version} 755 usr/lib
		ln -sf libGLX_nvidia.so.${version} ${DESTDIR}/usr/lib/libGLX_nvidia.so.0
		ln -sf libGLX_nvidia.so.${version} ${DESTDIR}/usr/lib/libGLX_indirect.so.0
	fi

	# OpenGL core library
	vinstall libnvidia-glcore.so.${version} 755 usr/lib
	vinstall libnvidia-eglcore.so.${version} 755 usr/lib
	vinstall libnvidia-glsi.so.${version} 755 usr/lib

	# Vulkan core library
	vinstall libnvidia-glvkspirv.so.${version} 755 usr/lib

	# EGL
	vinstall libOpenGL.so.0 755 usr/lib
	ln -sf libOpenGL.so.0 ${DESTDIR}/usr/lib/libOpenGL.so

	vinstall libGLdispatch.so.0 755 usr/lib

	vinstall libGLESv1_CM.so.1.2.0 755 usr/lib
	ln -sf libGLESv1_CM.so.1.2.0 ${DESTDIR}/usr/lib/libGLESv1_CM.so
	ln -sf libGLESv1_CM.so.1.2.0 ${DESTDIR}/usr/lib/libGLESv1_CM.so.1

	vinstall libGLESv2.so.2.1.0 755 usr/lib
	ln -sf libGLESv2.so.2.1.0 ${DESTDIR}/usr/lib/libGLESv2.so
	ln -sf libGLESv2.so.2.1.0 ${DESTDIR}/usr/lib/libGLESv2.so.2

	vinstall libEGL.so.1.1.0 755 usr/lib
	ln -sf libEGL.so.1.1.0 ${DESTDIR}/usr/lib/libEGL.so
	ln -sf libEGL.so.1.1.0 ${DESTDIR}/usr/lib/libEGL.so.1

	vinstall libEGL_nvidia.so.${version} 755 usr/lib
	ln -sf libEGL_nvidia.so.${version} ${DESTDIR}/usr/lib/libEGL_nvidia.so.0

	vinstall libGLESv1_CM_nvidia.so.${version} 755 usr/lib
	ln -sf libGLESv1_CM_nvidia.so.${version} \
		${DESTDIR}/usr/lib/libGLESv1_CM_nvidia.so.1

	vinstall libGLESv2_nvidia.so.${version} 755 usr/lib
	ln -sf libGLESv2_nvidia.so.${version} ${DESTDIR}/usr/lib/libGLESv2_nvidia.so.2

	# Thread Local Storage
	vinstall libnvidia-tls.so.${version} 755 usr/lib/

	# VDPAU
	vinstall libvdpau_nvidia.so.${version} 755 usr/lib/vdpau
	ln -sf libvdpau_nvidia.so.${version} \
		${DESTDIR}/usr/lib/vdpau/libvdpau_nvidia.so.1

	vinstall libnvidia-ml.so.${version} 755 usr/lib
	ln -sf libnvidia-ml.so.${version} ${DESTDIR}/usr/lib/libnvidia-ml.so
	ln -sf libnvidia-ml.so.${version} ${DESTDIR}/usr/lib/libnvidia-ml.so.1

	vinstall libnvidia-encode.so.${version} 755 usr/lib
	ln -sf libnvidia-encode.so.${version} ${DESTDIR}/usr/lib/libnvidia-encode.so
	ln -sf libnvidia-encode.so.${version} ${DESTDIR}/usr/lib/libnvidia-encode.so.1

	vinstall libnvidia-ifr.so.${version} 755 usr/lib
	ln -sf libnvidia-ifr.so.${version} ${DESTDIR}/usr/lib/libnvidia-ifr.so
	ln -sf libnvidia-ifr.so.${version} ${DESTDIR}/usr/lib/libnvidia-ifr.so.1

	vinstall libnvidia-fbc.so.${version} 755 usr/lib
	ln -sf libnvidia-fbc.so.${version} ${DESTDIR}/usr/lib/libnvidia-fbc.so
	ln -sf libnvidia-fbc.so.${version} ${DESTDIR}/usr/lib/libnvidia-fbc.so.1

	vinstall libnvidia-fatbinaryloader.so.${version} 755 usr/lib
	ln -sf libnvidia-fatbinaryloader.so.${version} \
		${DESTDIR}/usr/lib/libnvidia-fatbinaryloader.so.1
	ln -sf libnvidia-fatbinaryloader.so.1 \
		${DESTDIR}/usr/lib/libnvidia-fatbinaryloader.so

	# CUDA
	vinstall libcuda.so.${version} 755 usr/lib
	ln -sf libcuda.so.${version} ${DESTDIR}/usr/lib/libcuda.so
	ln -sf libcuda.so.${version} ${DESTDIR}/usr/lib/libcuda.so.1

	vinstall libnvcuvid.so.${version} 755 usr/lib
	ln -sf libnvcuvid.so.${version} ${DESTDIR}/usr/lib/libnvcuvid.so
	ln -sf libnvcuvid.so.${version} ${DESTDIR}/usr/lib/libnvcuvid.so.1

	vinstall libnvidia-opticalflow.so.${version} 755 usr/lib
	ln -sf libnvidia-opticalflow.so.${version} \
		${DESTDIR}/usr/lib/libnvidia-opticalflow.so
	ln -sf libnvidia-opticalflow.so.${version} \
		${DESTDIR}/usr/lib/libnvidia-opticalflow.so.1

	vinstall libnvidia-ptxjitcompiler.so.${version} 755 usr/lib
	ln -sf libnvidia-ptxjitcompiler.so.${version} \
		${DESTDIR}/usr/lib/libnvidia-ptxjitcompiler.so.1
	ln -sf libnvidia-ptxjitcompiler.so.1 \
		${DESTDIR}/usr/lib/libnvidia-ptxjitcompiler.so

	# helper libs for approved partners' GRID remote apps
	vinstall libnvidia-ifr.so.${version} 755 usr/lib
	vinstall libnvidia-fbc.so.${version} 755 usr/lib
}

nvidia-gtklibs_package() {
	short_desc="${_desc} - GTK+ libraries"
	pkg_install() {
		vmove "usr/lib/lib*gtk*.so*"
	}
}
nvidia-libs_package() {
	short_desc="${_desc} - common libraries"
	provides="libEGL-${version}_${revision}
	 libGL-${version}_${revision} libGLES-${version}_${revision}"
	replaces="libEGL>=0 libGL>=0 libGLES>=0"
	pkg_install() {
		vmove usr/lib
	}
}
nvidia-dkms_package() {
	short_desc="${_desc} - DKMS kernel module"
	dkms_modules="nvidia ${version}"
	depends="dkms"
	pkg_install() {
		vmove usr/src
		vmove usr/lib/modprobe.d
		vmove usr/lib/dracut
	}
}
nvidia-opencl_package() {
	short_desc="${_desc} - OpenCL implementation"
	depends="libOpenCL"
	pkg_install() {
		vmove "usr/lib/libnvidia-compiler*"
		vmove "usr/lib/libnvidia-opencl*"
		vmove etc/OpenCL
	}
}
