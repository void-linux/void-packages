# Template file for 'OpenRCT2'
# based on https://raw.githubusercontent.com/AluisioASG/void-packages/openrct2/srcpkgs/OpenRCT2/template
# and https://github.com/void-linux/void-packages/issues/1014#issuecomment-417372421
pkgname=OpenRCT2
version=0.4.11
revision=1
# versions pulled from https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/v${version}/CMakeLists.txt
_objects_version=1.4.4
_titles_version=0.4.6
_replays_version=0.0.79
_opensfx_version=1.0.5
_openmsx_version=1.5
build_style=cmake
configure_args="
 -DOPENRCT2_VERSION_TAG=${version}
 -DDOWNLOAD_TITLE_SEQUENCES=0
 -DDOWNLOAD_OBJECTS=0
 -DDOWNLOAD_REPLAYS=0
 -DDISABLE_DISCORD_RPC=1
 -DDISABLE_GOOGLE_BENCHMARK=1
 $(vopt_if multiplayer '' '-DDISABLE_NETWORK=1')
 $(vopt_if scripting '-DENABLE_SCRIPTING=1' '')"
make_build_target="all g2"
hostmakedepends="pkg-config unzip"
makedepends="SDL2-devel fontconfig-devel freetype-devel libzip-devel
 libpng-devel speexdsp-devel icu-devel zlib-devel json-c++ libxml2-devel
 $(vopt_if multiplayer 'libcurl-devel openssl-devel')
 $(vopt_if scripting duktape-devel)"
depends="zenity"
checkdepends="gtest-devel"
short_desc="Open source re-implementation of RollerCoaster Tycoon 2"
maintainer="klardotsh <josh@klar.sh>"
license="GPL-3.0-or-later, CC-BY-SA-4.0"
homepage="https://openrct2.io"
changelog="https://openrct2.org/changelog"
# download objects and title sequences ourselves, instead of letting cmake do it
distfiles="https://github.com/OpenRCT2/OpenRCT2/archive/v${version}.tar.gz
 https://github.com/OpenRCT2/objects/releases/download/v${_objects_version}/objects.zip>objects-${_objects_version}.zip
 https://github.com/OpenRCT2/OpenSoundEffects/releases/download/v${_opensfx_version}/opensound.zip>opensound-${_opensfx_version}.zip
 https://github.com/OpenRCT2/OpenMusic/releases/download/v${_openmsx_version}/openmusic.zip>openmusic-${_openmsx_version}.zip
 https://github.com/OpenRCT2/replays/releases/download/v${_replays_version}/replays.zip>replays-${_replays_version}.zip
 https://github.com/OpenRCT2/title-sequences/releases/download/v${_titles_version}/title-sequences.zip>title-sequences-${_titles_version}.zip"
checksum="d6211dc9651b43315c5d22e30aa41e582bb861d2541b82bb65de8f4f95f0cdef
 da017b90a3870649cb4ff22e14edfc746259af048967311d1133cf4c836ae5a0
 a952148be164c128e4fd3aea96822e5f051edd9a0b1f2c84de7f7628ce3b2e18
 c3fac4caa90398a2b4c5bb32e0dd0f44073086fe16121d3dc49b3ca120474068
 045da1df8697e2d33ff33b34008f22e7698280aa4639afd1b1fc3c590d5e9956
 24a189cdaf1f78fb6d6caede8f1ab3cedf8ab9f819cd2260a09b2cce4c710d98"
skip_extraction="objects-${_objects_version}.zip
 opensound-${_opensfx_version}.zip
 openmusic-${_openmsx_version}.zip
 replays-${_replays_version}.zip
 title-sequences-${_titles_version}.zip"

replaces="OpenRCT2-data>=0"

CXXFLAGS="-DNDEBUG"

build_options="multiplayer scripting"
build_options_default="multiplayer scripting"
desc_option_multiplayer="Enable multiplayer support"
desc_option_scripting="Enable script / plugin support"

if [ "$XBPS_TARGET_ENDIAN" = "be" ]; then
	broken="not yet implemented"
fi

case "$XBPS_TARGET_MACHINE" in
	ppc*)
		CFLAGS+=" -mlong-double-64"
		CXXFLAGS+=" -mlong-double-64"
		;;
esac

if [ "$CROSS_BUILD" ]; then
	hostmakedepends+=" OpenRCT2"
	# for icu mass-rebuild
	hostmakedepends+=" enchant2 libxml2 webkit2gtk libharfbuzz"
	hostmakedepends+=" libnuspell libpsl"
	CXXFLAGS+=" -DHAVE_IMMINTRIN_H=false -DSDL_DISABLE_IMMINTRIN_H=1"
fi

if [ "$XBPS_CHECK_PKGS" ]; then
	configure_args+=" -DWITH_TESTS=1 -DSYSTEM_GTEST=1"
fi

post_extract() {
	_builddir="${build_wrksrc:+$build_wrksrc/}${cmake_builddir:=build}"
	vsrcextract --no-strip-components -C data/object objects-${_objects_version}.zip
	vsrcextract --no-strip-components -C data/sequence title-sequences-${_titles_version}.zip
	vsrcextract --no-strip-components -C data opensound-${_opensfx_version}.zip
	vsrcextract --no-strip-components -C data openmusic-${_openmsx_version}.zip
	vsrcextract --no-strip-components -C test/tests/testdata/replays replays-${_replays_version}.zip
	# CMakeLists seems to assume `install` is run before `check`, and so
	# doesn't actually make the `data`/`testdata` symlinks in time
	mkdir -p "${_builddir}"
	ln -rs data testdata "${_builddir}/"

	vsed -i CMakeLists.txt -e "s; -Werror;;"
}

post_patch() {
	if [ "$CROSS_BUILD" ]; then
		sed -i -e 's#COMMAND ./openrct2#COMMAND openrct2#g' CMakeLists.txt
	fi
}

post_install() {
	# remove useless static lib
	rm "${DESTDIR}/usr/lib/libopenrct2.a"
}
