commit 37814f62c2cc7aba2eea073014d6c53dcd5bf42c
Author: q66 <daniel@octaforge.org>
Date:   Fri Jul 1 16:53:55 2022 +0200

    fix linux-user build on 32-bit ppc
    
    Partial revert https://gitlab.com/qemu-project/qemu/-/commit/9d1401b79463e74adbfac69d836789d4e103fb61
    and https://gitlab.com/qemu-project/qemu/-/commit/0a7e01904d407baa73c1baddbdfc9ccf2ace8356

diff --git a/common-user/safe-syscall-error.c b/common-user/safe-syscall-error.c
index cf74b50..a36132c 100644
--- a/common-user/safe-syscall-error.c
+++ b/common-user/safe-syscall-error.c
@@ -12,6 +12,7 @@
 #include "qemu/osdep.h"
 #include "user/safe-syscall.h"
 
+#if !defined(__powerpc__) || defined(__powerpc64__)
 /*
  * This is intended to be invoked via tail-call on the error path
  * from the assembly in host/arch/safe-syscall.inc.S.  This takes
@@ -23,3 +24,4 @@ long safe_syscall_set_errno_tail(int value)
     errno = value;
     return -1;
 }
+#endif
diff --git a/include/user/safe-syscall.h b/include/user/safe-syscall.h
index 61a04e2..793fe84 100644
--- a/include/user/safe-syscall.h
+++ b/include/user/safe-syscall.h
@@ -125,6 +125,8 @@
  * kinds of restartability.
  */
 
+#if !defined(__powerpc__) || defined(__powerpc64__)
+
 /* The core part of this function is implemented in assembly */
 extern long safe_syscall_base(int *pending, long number, ...);
 extern long safe_syscall_set_errno_tail(int value);
@@ -137,4 +139,10 @@ extern char safe_syscall_end[];
     safe_syscall_base(&((TaskState *)thread_cpu->opaque)->signal_pending, \
                       __VA_ARGS__)
 
+#else
+
+#define safe_syscall syscall
+
+#endif
+
 #endif
diff --git a/linux-user/signal.c b/linux-user/signal.c
index 092e70b..b8dfa8a 100644
--- a/linux-user/signal.c
+++ b/linux-user/signal.c
@@ -800,6 +800,7 @@ void queue_signal(CPUArchState *env, int sig, int si_type,
 /* Adjust the signal context to rewind out of safe-syscall if we're in it */
 static inline void rewind_if_in_safe_syscall(void *puc)
 {
+#if !defined(__powerpc__) || defined(__powerpc64__)
     host_sigcontext *uc = (host_sigcontext *)puc;
     uintptr_t pcreg = host_signal_pc(uc);
 
@@ -807,6 +808,7 @@ static inline void rewind_if_in_safe_syscall(void *puc)
         && pcreg < (uintptr_t)safe_syscall_end) {
         host_signal_set_pc(uc, (uintptr_t)safe_syscall_start);
     }
+#endif
 }
 
 static void host_signal_handler(int host_sig, siginfo_t *info, void *puc)
