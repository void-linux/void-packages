--- a/Source/cmFileCommand.cxx
+++ b/Source/cmFileCommand.cxx
@@ -2130,9 +2130,6 @@ bool HandleDownloadCommand(std::vector<s
   res = ::curl_easy_setopt(curl, CURLOPT_FAILONERROR, 1);
   check_curl_result(res, "DOWNLOAD cannot set http failure option: ");
 
-  res = ::curl_easy_setopt(curl, CURLOPT_USERAGENT, "curl/" LIBCURL_VERSION);
-  check_curl_result(res, "DOWNLOAD cannot set user agent option: ");
-
   res = ::curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, cmWriteToFileCallback);
   check_curl_result(res, "DOWNLOAD cannot set write function: ");
 
@@ -2153,15 +2150,6 @@ bool HandleDownloadCommand(std::vector<s
     }
   }
 
-  // check to see if TLS verification is requested
-  if (tls_verify && *tls_verify) {
-    res = ::curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 1);
-    check_curl_result(res, "DOWNLOAD cannot set TLS/SSL Verify on: ");
-  } else {
-    res = ::curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);
-    check_curl_result(res, "DOWNLOAD cannot set TLS/SSL Verify off: ");
-  }
-
   for (const auto& range : curl_ranges) {
     std::string curl_range = range.first + '-' +
       (range.second.has_value() ? range.second.value() : "");
@@ -2196,25 +2184,11 @@ bool HandleDownloadCommand(std::vector<s
   res = ::curl_easy_setopt(curl, CURLOPT_DEBUGDATA, &chunkDebug);
   check_curl_result(res, "DOWNLOAD cannot set debug data: ");
 
-  res = ::curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
-  check_curl_result(res, "DOWNLOAD cannot set follow-redirect option: ");
-
   if (!logVar.empty()) {
     res = ::curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);
     check_curl_result(res, "DOWNLOAD cannot set verbose: ");
   }
 
-  if (timeout > 0) {
-    res = ::curl_easy_setopt(curl, CURLOPT_TIMEOUT, timeout);
-    check_curl_result(res, "DOWNLOAD cannot set timeout: ");
-  }
-
-  if (inactivity_timeout > 0) {
-    // Give up if there is no progress for a long time.
-    ::curl_easy_setopt(curl, CURLOPT_LOW_SPEED_LIMIT, 1);
-    ::curl_easy_setopt(curl, CURLOPT_LOW_SPEED_TIME, inactivity_timeout);
-  }
-
   // Need the progress helper's scope to last through the duration of
   // the curl_easy_perform call... so this object is declared at function
   // scope intentionally, rather than inside the "if(showProgress)"
@@ -2530,15 +2504,6 @@ bool HandleUploadCommand(std::vector<std
     }
   }
 
-  // check to see if TLS verification is requested
-  if (tls_verify && *tls_verify) {
-    res = ::curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 1);
-    check_curl_result(res, "UPLOAD cannot set TLS/SSL Verify on: ");
-  } else {
-    res = ::curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);
-    check_curl_result(res, "UPLOAD cannot set TLS/SSL Verify off: ");
-  }
-
   // check to see if a CAINFO file has been specified
   // command arg comes first
   std::string const& cainfo_err = cmCurlSetCAInfo(curl, cainfo);
@@ -2556,25 +2521,11 @@ bool HandleUploadCommand(std::vector<std
   res = ::curl_easy_setopt(curl, CURLOPT_DEBUGDATA, &chunkDebug);
   check_curl_result(res, "UPLOAD cannot set debug data: ");
 
-  res = ::curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
-  check_curl_result(res, "UPLOAD cannot set follow-redirect option: ");
-
   if (!logVar.empty()) {
     res = ::curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);
     check_curl_result(res, "UPLOAD cannot set verbose: ");
   }
 
-  if (timeout > 0) {
-    res = ::curl_easy_setopt(curl, CURLOPT_TIMEOUT, timeout);
-    check_curl_result(res, "UPLOAD cannot set timeout: ");
-  }
-
-  if (inactivity_timeout > 0) {
-    // Give up if there is no progress for a long time.
-    ::curl_easy_setopt(curl, CURLOPT_LOW_SPEED_LIMIT, 1);
-    ::curl_easy_setopt(curl, CURLOPT_LOW_SPEED_TIME, inactivity_timeout);
-  }
-
   // Need the progress helper's scope to last through the duration of
   // the curl_easy_perform call... so this object is declared at function
   // scope intentionally, rather than inside the "if(showProgress)"
--- a/Tests/RunCMake/CMakeLists.txt
+++ b/Tests/RunCMake/CMakeLists.txt
@@ -560,7 +560,6 @@ if(COVERAGE_COMMAND)
   add_RunCMake_test(ctest_coverage -DCOVERAGE_COMMAND=${COVERAGE_COMMAND})
 endif()
 add_RunCMake_test(ctest_start)
-add_RunCMake_test(ctest_submit)
 add_RunCMake_test(ctest_test
   -DIMAGE_DIR=${CMAKE_SOURCE_DIR}/Utilities/Sphinx/static
 )
@@ -584,7 +583,6 @@ foreach(var
     list(APPEND file-DOWNLOAD_ARGS -D${var}=${${var}})
   endif()
 endforeach()
-add_RunCMake_test(file-DOWNLOAD)
 add_RunCMake_test(file-RPATH
   -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}
   -DCMake_TEST_ELF_LARGE=${CMake_TEST_ELF_LARGE}
--- a/Utilities/cmcurl/CMakeLists.txt
+++ b/Utilities/cmcurl/CMakeLists.txt
@@ -29,13 +29,13 @@ set(CURL_DISABLE_DIGEST_AUTH OFF)
 set(CURL_DISABLE_DOH OFF)
 set(CURL_DISABLE_FILE OFF CACHE INTERNAL "Disable curl file protocol?")
 set(CURL_DISABLE_FORM_API OFF)
-set(CURL_DISABLE_FTP OFF CACHE INTERNAL "Disable curl ftp protocol?")
+set(CURL_DISABLE_FTP ON CACHE INTERNAL "Disable curl ftp protocol?")
 set(CURL_DISABLE_GETOPTIONS OFF)
 set(CURL_DISABLE_GOPHER ON CACHE INTERNAL "Disable curl gopher protocol?")
 set(CURL_DISABLE_HEADERS_API OFF)
 set(CURL_DISABLE_HSTS OFF)
-set(CURL_DISABLE_HTTP_AUTH OFF)
-set(CURL_DISABLE_HTTP OFF CACHE INTERNAL "Disable curl http protocol?")
+set(CURL_DISABLE_HTTP_AUTH ON)
+set(CURL_DISABLE_HTTP ON CACHE INTERNAL "Disable curl http protocol?")
 set(CURL_DISABLE_IMAP ON CACHE INTERNAL "Disable curl imap protocol?")
 set(CURL_DISABLE_INSTALL ON)
 set(CURL_DISABLE_KERBEROS_AUTH OFF)
@@ -51,12 +51,12 @@ set(CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFI
 set(CURL_DISABLE_PARSEDATE OFF)
 set(CURL_DISABLE_POP3 ON CACHE INTERNAL "Disable curl pop3 protocol?")
 set(CURL_DISABLE_PROGRESS_METER OFF)
-set(CURL_DISABLE_PROXY OFF CACHE INTERNAL "Do not disable curl proxy")
+set(CURL_DISABLE_PROXY ON CACHE INTERNAL "Do not disable curl proxy")
 set(CURL_DISABLE_RTSP ON CACHE INTERNAL "Disable curl rtsp protocol?")
 set(CURL_DISABLE_SHUFFLE_DNS OFF)
 set(CURL_DISABLE_SMB OFF)
 set(CURL_DISABLE_SMTP ON CACHE INTERNAL "Disable curl smtp protocol?")
-set(CURL_DISABLE_SOCKETPAIR OFF)
+set(CURL_DISABLE_SOCKETPAIR ON)
 set(CURL_DISABLE_SRP OFF)
 set(CURL_DISABLE_TELNET ON CACHE INTERNAL "Disable curl telnet protocol?")
 set(CURL_DISABLE_TFTP ON CACHE INTERNAL "Disable curl tftp protocol?")
@@ -73,7 +73,7 @@ set(ENABLE_ALT_SVC OFF)
 set(ENABLE_CURLDEBUG OFF CACHE INTERNAL "No curl TrackMemory features")
 set(ENABLE_DEBUG OFF CACHE INTERNAL "No curl debug features")
 set(ENABLE_INET_PTON OFF CACHE INTERNAL "Set to OFF to prevent usage of inet_pton when building against modern SDKs while still requiring compatibility with older Windows versions, such as Windows XP, Windows Server 2003 etc.")
-set(ENABLE_IPV6 ON CACHE INTERNAL "Enable curl IPv6 support detection")
+set(ENABLE_IPV6 OFF CACHE INTERNAL "Enable curl IPv6 support detection")
 set(ENABLE_MANUAL OFF CACHE INTERNAL "No curl built-in manual")
 set(ENABLE_THREADED_RESOLVER OFF CACHE INTERNAL "No curl POSIX threaded DNS lookup")
 set(ENABLE_UNICODE OFF)
@@ -92,9 +92,9 @@ set(PICKY_COMPILER OFF CACHE INTERNAL "E
 set(SHARE_LIB_OBJECT OFF)
 set(USE_ECH OFF)
 set(USE_HTTPSRR OFF)
-set(USE_LIBIDN2 ON)
+set(USE_LIBIDN2 OFF)
 set(USE_LIBRTMP OFF)
-set(USE_NGHTTP2 ON)
+set(USE_NGHTTP2 OFF)
 set(USE_NGTCP2 OFF)
 set(USE_OPENSSL_QUIC OFF)
 set(USE_QUICHE OFF)
@@ -371,11 +371,11 @@ cmake_dependent_option(CURL_DISABLE_FORM
                        "NOT CURL_DISABLE_MIME" ON)
 mark_as_advanced(CURL_DISABLE_FORM_API)
 endif()
-option(CURL_DISABLE_FTP "disables FTP" OFF)
+option(CURL_DISABLE_FTP "disables FTP" ON)
 mark_as_advanced(CURL_DISABLE_FTP)
 option(CURL_DISABLE_GETOPTIONS "disables curl_easy_options API for existing options to curl_easy_setopt" OFF)
 mark_as_advanced(CURL_DISABLE_GETOPTIONS)
-option(CURL_DISABLE_GOPHER "disables Gopher" OFF)
+option(CURL_DISABLE_GOPHER "disables Gopher" ON)
 mark_as_advanced(CURL_DISABLE_GOPHER)
 option(CURL_DISABLE_HEADERS_API "disables headers-api support" OFF)
 mark_as_advanced(CURL_DISABLE_HEADERS_API)
@@ -383,7 +383,7 @@ option(CURL_DISABLE_HSTS "disables HSTS
 mark_as_advanced(CURL_DISABLE_HSTS)
 option(CURL_DISABLE_HTTP "disables HTTP" OFF)
 mark_as_advanced(CURL_DISABLE_HTTP)
-option(CURL_DISABLE_HTTP_AUTH "disables all HTTP authentication methods" OFF)
+option(CURL_DISABLE_HTTP_AUTH "disables all HTTP authentication methods" ON)
 mark_as_advanced(CURL_DISABLE_HTTP_AUTH)
 option(CURL_DISABLE_IMAP "disables IMAP" OFF)
 mark_as_advanced(CURL_DISABLE_IMAP)
--- a/Utilities/cmcurl/lib/strerror.c
+++ b/Utilities/cmcurl/lib/strerror.c
@@ -61,7 +61,7 @@ curl_easy_strerror(CURLcode error)
     return "No error";
 
   case CURLE_UNSUPPORTED_PROTOCOL:
-    return "Unsupported protocol";
+    return "Unsupported protocol, xbps-src's cmake has no network";
 
   case CURLE_FAILED_INIT:
     return "Failed initialization";
