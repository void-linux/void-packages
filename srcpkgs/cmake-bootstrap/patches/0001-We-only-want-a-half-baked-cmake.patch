From 87468f753d9732eac35a80217638a51cd106e0eb Mon Sep 17 00:00:00 2001
From: Nathan Owens <ndowens@artixlinux.org>
Date: Fri, 20 Nov 2020 18:55:09 -0600
Subject: We only want a half-baked-cmake

---
 Source/cmSystemTools.cxx |  7 +----
 bootstrap                | 67 ++--------------------------------------
 2 files changed, 3 insertions(+), 71 deletions(-)

diff --git Source/cmSystemTools.cxx Source/cmSystemTools.cxx
index 97440d2..747cedc 100644
--- Source/cmSystemTools.cxx
+++ Source/cmSystemTools.cxx
@@ -2141,7 +2141,7 @@ void cmSystemTools::FindCMakeResources(const char* argv0)
 #ifdef CMAKE_BOOTSTRAP
   // The bootstrap cmake does not provide the other tools,
   // so use the directory where they are about to be built.
-  exe_dir = CMAKE_BOOTSTRAP_BINARY_DIR "/bin";
+	// this cmake will be installed to system directory
 #endif
   cmSystemToolsCTestCommand =
     cmStrCat(exe_dir, "/ctest", cmSystemTools::GetExecutableExtension());
@@ -2163,7 +2163,6 @@ void cmSystemTools::FindCMakeResources(const char* argv0)
     cmSystemToolsCMClDepsCommand.clear();
   }
 
-#ifndef CMAKE_BOOTSTRAP
   // Install tree has
   // - "<prefix><CMAKE_BIN_DIR>/cmake"
   // - "<prefix><CMAKE_DATA_DIR>"
@@ -2204,10 +2203,6 @@ void cmSystemTools::FindCMakeResources(const char* argv0)
       cmSystemToolsHTMLDoc = cmStrCat(dir, "/Utilities/Sphinx/html");
     }
   }
-#else
-  // Bootstrap build knows its source.
-  cmSystemToolsCMakeRoot = CMAKE_BOOTSTRAP_SOURCE_DIR;
-#endif
 }
 
 std::string const& cmSystemTools::GetCMakeCommand()
diff --git bootstrap bootstrap
index 7ec3687..4500b6e 100755
--- bootstrap
+++ bootstrap
@@ -833,14 +833,6 @@ cmake_try_run ()
     echo "Test failed to produce executable"
     return 2
   fi
-  ./${TMPFILE}
-  RES=$?
-  rm -f "${TMPFILE}"
-  if test "${RES}" -ne "0"; then
-    echo "Test produced non-zero return code"
-    return 3
-  fi
-  echo "Test succeeded"
   return 0
 }
 
@@ -860,14 +852,6 @@ cmake_try_make ()
     echo "${COMPILER} does not produce output"
     return 2
   fi
-  ./test
-  RES=$?
-  rm -f "test"
-  if test "${RES}" -ne "0"; then
-    echo "${MAKE_PROC} produces strange executable"
-    return 3
-  fi
-  echo "${MAKE_PROC} works"
   return 0
 }
 
@@ -1554,8 +1538,8 @@ cmake_report cmVersionConfig.h${_tmp} "#define CMake_VERSION \"${cmake_version}\
 cmake_report cmConfigure.h${_tmp} "#define CMAKE_BOOTSTRAP_SOURCE_DIR \"${CMAKE_BOOTSTRAP_SOURCE_DIR}\""
 cmake_report cmConfigure.h${_tmp} "#define CMAKE_BOOTSTRAP_BINARY_DIR \"${CMAKE_BOOTSTRAP_BINARY_DIR}\""
 cmake_report cmConfigure.h${_tmp} "#define CMake_DEFAULT_RECURSION_LIMIT 400"
-cmake_report cmConfigure.h${_tmp} "#define CMAKE_BIN_DIR \"/bootstrap-not-insalled\""
-cmake_report cmConfigure.h${_tmp} "#define CMAKE_DATA_DIR \"/bootstrap-not-insalled\""
+cmake_report cmConfigure.h${_tmp} "#define CMAKE_BIN_DIR \"$cmake_bin_dir\""
+cmake_report cmConfigure.h${_tmp} "#define CMAKE_DATA_DIR \"$cmake_data_dir\""
 cmake_report cmConfigure.h${_tmp} "#define CM_FALLTHROUGH"
 
 if test "${cmake_bootstrap_generator}" = "Ninja"; then
@@ -1932,50 +1916,3 @@ if test -f "${cmake_init_file}"; then
   cat "${cmake_init_file}" >> "${cmake_bootstrap_dir}/InitialCacheFlags.cmake"
 fi
 )
-
-echo "---------------------------------------------"
-
-# Run make to build bootstrap cmake
-if test "${cmake_bootstrap_generator}" = "Ninja"; then
-  ninja_v=-v
-else
-  ninja_v=
-fi
-if test "x${cmake_parallel_make}" != "x"; then
-  ${cmake_make_processor} ${cmake_make_flags} ${ninja_v}
-else
-  ${cmake_make_processor} ${ninja_v}
-fi
-RES=$?
-if test "${RES}" -ne "0"; then
-  cmake_error 9 "Problem while running ${cmake_make_processor}"
-fi
-cd "${cmake_binary_dir}"
-
-# Set C, CXX, and MAKE environment variables, so that real real cmake will be
-# build with same compiler and make
-CC="${cmake_c_compiler}"
-CXX="${cmake_cxx_compiler}"
-MAKE="${cmake_make_processor}"
-export CC
-export CXX
-export MAKE
-export CFLAGS
-export CXXFLAGS
-export LDFLAGS
-
-# Run bootstrap CMake to configure real CMake
-cmake_options="-DCMAKE_BOOTSTRAP=1"
-if test -n "${cmake_verbose}"; then
-  cmake_options="${cmake_options} -DCMAKE_VERBOSE_MAKEFILE=1"
-fi
-"${cmake_bootstrap_dir}/cmake" "${cmake_source_dir}" "-C${cmake_bootstrap_dir}/InitialCacheFlags.cmake" "-G${cmake_bootstrap_generator}" ${cmake_options} ${cmake_bootstrap_system_libs} "$@"
-RES=$?
-if test "${RES}" -ne "0"; then
-  cmake_error 11 "Problem while running initial CMake"
-fi
-
-echo "---------------------------------------------"
-
-# And we are done. Now just run make
-echo "CMake has bootstrapped.  Now run ${cmake_make_processor}."
-- 
2.29.2
