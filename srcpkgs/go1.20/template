# Template file for 'go1.20'
pkgname=go1.20
version=1.20.7
revision=1
create_wrksrc=yes
build_wrksrc=go
hostmakedepends="go1.17-bootstrap"
checkdepends="iana-etc clang gcc-fortran"
short_desc="Go Programming Language"
maintainer="Michael Aldridge <maldridge@voidlinux.org>"
license="BSD-3-Clause"
homepage="https://go.dev/"
changelog="https://go.dev/doc/devel/release.html"
distfiles="https://go.dev/dl/go${version}.src.tar.gz"
checksum=2c5ee9c9ec1e733b0dbbc2bdfed3f62306e51d8172bf38f4f4e542b27520f597
nostrip=yes
noverifyrdeps=yes
# on CI it tries to use `git submodule`, which is not part of chroot-git
make_check=ci-skip

case "${XBPS_TARGET_MACHINE}" in
	aarch64*) _goarch=arm64 ;;
	arm*) _goarch=arm ;;
	i686*) _goarch=386 ;;
	x86_64*) _goarch=amd64 ;;
	ppc64le*) _goarch=ppc64le ;;
	mips*) _goarch=mips ;;
	*) broken="Unsupported architecture ${XBPS_TARGET_MACHINE}" ;;
esac

if [ "$CROSS_BUILD" ]; then
	if [ "${XBPS_MACHINE%%-musl}" = "${XBPS_TARGET_MACHINE%%-musl}" ]; then
		broken="Cross-compiling to different libc is not supported"
	fi
fi

# Workaround for go-1.19 compilation error on i686
#   runtime/cgo(.text): unknown symbol __stack_chk_fail_local in pcrel
if [ "$XBPS_MACHINE" = i686 ]; then
	export CGO_CFLAGS="-fno-stack-protector"
fi

post_extract() {
	if [ "$(df . --output=fstype | tail -1)" = zfs ]; then
		# https://github.com/golang/go/issues/39905
		rm -v go/src/cmd/link/internal/ld/fallocate_test.go
	fi
}

do_build() {
	unset GCC CC CXX LD CFLAGS
	# FIXME: work around leaking go build-style vars when built as a
	# dependency
	unset CGO_CXXFLAGS CGO_ENABLED # CGO_CFLAGS

	export GOROOT_BOOTSTRAP="/usr/lib/go1.17.13"
	export GOROOT=$PWD
	export GOROOT_FINAL="/usr/lib/${pkgname}"
	export GOARCH=${_goarch}

	cd "src"

	bash make.bash -v
}

do_check() {
	if [ "$XBPS_LIBC" = musl ]; then
		# https://github.com/golang/go/issues/39857
		./bin/go tool dist test -v -run "!^cgo_test$"
	else
		./bin/go tool dist test -v
	fi
}

do_install() {
	local bindir _f _fname

	if [ "$CROSS_BUILD" ]; then
		bindir=bin/linux_${_goarch}
	else
		bindir=bin
	fi

	vmkdir usr/bin
	vmkdir usr/lib/${pkgname}/bin
	vmkdir usr/share/${pkgname}
	cp -d --preserve=all ${bindir}/* ${DESTDIR}/usr/lib/${pkgname}/bin || true
	cp -a pkg src lib ${DESTDIR}/usr/lib/${pkgname}
	cp -r doc misc -t ${DESTDIR}/usr/share/${pkgname}
	ln -sfr ${DESTDIR}/usr/share/${pkgname}/doc \
		${DESTDIR}/usr/lib/${pkgname}/doc
	cp VERSION ${DESTDIR}/usr/lib/${pkgname}/VERSION

	# This is to make go get code.google.com/p/go-tour/gotour and
	# then running the gotour executable work out of the box.
	#
	# Also, /usr/bin is the place for system-wide executables,
	# not /usr/lib/go/bin. Users should use different paths by
	# setting the appropriate environment variables.
	#
	for _f in ${DESTDIR}/usr/lib/${pkgname}/bin/*; do
		if [ -f "$_f" ]; then
			_fname=${_f##*/}
			ln -sf "../lib/${pkgname}/bin/$_fname" \
				"${DESTDIR}/usr/bin/${_fname}1.20"
		fi
	done

	# <dominikh> sigh. well, someone fix the template and add
	# a symlink, usr/lib/go/misc -> /usr/share/go/misc
	ln -sfr ${DESTDIR}/usr/share/${pkgname}/misc \
		${DESTDIR}/usr/lib/${pkgname}/misc

	rm -f ${DESTDIR}/usr/share/${pkgname}/doc/articles/wiki/get.bin
	rm -f ${DESTDIR}/usr/lib/${pkgname}/pkg/tool/*/api
	rm -rf ${DESTDIR}/usr/lib/${pkgname}/pkg/bootstrap
	rm -rf ${DESTDIR}/usr/lib/${pkgname}/pkg/obj

	vlicense LICENSE
}
