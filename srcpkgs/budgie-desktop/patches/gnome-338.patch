From 30ba0b5a4986d6be3687a1d7fb482906185ea8c9 Mon Sep 17 00:00:00 2001
From: David Mohammed <fossfreedom@users.noreply.github.com>
Date: Tue, 18 Feb 2020 06:40:12 +0000
Subject: [PATCH] gnome 3.38 compatibility

Squashed by @q66 from:

https://github.com/solus-project/budgie-desktop/pull/1987

plus an assortment of older mutter updates from git master
---
 meson.build                                   |   16 +-
 meson_options.txt                             |    1 -
 src/applets/status/StatusApplet.vala          |    6 -
 src/applets/status/meson.build                |   13 +-
 src/wm/background.vala                        |   15 +-
 src/wm/meson.build                            |   30 +-
 src/wm/shim.vala                              |   10 +-
 src/wm/wm.vala                                |   10 +-
 ...{Clutter-5.metadata => Clutter-6.metadata} |    0
 ...{Clutter-4.metadata => Clutter-7.metadata} |   43 -
 vapi/{Cogl-4.metadata => Cogl-6.metadata}     |    0
 vapi/{Cogl-5.metadata => Cogl-7.metadata}     |    2 -
 vapi/Meta-3.metadata                          |   66 -
 vapi/{Meta-5.metadata => Meta-6.metadata}     |    0
 vapi/{Meta-4.metadata => Meta-7.metadata}     |   25 +-
 vapi/generate-mutter-vapi.sh                  |    2 +-
 vapi/graphene-gobject-1.0.vapi                |  691 +++++++
 vapi/libmutter-2.deps                         |    9 -
 vapi/libmutter-2.vapi                         | 1325 --------------
 vapi/libmutter-3-custom.vala                  |    6 -
 vapi/libmutter-3.deps                         |    9 -
 vapi/libmutter-4.deps                         |    8 -
 vapi/libmutter-4.vapi                         | 1425 ---------------
 vapi/{libmutter-5.deps => libmutter-6.deps}   |    3 +-
 vapi/{libmutter-5.vapi => libmutter-6.vapi}   |   45 +-
 vapi/libmutter-7-custom.vala                  |    7 +
 vapi/libmutter-7.deps                         |    6 +
 vapi/{libmutter-3.vapi => libmutter-7.vapi}   |  390 ++--
 vapi/libmutter-cogl-4.vapi                    | 1272 -------------
 vapi/mutter-clutter-5-custom.vala             |  158 --
 ...stom.vala => mutter-clutter-6-custom.vala} |   11 -
 ...r-clutter-5.deps => mutter-clutter-6.deps} |    2 +-
 ...r-clutter-5.vapi => mutter-clutter-6.vapi} |  806 ++------
 ...r-clutter-4.deps => mutter-clutter-7.deps} |    3 +-
 ...r-clutter-4.vapi => mutter-clutter-7.vapi} | 1615 ++++-------------
 ...-custom.vala => mutter-cogl-6-custom.vala} |    0
 ...{mutter-cogl-4.deps => mutter-cogl-6.deps} |    0
 ...{mutter-cogl-5.vapi => mutter-cogl-6.vapi} |  422 +----
 ...-custom.vala => mutter-cogl-7-custom.vala} |   20 +-
 ...{mutter-cogl-5.deps => mutter-cogl-7.deps} |    0
 ...{mutter-cogl-4.vapi => mutter-cogl-7.vapi} |  671 +++----
 vapi/polkit-gobject-1.vapi                    |   31 +-
 42 files changed, 1920 insertions(+), 7254 deletions(-)
 rename vapi/{Clutter-5.metadata => Clutter-6.metadata} (100%)
 rename vapi/{Clutter-4.metadata => Clutter-7.metadata} (78%)
 rename vapi/{Cogl-4.metadata => Cogl-6.metadata} (100%)
 rename vapi/{Cogl-5.metadata => Cogl-7.metadata} (91%)
 delete mode 100644 vapi/Meta-3.metadata
 rename vapi/{Meta-5.metadata => Meta-6.metadata} (100%)
 rename vapi/{Meta-4.metadata => Meta-7.metadata} (76%)
 create mode 100644 vapi/graphene-gobject-1.0.vapi
 delete mode 100644 vapi/libmutter-2.deps
 delete mode 100644 vapi/libmutter-2.vapi
 delete mode 100644 vapi/libmutter-3-custom.vala
 delete mode 100644 vapi/libmutter-3.deps
 delete mode 100644 vapi/libmutter-4.deps
 delete mode 100644 vapi/libmutter-4.vapi
 rename vapi/{libmutter-5.deps => libmutter-6.deps} (50%)
 rename vapi/{libmutter-5.vapi => libmutter-6.vapi} (97%)
 create mode 100644 vapi/libmutter-7-custom.vala
 create mode 100644 vapi/libmutter-7.deps
 rename vapi/{libmutter-3.vapi => libmutter-7.vapi} (75%)
 delete mode 100644 vapi/libmutter-cogl-4.vapi
 delete mode 100644 vapi/mutter-clutter-5-custom.vala
 rename vapi/{mutter-clutter-4-custom.vala => mutter-clutter-6-custom.vala} (92%)
 rename vapi/{mutter-clutter-5.deps => mutter-clutter-6.deps} (63%)
 rename vapi/{mutter-clutter-5.vapi => mutter-clutter-6.vapi} (93%)
 rename vapi/{mutter-clutter-4.deps => mutter-clutter-7.deps} (54%)
 rename vapi/{mutter-clutter-4.vapi => mutter-clutter-7.vapi} (86%)
 rename vapi/{mutter-cogl-5-custom.vala => mutter-cogl-6-custom.vala} (100%)
 rename vapi/{mutter-cogl-4.deps => mutter-cogl-6.deps} (100%)
 rename vapi/{mutter-cogl-5.vapi => mutter-cogl-6.vapi} (68%)
 rename vapi/{mutter-cogl-4-custom.vala => mutter-cogl-7-custom.vala} (81%)
 rename vapi/{mutter-cogl-5.deps => mutter-cogl-7.deps} (100%)
 rename vapi/{mutter-cogl-4.vapi => mutter-cogl-7.vapi} (59%)

diff --git meson.build meson.build
index 2a0e0316..3c4c6ac1 100644
--- meson.build
+++ meson.build
@@ -32,16 +32,16 @@ am_cflags = [
 add_global_arguments(am_cflags, language: 'c')
 meson.add_install_script('meson_post_install.sh')
 
-# Budgie needs a minimum 3.22 GNOME stack
-gnome_minimum_version = '>= 3.22.0'
+# Budgie needs a minimum 3.24 GNOME stack
+gnome_minimum_version = '>= 3.24.0'
 
 dep_gtk3 = dependency('gtk+-3.0', version: gnome_minimum_version)
-dep_glib = dependency('glib-2.0', version: '>= 2.46.0')
-dep_giounix = dependency('gio-unix-2.0', version: '>= 2.46.0')
-dep_peas = dependency('libpeas-1.0', version: '>= 1.8.0')
+dep_glib = dependency('glib-2.0', version: '>= 2.62.0')
+dep_giounix = dependency('gio-unix-2.0', version: '>= 2.62.0')
+dep_peas = dependency('libpeas-1.0', version: '>= 1.24.0')
 dep_gdkx11 = dependency('gdk-x11-3.0', version: gnome_minimum_version)
 dep_libuuid = dependency('uuid')
-dep_vala = dependency('vapigen', version: '>= 0.40.0')
+dep_vala = dependency('vapigen', version: '>= 0.46.0')
 
 # Needed for keyboardy bits
 dep_ibus = dependency('ibus-1.0', version: '>= 1.5.10')
@@ -51,10 +51,10 @@ dep_gsettings = dependency('gsettings-desktop-schemas', version: gnome_minimum_v
 dep_gsd = dependency('gnome-settings-daemon', version: '>=3.28.0')
 
 # wnck used all over the place..
-dep_wnck = dependency('libwnck-3.0', version: '>= 3.14.0')
+dep_wnck = dependency('libwnck-3.0', version: '>= 3.32.0')
 
 # accountsservice in multiple applets
-dep_accountsservice = dependency('accountsservice', version: '>= 0.6.40')
+dep_accountsservice = dependency('accountsservice', version: '>= 0.6.55')
 
 # Create config.h
 cdata = configuration_data()
diff --git meson_options.txt meson_options.txt
index d71b09b5..dca91296 100644
--- meson_options.txt
+++ meson_options.txt
@@ -1,5 +1,4 @@
 option('with-stateless', type: 'boolean', value: false, description: 'Enable stateless XDG paths')
 option('with-polkit', type: 'boolean', value: true, description: 'Enable PolKit support')
-option('with-bluetooth', type: 'boolean', value: true, description: 'Enable gnome-bluetooth support')
 option('with-gtk-doc', type: 'boolean', value: true, description: 'Build gtk-doc documentation')
 option('with-desktop-icons', type: 'combo', choices: ['nautilus', 'none'], value: 'nautilus', description: 'Desktop icon handling')
diff --git src/applets/status/StatusApplet.vala src/applets/status/StatusApplet.vala
index b9826394..71f287c9 100644
--- src/applets/status/StatusApplet.vala
+++ src/applets/status/StatusApplet.vala
@@ -20,9 +20,7 @@ public class StatusApplet : Budgie.Applet
 {
 
     protected Gtk.Box widget;
-#if WITH_BLUETOOTH
     protected BluetoothIndicator blue;
-#endif
     protected SoundIndicator sound;
     protected PowerIndicator power;
     protected Gtk.EventBox? wrap;
@@ -68,12 +66,10 @@ public class StatusApplet : Budgie.Applet
         this.setup_popover(power.ebox, power.popover);
         this.setup_popover(sound.ebox, sound.popover);
 
-#if WITH_BLUETOOTH
         blue = new BluetoothIndicator();
         widget.pack_start(blue, false, false, 2);
         blue.show_all();
         this.setup_popover(blue.ebox, blue.popover);
-#endif
     }
 
     public override void panel_position_changed(Budgie.PanelPosition position)
@@ -91,9 +87,7 @@ public class StatusApplet : Budgie.Applet
         this.manager = manager;
         manager.register_popover(power.ebox, power.popover);
         manager.register_popover(sound.ebox, sound.popover);
-#if WITH_BLUETOOTH
         manager.register_popover(blue.ebox, blue.popover);
-#endif
     }
 } // End class
 
diff --git src/applets/status/meson.build src/applets/status/meson.build
index 699fb8f4..b4d2706c 100644
--- src/applets/status/meson.build
+++ src/applets/status/meson.build
@@ -10,6 +10,7 @@ custom_target('plugin-file-status',
     install_dir : applet_status_dir)
 
 applet_status_sources = [
+    'BluetoothIndicator.vala',
     'StatusApplet.vala',
     'PowerIndicator.vala',
     'SoundIndicator.vala',
@@ -20,22 +21,13 @@ applet_status_deps = [
     dep_gtk3,
     dep_peas,
     dep_accountsservice,
+    dependency('gnome-bluetooth-1.0', version: gnome_minimum_version),
     dependency('upower-glib', version: '>= 0.99.0'),
     link_libplugin,
     gvc.get_variable('libgvc_dep'),
     meson.get_compiler('c').find_library('m', required: false),
 ]
 
-# Bluetooth is optional to allow smaller builds
-with_bluetooth = get_option('with-bluetooth')
-applet_status_vala_args = []
-
-if with_bluetooth == true
-    applet_status_deps += dependency('gnome-bluetooth-1.0', version: gnome_minimum_version)
-    applet_status_sources += 'BluetoothIndicator.vala'
-    applet_status_vala_args += ['-D', 'WITH_BLUETOOTH']
-endif
-
 shared_library(
     'statusapplet',
     applet_status_sources,
@@ -50,7 +42,6 @@ shared_library(
         '--pkg', 'gvc-1.0',
         '--pkg', 'gio-unix-2.0',
         '--vapidir', join_paths(meson.source_root(), 'vapi'),
-        applet_status_vala_args,
     ],
     install: true,
     install_dir: applet_status_dir,
diff --git src/wm/background.vala src/wm/background.vala
index 084aa9ab..b331e0c4 100644
--- src/wm/background.vala
+++ src/wm/background.vala
@@ -204,8 +204,13 @@ public class BudgieBackground : Clutter.Actor
 
         var actor = new Meta.BackgroundActor(display, index);
         var background = new Meta.Background(display);
+#if HAVE_MUTTER_6
         actor.set_background(background);
-
+#else
+        var content = actor.get_content();
+        unowned Meta.BackgroundContent background_content = (Meta.BackgroundContent) content;
+        background_content.set_background(background);
+#endif
         rect = display.get_monitor_geometry(index);
         actor.set_size(rect.width, rect.height);
         actor.set("opacity", 0);
@@ -221,13 +226,21 @@ public class BudgieBackground : Clutter.Actor
         shading_direction = (GDesktop.BackgroundShading)settings.get_enum(COLOR_SHADING_TYPE_KEY);
         var color_str = settings.get_string(PRIMARY_COLOR_KEY);
         if (color_str != null && color_str != "") {
+#if HAVE_MUTTER_6
             primary_color = Clutter.Color.from_string(color_str);
+#else
+            Clutter.Color.from_string(out primary_color, color_str);
+#endif
             color_str = null;
         }
 
         color_str = settings.get_string(SECONDARY_COLOR_KEY);
         if (color_str != null && color_str != "") {
+#if HAVE_MUTTER_6
             secondary_color = Clutter.Color.from_string(color_str);
+#else
+            Clutter.Color.from_string(out secondary_color, color_str);
+#endif
             color_str = null;
         }
 
diff --git src/wm/meson.build src/wm/meson.build
index e39b8678..583ce790 100644
--- src/wm/meson.build
+++ src/wm/meson.build
@@ -17,20 +17,18 @@ budgie_wm_sources = [
 
 budgie_wm_status_vala_args = []
 
-vapi_mutter = 'libmutter-3'
-dep_mutter = dependency('libmutter-3', version: gnome_minimum_version, required: false)
-if not dep_mutter.found()
-    dep_mutter = dependency('libmutter-4', version: gnome_minimum_version, required: false)
+dep_graphene = dependency('graphene-gobject-1.0', version: '>= 1.10')
+dep_mutter = dependency('libmutter-7', version: gnome_minimum_version, required: false)
+if dep_mutter.found()
+    budgie_wm_status_vala_args += ['-D', 'HAVE_MUTTER_7']
+    message('Using new libmutter-7 ABI from GNOME 3.38')
+    vapi_mutter = 'libmutter-7'
+else
+    dep_mutter = dependency('libmutter-6', version: gnome_minimum_version)
+    budgie_wm_status_vala_args += ['-D', 'HAVE_MUTTER_6']
     if dep_mutter.found()
-        message('Using new libmutter-4 ABI from GNOME 3.32')
-        vapi_mutter = 'libmutter-4'
-    else
-        dep_mutter = dependency('libmutter-5', version: gnome_minimum_version)
-        if dep_mutter.found()
-            message('Using new libmutter-5 ABI from GNOME 3.34')
-            vapi_mutter = 'libmutter-5'
-            budgie_wm_status_vala_args += ['-D', 'HAVE_MUTTER_5']
-        endif
+        message('Using new libmutter-6 ABI from GNOME 3.36')
+        vapi_mutter = 'libmutter-6'
     endif
 endif
 
@@ -42,8 +40,8 @@ budgie_wm_deps = [
     dep_ibus,
 ]
 
-if dep_gsd.version().version_compare('>=3.31.91')
-    budgie_wm_status_vala_args += ['-D', 'HAVE_GSD_332']
+if dep_gsd.version().version_compare('>=3.36.0')
+    budgie_wm_status_vala_args += ['-D', 'HAVE_GSD_SUPPORTED']
 endif
 
 budgie_wm_vala_args =  [
@@ -60,7 +58,7 @@ budgie_wm_vala_args =  [
 
 rpath = ''
 
-if dep_mutter.version().version_compare('>=3.28.0')
+if dep_mutter.version().version_compare('>=3.36.0')
     rpath = dep_mutter.get_pkgconfig_variable('typelibdir')
     budgie_wm_vala_args += ['--girdir', rpath]
 endif
diff --git src/wm/shim.vala src/wm/shim.vala
index 4cdfa0b0..fc24b289 100644
--- src/wm/shim.vala
+++ src/wm/shim.vala
@@ -14,7 +14,7 @@ namespace Budgie {
 public struct GsdAccel {
     string accelerator;
     uint flags;
-#if HAVE_GSD_332
+#if HAVE_GSD_SUPPORTED
     Meta.KeyBindingFlags grab_flags;
 #endif
 }
@@ -193,11 +193,7 @@ public class ShellShim : GLib.Object
         osd_proxy = null;
     }
 
-#if HAVE_MUTTER_5
     private void on_accelerator_activated(uint action, Clutter.InputDevice dev, uint device_id)
-#else
-    private void on_accelerator_activated(uint action, uint device_id)
-#endif
     {
         HashTable<string,Variant> params = new HashTable<string,Variant>(str_hash, str_equal);
 
@@ -230,7 +226,7 @@ public class ShellShim : GLib.Object
         }
     }
 
-#if HAVE_GSD_332
+#if HAVE_GSD_SUPPORTED
     private uint _grab(string sender, string seq, uint flag, Meta.KeyBindingFlags grab_flags)
     {
         var ret = display.grab_accelerator(seq, grab_flags);
@@ -273,7 +269,7 @@ public class ShellShim : GLib.Object
             on_bus_acquired, null, null);
     }
 
-#if HAVE_GSD_332
+#if HAVE_GSD_SUPPORTED
     public uint GrabAccelerator(BusName sender, string accelerator, uint flags, Meta.KeyBindingFlags grab_flags)
     {
         return _grab(sender, accelerator, flags, grab_flags);
diff --git src/wm/wm.vala src/wm/wm.vala
index fee89443..bccf3b95 100644
--- src/wm/wm.vala
+++ src/wm/wm.vala
@@ -137,8 +137,8 @@ public class BudgieWM : Meta.Plugin
     public static string[]? old_args;
     public static bool wayland = false;
 
-    static Clutter.Point PV_CENTER;
-    static Clutter.Point PV_NORM;
+    static Graphene.Point PV_CENTER;
+    static Graphene.Point PV_NORM;
 
     private Meta.BackgroundGroup? background_group;
 
@@ -171,10 +171,10 @@ public class BudgieWM : Meta.Plugin
             license = "GPL-2.0",
             description = "Budgie Window Manager"
         };
-        PV_CENTER = Clutter.Point.alloc();
+        PV_CENTER = Graphene.Point();
+        PV_NORM = Graphene.Point();
         PV_CENTER.x = 0.5f;
         PV_CENTER.y = 0.5f;
-        PV_NORM = Clutter.Point.alloc();
         PV_NORM.x = 0.0f;
         PV_NORM.y = 0.0f;
     }
@@ -1001,7 +1001,7 @@ public class BudgieWM : Meta.Plugin
         tile_preview.set("scale-x", NOTIFICATION_MAP_SCALE_X, "scale-y", NOTIFICATION_MAP_SCALE_Y,
             "pivot-point", PV_CENTER);
 
-        tile_preview.lower(win_actor);
+        //tile_preview.lower(win_actor);
         tile_preview.tile_rect = tile_rect;
 
         tile_preview.show();
diff --git vapi/Clutter-5.metadata vapi/Clutter-6.metadata
similarity index 100%
rename from vapi/Clutter-5.metadata
rename to vapi/Clutter-6.metadata
diff --git vapi/Clutter-4.metadata vapi/Clutter-7.metadata
similarity index 78%
rename from vapi/Clutter-4.metadata
rename to vapi/Clutter-7.metadata
index 5c212e85..1855274d 100644
--- vapi/Clutter-4.metadata
+++ vapi/Clutter-7.metadata
@@ -1,13 +1,10 @@
 // Non mini-object
 ActorBox struct
 Color struct
-Fog struct
-Geometry struct
 Knot struct
 PathNode struct
 Perspective struct
 Units struct
-Vertex struct
 
 *.ref unowned
 
@@ -17,7 +14,6 @@ init_with_args
 Actor
 	.apply_transform.matrix ref
 	.get_abs_allocation_vertices.verts out=false
-	.get_allocation_vertices.verts out=false
 Canvas
 	.new symbol_type="constructor"
 Event.type#method name="get_type"
@@ -27,7 +23,6 @@ Image
 // ???
 Actor.has_pointer#method name="get_has_pointer"
 InitError errordomain=false
-redraw skip
 
 // Not all backing symbols are deprecated
 Actor.pick deprecated=false
@@ -55,7 +50,6 @@ Container
 	.lower virtual
 	.raise virtual
 	.*_child_meta#virtual_method virtual
-	.foreach_with_internals#virtual_method virtual
 
 // Default values
 Container
@@ -70,32 +64,21 @@ Text
 // Reparented funcs methods can't be instance methods
 feature_available skip
 feature_get_all skip
-FeatureFlags.texture_npot skip
 
 // Skipped by g-i for unknown reasons
 LayoutManager
 	.create_child_meta skip=false
-Model
-	.insert_row skip=false
 
 // Variadic arguments
-Actor
-	.animate skip=false
-	.animate_with_alpha skip=false
-	.animate_with_timeline skip=false
-Animator
-	.set skip=false
 Box
 	.pack skip=false
 	.pack_after skip=false
 	.pack_at skip=false
 	.pack_before skip=false
 Container
-	.add_valist skip=false
 	.child_get skip=false
 	.child_set skip=false
 	.remove skip=false
-	.remove_valist skip=false
 Interval
 	.new skip=false
 	.get_interval skip=false
@@ -105,15 +88,6 @@ Interval
 LayoutManager
 	.child_get skip=false
 	.child_set skip=false
-ListModel
-	.new skip=false
-Model
-	.append skip=false
-	.insert skip=false
-	.prepend skip=false
-ModelIter
-	.get skip=false
-	.set skip=false
 Script
 	.get_objects skip=false
 
@@ -122,17 +96,11 @@ Texture
 	.new_from_file throws="Clutter.TextureError"
 
 // Skipped upstream for unknown reasons
-Alpha.register_func skip=false
-TimeoutPool skip=false
 Interval.register_progress_func skip=false
-frame_source_* skip=false
 get_option_group skip=false
 get_option_group_without_init skip=false
-threads_add_frame_source skip=false
-threads_add_frame_source_full skip=false
 threads_add_idle skip=false
 threads_add_idle_full skip=false
-threads_set_lock_functions skip=false
 threads_add_timeout skip=false
 threads_add_timeout_full skip=false
 
@@ -143,15 +111,12 @@ ActorBox
 Units.from_* skip
 Color
 	.new skip
-Vertex.new skip
 
 // Class methods
 container_class_find_child_property skip
 container_class_list_child_properties skip
 
 // Move symbols
-get_actor_by_gid parent="Clutter.Actor" name="get_by_gid"
-get_input_device_for_id parent="Clutter.InputDevice" name="get_for_id"
 units_from_* skip
 
 // Classes marked as out but not double ptr
@@ -202,23 +167,15 @@ PATH_RELATIVE skip=false
 PRIORITY_REDRAW skip=false
 
 // Clutter devs don't like us creating nested namespaces
-frame_source_* name="frame_source_(.+)" parent="Clutter.FrameSource"
 value_* name="value_(.+)" parent="Clutter.Value"
 threads_* name="threads_(.+)" parent="Clutter.Threads"
-threads_add_frame_source name="add" parent="Clutter.Threads.FrameSource"
-threads_add_frame_source_full name="add_full" parent="Clutter.Threads.FrameSource"
 threads_add_idle name="add" parent="Clutter.Threads.Idle"
 threads_add_idle_full name="add_full" parent="Clutter.Threads.Idle"
 threads_add_timeout name="add" parent="Clutter.Threads.Timeout"
 threads_add_timeout_full name="add_full" parent="Clutter.Threads.Timeout"
-util_next_p2 name="next_power_of_2" parent="Clutter.Util"
 
 // Backwards compatibility
 Color.alloc symbol_type="function"
-Point.alloc symbol_type="function"
-Rect.alloc symbol_type="function"
-Size.alloc symbol_type="function"
-Vertex.alloc symbol_type="function"
 
 BinAlignment deprecated=false deprecated_since=null
 BinAlignment.* deprecated
diff --git vapi/Cogl-4.metadata vapi/Cogl-6.metadata
similarity index 100%
rename from vapi/Cogl-4.metadata
rename to vapi/Cogl-6.metadata
diff --git vapi/Cogl-5.metadata vapi/Cogl-7.metadata
similarity index 91%
rename from vapi/Cogl-5.metadata
rename to vapi/Cogl-7.metadata
index 092b5e29..e52bfa35 100644
--- vapi/Cogl-5.metadata
+++ vapi/Cogl-7.metadata
@@ -9,12 +9,10 @@ create_shader skip
 
 
 is_bitmap skip
-is_material skip
 is_offscreen skip
 is_program skip
 is_shader skip
 is_texture skip
-is_vertex_buffer skip
 
 Matrix struct
   .get_array array=true array_length_idx=-1
diff --git vapi/Meta-3.metadata vapi/Meta-3.metadata
deleted file mode 100644
index 370d4996..00000000
--- vapi/Meta-3.metadata
+++ /dev/null
@@ -1,66 +0,0 @@
-Backend cheader_filename="meta/meta-backend.h"
-Background cheader_filename="meta/meta-background.h"
-BackgroundActor cheader_filename="meta/meta-background-actor.h"
-BackgroundGroup cheader_filename="meta/meta-background-group.h"
-BackgroundImageCache cheader_filename="meta/meta-background-image.h"
-Display cheader_filename="meta/display.h"
-Meta cheader_filename="meta/main.h"
-MonitorManager cheader_filename="meta/meta-monitor-manager.h"
-Rectangle struct
-Plugin cheader_filename="meta/meta-plugin.h"
-PluginInfo cheader_filename="meta/meta-plugin.h"
-prefs_* cheader_filename="meta/prefs.h" parent="Meta.Prefs"
-add_verbose_topic parent="Meta.Util" cheader_filename="meta/util.h"
-bug parent="Meta.Util" cheader_filename="meta/util.h"
-debug_spew_real parent="Meta.Util" cheader_filename="meta/util.h"
-empty_stage_input_region parent="Meta.Util" cheader_filename="meta/util.h"
-x11_error_trap_pop parent="Meta.Util" cheader_filename="meta/util.h"
-x11_error_trap_push parent="Meta.Util" cheader_filename="meta/util.h"
-x11_error_trap_pop_with_return parent="Meta.Util" cheader_filename="meta/util.h"
-external_binding_name_for_action parent="Meta.Util" cheader_filename="meta/util.h"
-free_gslist_and_elements parent="Meta.Util" cheader_filename="meta/util.h"
-g_utf8_strndup parent="Meta.Util" cheader_filename="meta/util.h"
-get_locale_direction parent="Meta.Util" cheader_filename="meta/util.h"
-get_overlay_window parent="Meta.Util" cheader_filename="meta/util.h"
-gravity_to_string parent="Meta.Util" cheader_filename="meta/util.h"
-is_debugging parent="Meta.Util" cheader_filename="meta/util.h"
-is_syncing parent="Meta.Util" cheader_filename="meta/util.h"
-is_verbose parent="Meta.Util" cheader_filename="meta/util.h"
-is_wayland_compositor parent="Meta.Util" cheader_filename="meta/util.h"
-later_add parent="Meta.Util" cheader_filename="meta/util.h"
-later_remove parent="Meta.Util" cheader_filename="meta/util.h"
-pop_no_msg_prefix parent="Meta.Util" cheader_filename="meta/util.h"
-push_no_msg_prefix parent="Meta.Util" cheader_filename="meta/util.h"
-rect parent="Meta.Util" cheader_filename="meta/util.h"
-remove_verbose_topic parent="Meta.Util" cheader_filename="meta/util.h"
-set_stage_input_region parent="Meta.Util" cheader_filename="meta/util.h"
-show_dialog parent="Meta.Util" cheader_filename="meta/util.h"
-topic_real parent="Meta.Util" cheader_filename="meta/util.h"
-unsigned_long_equal parent="Meta.Util" cheader_filename="meta/util.h"
-unsigned_long_hash parent="Meta.Util" cheader_filename="meta/util.h"
-verbose_real parent="Meta.Util" cheader_filename="meta/util.h"
-warning parent="Meta.Util" cheader_filename="meta/util.h"
-show_dialog parent="Meta.Util" cheader_filename="meta/util.h"
-get_stage_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-get_window_actors parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-get_window_group_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-get_top_window_group_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-get_feedback_group_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-disable_unredirect_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-enable_unredirect_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-set_stage_input_region parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-empty_stage_input_region parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-focus_stage_window parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-stage_is_focused parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-keybindings_set_custom_handler parent="Meta.KeyBinding" name="set_custom_handler"
-KeyHandlerFunc.event type="Clutter.KeyEvent?"
-get_backend parent="Meta.Backend"
-Window.focus#signal skip=true
-Window.get_xwindow skip=false
-get_option_context skip=false
-set_gnome_wm_keybindings skip=false
-set_wm_name skip=false
-init skip=false
-run skip=false
-show_dialog skip=false
-get_backend cheader_filename="meta/meta-backend.h"
diff --git vapi/Meta-5.metadata vapi/Meta-6.metadata
similarity index 100%
rename from vapi/Meta-5.metadata
rename to vapi/Meta-6.metadata
diff --git vapi/Meta-4.metadata vapi/Meta-7.metadata
similarity index 76%
rename from vapi/Meta-4.metadata
rename to vapi/Meta-7.metadata
index ae2a7817..72629fba 100644
--- vapi/Meta-4.metadata
+++ vapi/Meta-7.metadata
@@ -1,26 +1,21 @@
 Backend cheader_filename="meta/meta-backend.h"
 Background cheader_filename="meta/meta-background.h"
 BackgroundActor cheader_filename="meta/meta-background-actor.h"
+BackgroundContent cheader_filename="meta/meta-background-content.h"
 BackgroundGroup cheader_filename="meta/meta-background-group.h"
 BackgroundImage cheader_filename="meta/meta-background-image.h"
 BackgroundImageCache cheader_filename="meta/meta-background-image.h"
 Barrier cheader_filename="meta/barrier.h"
 BarrierEvent cheader_filename="meta/barrier.h"
-Boxes cheader_filename="meta/boxes.h"
 CloseDialog cheader_filename="meta/meta-close-dialog.h"
-Compositor cheader_filename="meta/compositor.h"
-CompositorMutter cheader_filename="meta/compositor-mutter.h"
 CursorTracker cheader_filename="meta/meta-cursor-tracker.h"
 Display cheader_filename="meta/display.h"
 Dnd cheader_filename="meta/meta-dnd.h"
-Group cheader_filename="meta/group.h"
 IdleMonitor cheader_filename="meta/meta-idle-monitor.h"
 InhibitShortcutsDialog cheader_filename="meta/meta-inhibit-shortcuts-dialog.h"
-Keybindings cheader_filename="meta/keybindings.h"
 LaunchContext cheader_filename="meta/meta-launch-context.h"
 Meta cheader_filename="meta/main.h"
 MonitorManager cheader_filename="meta/meta-monitor-manager.h"
-Plugin cheader_filename="meta/meta-plugin.h"
 Preference cheader_filename="meta/prefs.h"
 RemoteAccessController cheader_filename="meta/meta-remote-access-controller.h"
 RemoteAccessHandle cheader_filename="meta/meta-remote-access-controller.h"
@@ -31,9 +26,7 @@ SoundPlayer cheader_filename="meta/meta-sound-player.h"
 Stage cheader_filename="meta/meta-stage.h"
 StartupNotification cheader_filename="meta/meta-startup-notification.h"
 Theme cheader_filename="meta/theme.h"
-Types cheader_filename="meta/types.h"
-Util cheader_filename="meta/util.h"
-Version cheader_filename="meta/meta-version.h"
+WaylandClient cheader_filename="meta/meta-wayland-client.h"
 Window cheader_filename="meta/window.h"
 WindowActor cheader_filename="meta/meta-window-actor.h"
 WindowGroup cheader_filename="meta/meta-window-group.h"
@@ -46,17 +39,11 @@ Plugin cheader_filename="meta/meta-plugin.h"
 PluginInfo cheader_filename="meta/meta-plugin.h"
 prefs_* cheader_filename="meta/prefs.h" parent="Meta.Prefs"
 add_verbose_topic parent="Meta.Util" cheader_filename="meta/util.h"
-bug parent="Meta.Util" cheader_filename="meta/util.h"
-debug_spew_real parent="Meta.Util" cheader_filename="meta/util.h"
-empty_stage_input_region parent="Meta.Util" cheader_filename="meta/util.h"
 x11_error_trap_pop parent="Meta.Util" cheader_filename="meta/util.h"
 x11_error_trap_push parent="Meta.Util" cheader_filename="meta/util.h"
 x11_error_trap_pop_with_return parent="Meta.Util" cheader_filename="meta/util.h"
 external_binding_name_for_action parent="Meta.Util" cheader_filename="meta/util.h"
-free_gslist_and_elements parent="Meta.Util" cheader_filename="meta/util.h"
-g_utf8_strndup parent="Meta.Util" cheader_filename="meta/util.h"
 get_locale_direction parent="Meta.Util" cheader_filename="meta/util.h"
-get_overlay_window parent="Meta.Util" cheader_filename="meta/util.h"
 gravity_to_string parent="Meta.Util" cheader_filename="meta/util.h"
 is_debugging parent="Meta.Util" cheader_filename="meta/util.h"
 is_syncing parent="Meta.Util" cheader_filename="meta/util.h"
@@ -68,13 +55,8 @@ pop_no_msg_prefix parent="Meta.Util" cheader_filename="meta/util.h"
 push_no_msg_prefix parent="Meta.Util" cheader_filename="meta/util.h"
 rect parent="Meta.Util" cheader_filename="meta/util.h"
 remove_verbose_topic parent="Meta.Util" cheader_filename="meta/util.h"
-set_stage_input_region parent="Meta.Util" cheader_filename="meta/util.h"
-show_dialog parent="Meta.Util" cheader_filename="meta/util.h"
-topic_real parent="Meta.Util" cheader_filename="meta/util.h"
 unsigned_long_equal parent="Meta.Util" cheader_filename="meta/util.h"
 unsigned_long_hash parent="Meta.Util" cheader_filename="meta/util.h"
-verbose_real parent="Meta.Util" cheader_filename="meta/util.h"
-warning parent="Meta.Util" cheader_filename="meta/util.h"
 show_dialog parent="Meta.Util" cheader_filename="meta/util.h"
 get_stage_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
 get_window_actors parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
@@ -83,10 +65,7 @@ get_top_window_group_for_display parent="Meta.Compositor" cheader_filename="meta
 get_feedback_group_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
 disable_unredirect_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
 enable_unredirect_for_display parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-set_stage_input_region parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-empty_stage_input_region parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
 focus_stage_window parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
-stage_is_focused parent="Meta.Compositor" cheader_filename="meta/compositor-mutter.h"
 keybindings_set_custom_handler parent="Meta.KeyBinding" name="set_custom_handler"
 KeyHandlerFunc.event type="Clutter.KeyEvent?"
 get_backend parent="Meta.Backend"
diff --git vapi/generate-mutter-vapi.sh vapi/generate-mutter-vapi.sh
index 6b070240..b233e586 100755
--- vapi/generate-mutter-vapi.sh
+++ vapi/generate-mutter-vapi.sh
@@ -1,7 +1,7 @@
 #!/bin/bash
 set -xe
 
-version=${1-4}
+version=${6-7}
 girdir=$(pkg-config libmutter-$version --variable=girdir)
 
 cd $(dirname $0)
diff --git vapi/graphene-gobject-1.0.vapi vapi/graphene-gobject-1.0.vapi
new file mode 100644
index 00000000..69801535
--- /dev/null
+++ vapi/graphene-gobject-1.0.vapi
@@ -0,0 +1,691 @@
+/* graphene-gobject-1.0.vapi generated by vapigen, do not modify. */
+
+[CCode (cprefix = "Graphene", gir_namespace = "Graphene", gir_version = "1.0", lower_case_cprefix = "graphene_")]
+namespace Graphene {
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_box_t", type_id = "graphene_box_get_type ()")]
+	[Version (since = "1.2")]
+	public struct Box {
+		public bool contains_box (Graphene.Box b);
+		public bool contains_point (Graphene.Point3D point);
+		public static unowned Graphene.Box? empty ();
+		public bool equal (Graphene.Box b);
+		public Graphene.Box expand (Graphene.Point3D point);
+		public Graphene.Box expand_scalar (float scalar);
+		public Graphene.Box expand_vec3 (Graphene.Vec3 vec);
+		public Graphene.Sphere get_bounding_sphere ();
+		public Graphene.Point3D get_center ();
+		public float get_depth ();
+		public float get_height ();
+		public Graphene.Point3D get_max ();
+		public Graphene.Point3D get_min ();
+		public Graphene.Vec3 get_size ();
+		public void get_vertices ([CCode (array_length = false)] ref Graphene.Vec3 vertices[8]);
+		public float get_width ();
+		public static unowned Graphene.Box? infinite ();
+		public unowned Graphene.Box? init (Graphene.Point3D? min, Graphene.Point3D? max);
+		public unowned Graphene.Box? init_from_box (Graphene.Box src);
+		public unowned Graphene.Box? init_from_points ([CCode (array_length_cname = "n_points", array_length_pos = 0.5, array_length_type = "guint")] Graphene.Point3D[] points);
+		public unowned Graphene.Box? init_from_vec3 (Graphene.Vec3? min, Graphene.Vec3? max);
+		public unowned Graphene.Box? init_from_vectors ([CCode (array_length_cname = "n_vectors", array_length_pos = 0.5, array_length_type = "guint")] Graphene.Vec3[] vectors);
+		public bool intersection (Graphene.Box b, out Graphene.Box res);
+		public static unowned Graphene.Box? minus_one ();
+		public static unowned Graphene.Box? one ();
+		public static unowned Graphene.Box? one_minus_one ();
+		public Graphene.Box union (Graphene.Box b);
+		public static unowned Graphene.Box? zero ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_euler_t", type_id = "graphene_euler_get_type ()")]
+	[Version (since = "1.2")]
+	public struct Euler {
+		public bool equal (Graphene.Euler b);
+		[Version (since = "1.10")]
+		public float get_alpha ();
+		[Version (since = "1.10")]
+		public float get_beta ();
+		[Version (since = "1.10")]
+		public float get_gamma ();
+		public Graphene.EulerOrder get_order ();
+		public float get_x ();
+		public float get_y ();
+		public float get_z ();
+		public unowned Graphene.Euler? init (float x, float y, float z);
+		public unowned Graphene.Euler? init_from_euler (Graphene.Euler? src);
+		public unowned Graphene.Euler? init_from_matrix (Graphene.Matrix? m, Graphene.EulerOrder order);
+		public unowned Graphene.Euler? init_from_quaternion (Graphene.Quaternion? q, Graphene.EulerOrder order);
+		[Version (since = "1.10")]
+		public unowned Graphene.Euler? init_from_radians (float x, float y, float z, Graphene.EulerOrder order);
+		public unowned Graphene.Euler? init_from_vec3 (Graphene.Vec3? v, Graphene.EulerOrder order);
+		public unowned Graphene.Euler? init_with_order (float x, float y, float z, Graphene.EulerOrder order);
+		public Graphene.Euler reorder (Graphene.EulerOrder order);
+		public Graphene.Matrix to_matrix ();
+		[Version (since = "1.10")]
+		public Graphene.Quaternion to_quaternion ();
+		public Graphene.Vec3 to_vec3 ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_frustum_t", type_id = "graphene_frustum_get_type ()")]
+	[Version (since = "1.2")]
+	public struct Frustum {
+		public bool contains_point (Graphene.Point3D point);
+		[Version (since = "1.6")]
+		public bool equal (Graphene.Frustum b);
+		public void get_planes ([CCode (array_length = false)] ref Graphene.Plane planes[6]);
+		public unowned Graphene.Frustum? init (Graphene.Plane p0, Graphene.Plane p1, Graphene.Plane p2, Graphene.Plane p3, Graphene.Plane p4, Graphene.Plane p5);
+		public unowned Graphene.Frustum? init_from_frustum (Graphene.Frustum src);
+		public unowned Graphene.Frustum? init_from_matrix (Graphene.Matrix matrix);
+		public bool intersects_box (Graphene.Box box);
+		public bool intersects_sphere (Graphene.Sphere sphere);
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_matrix_t", type_id = "graphene_matrix_get_type ()")]
+	public struct Matrix {
+		public bool decompose (out Graphene.Vec3 translate, out Graphene.Vec3 scale, out Graphene.Quaternion rotate, out Graphene.Vec3 shear, out Graphene.Vec4 perspective);
+		[Version (since = "1.0")]
+		public float determinant ();
+		[Version (since = "1.10")]
+		public bool equal (Graphene.Matrix b);
+		[Version (since = "1.10")]
+		public bool equal_fast (Graphene.Matrix b);
+		[Version (since = "1.0")]
+		public Graphene.Vec4 get_row (uint index_);
+		[Version (since = "1.0")]
+		public float get_value (uint row, uint col);
+		[Version (since = "1.0")]
+		public float get_x_scale ();
+		[Version (since = "1.10")]
+		public float get_x_translation ();
+		[Version (since = "1.0")]
+		public float get_y_scale ();
+		[Version (since = "1.10")]
+		public float get_y_translation ();
+		[Version (since = "1.0")]
+		public float get_z_scale ();
+		[Version (since = "1.10")]
+		public float get_z_translation ();
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_from_2d (double xx, double yx, double xy, double yy, double x_0, double y_0);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_from_float ([CCode (array_length = false)] float v[16]);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_from_matrix (Graphene.Matrix src);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_from_vec4 (Graphene.Vec4 v0, Graphene.Vec4 v1, Graphene.Vec4 v2, Graphene.Vec4 v3);
+		[Version (since = "1.2")]
+		public unowned Graphene.Matrix? init_frustum (float left, float right, float bottom, float top, float z_near, float z_far);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_identity ();
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_look_at (Graphene.Vec3 eye, Graphene.Vec3 center, Graphene.Vec3 up);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_ortho (float left, float right, float top, float bottom, float z_near, float z_far);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_perspective (float fovy, float aspect, float z_near, float z_far);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_rotate (float angle, Graphene.Vec3 axis);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_scale (float x, float y, float z);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_skew (float x_skew, float y_skew);
+		[Version (since = "1.0")]
+		public unowned Graphene.Matrix? init_translate (Graphene.Point3D p);
+		[Version (since = "1.0")]
+		public Graphene.Matrix interpolate (Graphene.Matrix b, double factor);
+		[Version (since = "1.0")]
+		public bool inverse (out Graphene.Matrix res);
+		[Version (since = "1.0")]
+		public bool is_2d ();
+		[Version (since = "1.0")]
+		public bool is_backface_visible ();
+		[Version (since = "1.0")]
+		public bool is_identity ();
+		[Version (since = "1.0")]
+		public bool is_singular ();
+		[Version (since = "1.0")]
+		public Graphene.Matrix multiply (Graphene.Matrix b);
+		[Version (since = "1.10")]
+		public bool near (Graphene.Matrix b, float epsilon);
+		[Version (since = "1.0")]
+		public Graphene.Matrix normalize ();
+		[Version (since = "1.0")]
+		public Graphene.Matrix perspective (float depth);
+		[Version (since = "1.0")]
+		public void print ();
+		[Version (since = "1.0")]
+		public Graphene.Point project_point (Graphene.Point p);
+		[Version (since = "1.2")]
+		public Graphene.Quad project_rect (Graphene.Rect r);
+		[Version (since = "1.0")]
+		public Graphene.Rect project_rect_bounds (Graphene.Rect r);
+		[Version (since = "1.0")]
+		public void rotate (float angle, Graphene.Vec3 axis);
+		[Version (since = "1.2")]
+		public void rotate_euler (Graphene.Euler e);
+		[Version (since = "1.2")]
+		public void rotate_quaternion (Graphene.Quaternion q);
+		[Version (since = "1.0")]
+		public void rotate_x (float angle);
+		[Version (since = "1.0")]
+		public void rotate_y (float angle);
+		[Version (since = "1.0")]
+		public void rotate_z (float angle);
+		[Version (since = "1.0")]
+		public void scale (float factor_x, float factor_y, float factor_z);
+		[Version (since = "1.0")]
+		public void skew_xy (float factor);
+		[Version (since = "1.0")]
+		public void skew_xz (float factor);
+		[Version (since = "1.0")]
+		public void skew_yz (float factor);
+		[Version (since = "1.0")]
+		public bool to_2d (out double xx, out double yx, out double xy, out double yy, out double x_0, out double y_0);
+		[Version (since = "1.0")]
+		public void to_float ([CCode (array_length = false)] ref float v[16]);
+		[Version (since = "1.0")]
+		public Graphene.Rect transform_bounds (Graphene.Rect r);
+		[Version (since = "1.2")]
+		public Graphene.Box transform_box (Graphene.Box b);
+		[Version (since = "1.0")]
+		public Graphene.Point transform_point (Graphene.Point p);
+		[Version (since = "1.2")]
+		public Graphene.Point3D transform_point3d (Graphene.Point3D p);
+		[Version (since = "1.4")]
+		public Graphene.Ray transform_ray (Graphene.Ray r);
+		[Version (since = "1.0")]
+		public Graphene.Quad transform_rect (Graphene.Rect r);
+		[Version (since = "1.2")]
+		public Graphene.Sphere transform_sphere (Graphene.Sphere s);
+		[Version (since = "1.0")]
+		public Graphene.Vec3 transform_vec3 (Graphene.Vec3 v);
+		[Version (since = "1.0")]
+		public Graphene.Vec4 transform_vec4 (Graphene.Vec4 v);
+		[Version (since = "1.0")]
+		public void translate (Graphene.Point3D pos);
+		[Version (since = "1.0")]
+		public Graphene.Matrix transpose ();
+		[Version (since = "1.2")]
+		public Graphene.Point3D unproject_point3d (Graphene.Matrix modelview, Graphene.Point3D point);
+		[Version (since = "1.0")]
+		public Graphene.Rect untransform_bounds (Graphene.Rect r, Graphene.Rect bounds);
+		[Version (since = "1.0")]
+		public bool untransform_point (Graphene.Point p, Graphene.Rect bounds, out Graphene.Point res);
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_plane_t", type_id = "graphene_plane_get_type ()")]
+	[Version (since = "1.2")]
+	public struct Plane {
+		public float distance (Graphene.Point3D point);
+		public bool equal (Graphene.Plane b);
+		public float get_constant ();
+		public Graphene.Vec3 get_normal ();
+		public unowned Graphene.Plane? init (Graphene.Vec3? normal, float constant);
+		public unowned Graphene.Plane? init_from_plane (Graphene.Plane src);
+		public unowned Graphene.Plane? init_from_point (Graphene.Vec3 normal, Graphene.Point3D point);
+		public unowned Graphene.Plane? init_from_points (Graphene.Point3D a, Graphene.Point3D b, Graphene.Point3D c);
+		public unowned Graphene.Plane? init_from_vec4 (Graphene.Vec4 src);
+		public Graphene.Plane negate ();
+		public Graphene.Plane normalize ();
+		[Version (since = "1.10")]
+		public Graphene.Plane transform (Graphene.Matrix matrix, Graphene.Matrix? normal_matrix);
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_point_t", type_id = "graphene_point_get_type ()")]
+	[Version (since = "1.0")]
+	public struct Point {
+		public float x;
+		public float y;
+		public float distance (Graphene.Point b, out float d_x, out float d_y);
+		public bool equal (Graphene.Point b);
+		public unowned Graphene.Point? init (float x, float y);
+		public unowned Graphene.Point? init_from_point (Graphene.Point src);
+		[Version (since = "1.4")]
+		public unowned Graphene.Point? init_from_vec2 (Graphene.Vec2 src);
+		public Graphene.Point interpolate (Graphene.Point b, double factor);
+		public bool near (Graphene.Point b, float epsilon);
+		[Version (since = "1.4")]
+		public Graphene.Vec2 to_vec2 ();
+		public static unowned Graphene.Point? zero ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_point3d_t", lower_case_csuffix = "point3d", type_id = "graphene_point3d_get_type ()")]
+	[Version (since = "1.0")]
+	public struct Point3D {
+		public float x;
+		public float y;
+		public float z;
+		public Graphene.Point3D cross (Graphene.Point3D b);
+		[Version (since = "1.4")]
+		public float distance (Graphene.Point3D b, out Graphene.Vec3 delta);
+		public float dot (Graphene.Point3D b);
+		public bool equal (Graphene.Point3D b);
+		public unowned Graphene.Point3D? init (float x, float y, float z);
+		public unowned Graphene.Point3D? init_from_point (Graphene.Point3D src);
+		public unowned Graphene.Point3D? init_from_vec3 (Graphene.Vec3 v);
+		public Graphene.Point3D interpolate (Graphene.Point3D b, double factor);
+		public float length ();
+		public bool near (Graphene.Point3D b, float epsilon);
+		public Graphene.Point3D normalize ();
+		[Version (since = "1.4")]
+		public Graphene.Point3D normalize_viewport (Graphene.Rect viewport, float z_near, float z_far);
+		public Graphene.Point3D scale (float factor);
+		public Graphene.Vec3 to_vec3 ();
+		public static unowned Graphene.Point3D? zero ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_quad_t", type_id = "graphene_quad_get_type ()")]
+	[Version (since = "1.0")]
+	public struct Quad {
+		public Graphene.Rect bounds ();
+		public bool contains (Graphene.Point p);
+		public unowned Graphene.Point? get_point (uint index_);
+		public unowned Graphene.Quad? init (Graphene.Point p1, Graphene.Point p2, Graphene.Point p3, Graphene.Point p4);
+		[Version (since = "1.2")]
+		public unowned Graphene.Quad? init_from_points ([CCode (array_length = false)] Graphene.Point points[4]);
+		public unowned Graphene.Quad? init_from_rect (Graphene.Rect r);
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_quaternion_t", type_id = "graphene_quaternion_get_type ()")]
+	[Version (since = "1.0")]
+	public struct Quaternion {
+		[Version (since = "1.10")]
+		public Graphene.Quaternion add (Graphene.Quaternion b);
+		public float dot (Graphene.Quaternion b);
+		public bool equal (Graphene.Quaternion b);
+		public unowned Graphene.Quaternion? init (float x, float y, float z, float w);
+		public unowned Graphene.Quaternion? init_from_angle_vec3 (float angle, Graphene.Vec3 axis);
+		public unowned Graphene.Quaternion? init_from_angles (float deg_x, float deg_y, float deg_z);
+		[Version (since = "1.2")]
+		public unowned Graphene.Quaternion? init_from_euler (Graphene.Euler e);
+		public unowned Graphene.Quaternion? init_from_matrix (Graphene.Matrix m);
+		public unowned Graphene.Quaternion? init_from_quaternion (Graphene.Quaternion src);
+		public unowned Graphene.Quaternion? init_from_radians (float rad_x, float rad_y, float rad_z);
+		public unowned Graphene.Quaternion? init_from_vec4 (Graphene.Vec4 src);
+		public unowned Graphene.Quaternion? init_identity ();
+		public Graphene.Quaternion invert ();
+		[Version (since = "1.10")]
+		public Graphene.Quaternion multiply (Graphene.Quaternion b);
+		public Graphene.Quaternion normalize ();
+		[Version (since = "1.10")]
+		public Graphene.Quaternion scale (float factor);
+		public Graphene.Quaternion slerp (Graphene.Quaternion b, float factor);
+		public void to_angle_vec3 (out float angle, out Graphene.Vec3 axis);
+		[Version (since = "1.2")]
+		public void to_angles (out float deg_x, out float deg_y, out float deg_z);
+		public Graphene.Matrix to_matrix ();
+		[Version (since = "1.2")]
+		public void to_radians (out float rad_x, out float rad_y, out float rad_z);
+		public Graphene.Vec4 to_vec4 ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_ray_t", type_id = "graphene_ray_get_type ()")]
+	[Version (since = "1.4")]
+	public struct Ray {
+		public bool equal (Graphene.Ray b);
+		public Graphene.Point3D get_closest_point_to_point (Graphene.Point3D p);
+		public Graphene.Vec3 get_direction ();
+		public float get_distance_to_plane (Graphene.Plane p);
+		public float get_distance_to_point (Graphene.Point3D p);
+		public Graphene.Point3D get_origin ();
+		public Graphene.Point3D get_position_at (float t);
+		public unowned Graphene.Ray? init (Graphene.Point3D? origin, Graphene.Vec3? direction);
+		public unowned Graphene.Ray? init_from_ray (Graphene.Ray src);
+		public unowned Graphene.Ray? init_from_vec3 (Graphene.Vec3? origin, Graphene.Vec3? direction);
+		[Version (since = "1.10")]
+		public Graphene.RayIntersectionKind intersect_box (Graphene.Box b, out float t_out);
+		[Version (since = "1.10")]
+		public Graphene.RayIntersectionKind intersect_sphere (Graphene.Sphere s, out float t_out);
+		[Version (since = "1.10")]
+		public Graphene.RayIntersectionKind intersect_triangle (Graphene.Triangle t, out float t_out);
+		[Version (since = "1.10")]
+		public bool intersects_box (Graphene.Box b);
+		[Version (since = "1.10")]
+		public bool intersects_sphere (Graphene.Sphere s);
+		[Version (since = "1.10")]
+		public bool intersects_triangle (Graphene.Triangle t);
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_rect_t", type_id = "graphene_rect_get_type ()")]
+	[Version (since = "1.0")]
+	public struct Rect {
+		public Graphene.Point origin;
+		public Graphene.Size size;
+		public static Graphene.Rect? alloc ();
+		public bool contains_point (Graphene.Point p);
+		public bool contains_rect (Graphene.Rect b);
+		public bool equal (Graphene.Rect b);
+		[Version (since = "1.4")]
+		public Graphene.Rect expand (Graphene.Point p);
+		[Version (since = "1.10")]
+		public float get_area ();
+		public Graphene.Point get_bottom_left ();
+		public Graphene.Point get_bottom_right ();
+		public Graphene.Point get_center ();
+		public float get_height ();
+		public Graphene.Point get_top_left ();
+		public Graphene.Point get_top_right ();
+		[Version (since = "1.4")]
+		public void get_vertices ([CCode (array_length = false)] ref Graphene.Vec2 vertices[4]);
+		public float get_width ();
+		public float get_x ();
+		public float get_y ();
+		public unowned Graphene.Rect? init (float x, float y, float width, float height);
+		public unowned Graphene.Rect? init_from_rect (Graphene.Rect src);
+		public unowned Graphene.Rect? inset (float d_x, float d_y);
+		[Version (since = "1.4")]
+		public Graphene.Rect inset_r (float d_x, float d_y);
+		public Graphene.Rect interpolate (Graphene.Rect b, double factor);
+		public bool intersection (Graphene.Rect b, out Graphene.Rect res);
+		public unowned Graphene.Rect? normalize ();
+		[Version (since = "1.4")]
+		public Graphene.Rect normalize_r ();
+		public unowned Graphene.Rect? offset (float d_x, float d_y);
+		[Version (since = "1.4")]
+		public Graphene.Rect offset_r (float d_x, float d_y);
+		[Version (deprecated = true, deprecated_since = "1.10", since = "1.4")]
+		public Graphene.Rect round ();
+		[Version (since = "1.10")]
+		public Graphene.Rect round_extents ();
+		[Version (deprecated = true, deprecated_since = "1.4", since = "1.0")]
+		public unowned Graphene.Rect? round_to_pixel ();
+		[Version (since = "1.10")]
+		public Graphene.Rect scale (float s_h, float s_v);
+		public Graphene.Rect union (Graphene.Rect b);
+		[Version (since = "1.4")]
+		public static unowned Graphene.Rect? zero ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_simd4f_t", has_type_id = false)]
+	public struct Simd4F {
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_simd4x4f_t", has_type_id = false)]
+	public struct Simd4X4F {
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_size_t", type_id = "graphene_size_get_type ()")]
+	[Version (since = "1.0")]
+	public struct Size {
+		public float width;
+		public float height;
+		public bool equal (Graphene.Size b);
+		public unowned Graphene.Size? init (float width, float height);
+		public unowned Graphene.Size? init_from_size (Graphene.Size src);
+		public Graphene.Size interpolate (Graphene.Size b, double factor);
+		public Graphene.Size scale (float factor);
+		public static unowned Graphene.Size? zero ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_sphere_t", type_id = "graphene_sphere_get_type ()")]
+	[Version (since = "1.2")]
+	public struct Sphere {
+		public bool contains_point (Graphene.Point3D point);
+		public float distance (Graphene.Point3D point);
+		public bool equal (Graphene.Sphere b);
+		public Graphene.Box get_bounding_box ();
+		public Graphene.Point3D get_center ();
+		public float get_radius ();
+		public unowned Graphene.Sphere? init (Graphene.Point3D? center, float radius);
+		public unowned Graphene.Sphere? init_from_points ([CCode (array_length_cname = "n_points", array_length_pos = 0.5, array_length_type = "guint")] Graphene.Point3D[] points, Graphene.Point3D? center);
+		public unowned Graphene.Sphere? init_from_vectors ([CCode (array_length_cname = "n_vectors", array_length_pos = 0.5, array_length_type = "guint")] Graphene.Vec3[] vectors, Graphene.Point3D? center);
+		public bool is_empty ();
+		public Graphene.Sphere translate (Graphene.Point3D point);
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_triangle_t", type_id = "graphene_triangle_get_type ()")]
+	[Version (since = "1.2")]
+	public struct Triangle {
+		public bool contains_point (Graphene.Point3D p);
+		public bool equal (Graphene.Triangle b);
+		public float get_area ();
+		public bool get_barycoords (Graphene.Point3D? p, out Graphene.Vec2 res);
+		public Graphene.Box get_bounding_box ();
+		public Graphene.Point3D get_midpoint ();
+		public Graphene.Vec3 get_normal ();
+		public Graphene.Plane get_plane ();
+		public void get_points (out Graphene.Point3D a, out Graphene.Point3D b, out Graphene.Point3D c);
+		[Version (since = "1.10")]
+		public bool get_uv (Graphene.Point3D? p, Graphene.Vec2 uv_a, Graphene.Vec2 uv_b, Graphene.Vec2 uv_c, out Graphene.Vec2 res);
+		public void get_vertices (out Graphene.Vec3 a, out Graphene.Vec3 b, out Graphene.Vec3 c);
+		[Version (since = "1.10")]
+		public unowned Graphene.Triangle? init_from_float ([CCode (array_length = false)] float a[3], [CCode (array_length = false)] float b[3], [CCode (array_length = false)] float c[3]);
+		public unowned Graphene.Triangle? init_from_point3d (Graphene.Point3D? a, Graphene.Point3D? b, Graphene.Point3D? c);
+		public unowned Graphene.Triangle? init_from_vec3 (Graphene.Vec3? a, Graphene.Vec3? b, Graphene.Vec3? c);
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_vec2_t", type_id = "graphene_vec2_get_type ()")]
+	public struct Vec2 {
+		[Version (since = "1.0")]
+		public Graphene.Vec2 add (Graphene.Vec2 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec2 divide (Graphene.Vec2 b);
+		[Version (since = "1.0")]
+		public float dot (Graphene.Vec2 b);
+		[Version (since = "1.2")]
+		public bool equal (Graphene.Vec2 v2);
+		[Version (since = "1.0")]
+		public float get_x ();
+		[Version (since = "1.0")]
+		public float get_y ();
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec2? init (float x, float y);
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec2? init_from_float ([CCode (array_length = false)] float src[2]);
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec2? init_from_vec2 (Graphene.Vec2 src);
+		[Version (since = "1.10")]
+		public Graphene.Vec2 interpolate (Graphene.Vec2 v2, double factor);
+		[Version (since = "1.0")]
+		public float length ();
+		[Version (since = "1.0")]
+		public Graphene.Vec2 max (Graphene.Vec2 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec2 min (Graphene.Vec2 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec2 multiply (Graphene.Vec2 b);
+		[Version (since = "1.2")]
+		public bool near (Graphene.Vec2 v2, float epsilon);
+		[Version (since = "1.2")]
+		public Graphene.Vec2 negate ();
+		[Version (since = "1.0")]
+		public Graphene.Vec2 normalize ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec2? one ();
+		[Version (since = "1.2")]
+		public Graphene.Vec2 scale (float factor);
+		[Version (since = "1.0")]
+		public Graphene.Vec2 subtract (Graphene.Vec2 b);
+		[Version (since = "1.0")]
+		public void to_float ([CCode (array_length = false)] ref float dest[2]);
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec2? x_axis ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec2? y_axis ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec2? zero ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_vec3_t", type_id = "graphene_vec3_get_type ()")]
+	public struct Vec3 {
+		[Version (since = "1.0")]
+		public Graphene.Vec3 add (Graphene.Vec3 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec3 cross (Graphene.Vec3 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec3 divide (Graphene.Vec3 b);
+		[Version (since = "1.0")]
+		public float dot (Graphene.Vec3 b);
+		[Version (since = "1.2")]
+		public bool equal (Graphene.Vec3 v2);
+		[Version (since = "1.0")]
+		public float get_x ();
+		[Version (since = "1.0")]
+		public Graphene.Vec2 get_xy ();
+		[Version (since = "1.0")]
+		public Graphene.Vec3 get_xy0 ();
+		[Version (since = "1.0")]
+		public Graphene.Vec4 get_xyz0 ();
+		[Version (since = "1.0")]
+		public Graphene.Vec4 get_xyz1 ();
+		[Version (since = "1.0")]
+		public Graphene.Vec4 get_xyzw (float w);
+		[Version (since = "1.0")]
+		public float get_y ();
+		[Version (since = "1.0")]
+		public float get_z ();
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec3? init (float x, float y, float z);
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec3? init_from_float ([CCode (array_length = false)] float src[3]);
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec3? init_from_vec3 (Graphene.Vec3 src);
+		[Version (since = "1.10")]
+		public Graphene.Vec3 interpolate (Graphene.Vec3 v2, double factor);
+		[Version (since = "1.0")]
+		public float length ();
+		[Version (since = "1.0")]
+		public Graphene.Vec3 max (Graphene.Vec3 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec3 min (Graphene.Vec3 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec3 multiply (Graphene.Vec3 b);
+		[Version (since = "1.2")]
+		public bool near (Graphene.Vec3 v2, float epsilon);
+		[Version (since = "1.2")]
+		public Graphene.Vec3 negate ();
+		[Version (since = "1.0")]
+		public Graphene.Vec3 normalize ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec3? one ();
+		[Version (since = "1.2")]
+		public Graphene.Vec3 scale (float factor);
+		[Version (since = "1.0")]
+		public Graphene.Vec3 subtract (Graphene.Vec3 b);
+		[Version (since = "1.0")]
+		public void to_float ([CCode (array_length = false)] ref float dest[3]);
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec3? x_axis ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec3? y_axis ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec3? z_axis ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec3? zero ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_vec4_t", type_id = "graphene_vec4_get_type ()")]
+	public struct Vec4 {
+		[Version (since = "1.0")]
+		public Graphene.Vec4 add (Graphene.Vec4 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec4 divide (Graphene.Vec4 b);
+		[Version (since = "1.0")]
+		public float dot (Graphene.Vec4 b);
+		[Version (since = "1.2")]
+		public bool equal (Graphene.Vec4 v2);
+		[Version (since = "1.0")]
+		public float get_w ();
+		[Version (since = "1.0")]
+		public float get_x ();
+		[Version (since = "1.0")]
+		public Graphene.Vec2 get_xy ();
+		[Version (since = "1.0")]
+		public Graphene.Vec3 get_xyz ();
+		[Version (since = "1.0")]
+		public float get_y ();
+		[Version (since = "1.0")]
+		public float get_z ();
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec4? init (float x, float y, float z, float w);
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec4? init_from_float ([CCode (array_length = false)] float src[4]);
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec4? init_from_vec2 (Graphene.Vec2 src, float z, float w);
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec4? init_from_vec3 (Graphene.Vec3 src, float w);
+		[Version (since = "1.0")]
+		public unowned Graphene.Vec4? init_from_vec4 (Graphene.Vec4 src);
+		[Version (since = "1.10")]
+		public Graphene.Vec4 interpolate (Graphene.Vec4 v2, double factor);
+		[Version (since = "1.0")]
+		public float length ();
+		[Version (since = "1.0")]
+		public Graphene.Vec4 max (Graphene.Vec4 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec4 min (Graphene.Vec4 b);
+		[Version (since = "1.0")]
+		public Graphene.Vec4 multiply (Graphene.Vec4 b);
+		[Version (since = "1.2")]
+		public bool near (Graphene.Vec4 v2, float epsilon);
+		[Version (since = "1.2")]
+		public Graphene.Vec4 negate ();
+		[Version (since = "1.0")]
+		public Graphene.Vec4 normalize ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec4? one ();
+		[Version (since = "1.2")]
+		public Graphene.Vec4 scale (float factor);
+		[Version (since = "1.0")]
+		public Graphene.Vec4 subtract (Graphene.Vec4 b);
+		[Version (since = "1.0")]
+		public void to_float ([CCode (array_length = false)] ref float dest[4]);
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec4? w_axis ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec4? x_axis ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec4? y_axis ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec4? z_axis ();
+		[Version (since = "1.0")]
+		public static unowned Graphene.Vec4? zero ();
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_euler_order_t", cprefix = "GRAPHENE_EULER_ORDER_", has_type_id = false)]
+	[Version (since = "1.2")]
+	public enum EulerOrder {
+		DEFAULT,
+		XYZ,
+		YZX,
+		ZXY,
+		XZY,
+		YXZ,
+		ZYX,
+		SXYZ,
+		SXYX,
+		SXZY,
+		SXZX,
+		SYZX,
+		SYZY,
+		SYXZ,
+		SYXY,
+		SZXY,
+		SZXZ,
+		SZYX,
+		SZYZ,
+		RZYX,
+		RXYX,
+		RYZX,
+		RXZX,
+		RXZY,
+		RYZY,
+		RZXY,
+		RYXY,
+		RYXZ,
+		RZXZ,
+		RXYZ,
+		RZYZ
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "graphene_ray_intersection_kind_t", cprefix = "GRAPHENE_RAY_INTERSECTION_KIND_", has_type_id = false)]
+	[Version (since = "1.10")]
+	public enum RayIntersectionKind {
+		NONE,
+		ENTER,
+		LEAVE
+	}
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "GRAPHENE_HAS_GCC")]
+	public const int HAS_GCC;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "GRAPHENE_HAS_SCALAR")]
+	public const int HAS_SCALAR;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "GRAPHENE_HAS_SSE")]
+	public const int HAS_SSE;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "GRAPHENE_PI")]
+	public const double PI;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "GRAPHENE_PI_2")]
+	public const double PI_2;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "GRAPHENE_SIMD_S")]
+	public const string SIMD_S;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "GRAPHENE_VEC2_LEN")]
+	[Version (since = "1.0")]
+	public const int VEC2_LEN;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "GRAPHENE_VEC3_LEN")]
+	[Version (since = "1.0")]
+	public const int VEC3_LEN;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "GRAPHENE_VEC4_LEN")]
+	[Version (since = "1.0")]
+	public const int VEC4_LEN;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "false")]
+	public const int @false;
+	[CCode (cheader_filename = "graphene-gobject.h", cname = "true")]
+	public const int @true;
+}
diff --git vapi/libmutter-2.deps vapi/libmutter-2.deps
deleted file mode 100644
index 1f3c9079..00000000
--- vapi/libmutter-2.deps
+++ /dev/null
@@ -1,9 +0,0 @@
-cairo
-gsettings-desktop-schemas
-gdk-3.0
-gdk-pixbuf-2.0
-gtk+-3.0
-x11
-xfixes-4.0
-clutter-1.0
-cogl-1.0
diff --git vapi/libmutter-2.vapi vapi/libmutter-2.vapi
deleted file mode 100644
index 0a6c4357..00000000
--- vapi/libmutter-2.vapi
+++ /dev/null
@@ -1,1325 +0,0 @@
-/* libmutter.vapi generated by vapigen, do not modify. */
-
-[CCode (cprefix = "Meta", gir_namespace = "Meta", gir_version = "3.0", lower_case_cprefix = "meta_")]
-namespace Meta {
-	namespace Prefs {
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static void add_listener (Meta.PrefsChangedFunc func);
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool bell_is_audible ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static void change_workspace_name (int i, string name);
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static GDesktop.TitlebarAction get_action_double_click_titlebar ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static GDesktop.TitlebarAction get_action_middle_click_titlebar ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static GDesktop.TitlebarAction get_action_right_click_titlebar ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_attach_modal_dialogs ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_auto_maximize ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_auto_raise ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static int get_auto_raise_delay ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static Meta.ButtonLayout get_button_layout ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_center_new_windows ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_compositing_manager ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static int get_cursor_size ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static unowned string get_cursor_theme ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_disable_workarounds ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static int get_drag_threshold ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static int get_draggable_border_width ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_dynamic_workspaces ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_edge_tiling ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_focus_change_on_pointer_rest ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static GDesktop.FocusMode get_focus_mode ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static GDesktop.FocusNewWindows get_focus_new_windows ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_force_fullscreen ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_gnome_accessibility ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_gnome_animations ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_ignore_request_hide_titlebar ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static Meta.KeyBindingAction get_keybinding_action (string name);
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static int get_mouse_button_menu ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static Meta.VirtualModifier get_mouse_button_mods ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static int get_mouse_button_resize ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static int get_num_workspaces ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_raise_on_click ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_show_fallback_app_menu ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static unowned Pango.FontDescription get_titlebar_font ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_visual_bell ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static GDesktop.VisualBellType get_visual_bell_type ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static unowned string get_workspace_name (int i);
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static bool get_workspaces_only_on_primary ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static void init ();
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static void override_preference_schema (string key, string schema);
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static void remove_listener (Meta.PrefsChangedFunc func);
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static void set_force_fullscreen (bool whether);
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static void set_ignore_request_hide_titlebar (bool whether);
-		[CCode (cheader_filename = "meta/prefs.h")]
-		public static void set_num_workspaces (int n_workspaces);
-	}
-	namespace Util {
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_add_verbose_topic")]
-		public static void add_verbose_topic (Meta.DebugTopic topic);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_bug")]
-		public static void bug (string format, ...);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_debug_spew_real")]
-		public static void debug_spew_real (string format, ...);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_disable_unredirect_for_screen")]
-		public static void disable_unredirect_for_screen (Meta.Screen screen);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_empty_stage_input_region")]
-		public static void empty_stage_input_region (Meta.Screen screen);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_enable_unredirect_for_screen")]
-		public static void enable_unredirect_for_screen (Meta.Screen screen);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_error_trap_pop")]
-		public static void error_trap_pop (Meta.Display display);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_error_trap_push")]
-		public static void error_trap_push (Meta.Display display);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_error_trap_push_with_return")]
-		public static void error_trap_push_with_return (Meta.Display display);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_external_binding_name_for_action")]
-		public static string external_binding_name_for_action (uint keybinding_action);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_fatal")]
-		public static void fatal (string format, ...);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_free_gslist_and_elements")]
-		public static void free_gslist_and_elements (GLib.SList<void*> list_to_deep_free);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_g_utf8_strndup")]
-		public static string g_utf8_strndup (string src, size_t n);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_get_locale_direction")]
-		public static Meta.LocaleDirection get_locale_direction ();
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_get_overlay_window")]
-		public static X.Window get_overlay_window (Meta.Screen screen);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_gravity_to_string")]
-		public static unowned string gravity_to_string (int gravity);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_is_debugging")]
-		public static bool is_debugging ();
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_is_syncing")]
-		public static bool is_syncing ();
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_is_verbose")]
-		public static bool is_verbose ();
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_is_wayland_compositor")]
-		public static bool is_wayland_compositor ();
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_later_add")]
-		public static uint later_add (Meta.LaterType when, owned GLib.SourceFunc func);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_later_remove")]
-		public static void later_remove (uint later_id);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_pop_no_msg_prefix")]
-		public static void pop_no_msg_prefix ();
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_push_no_msg_prefix")]
-		public static void push_no_msg_prefix ();
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_rect")]
-		public static Meta.Rectangle? rect (int x, int y, int width, int height);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_remove_verbose_topic")]
-		public static void remove_verbose_topic (Meta.DebugTopic topic);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_set_stage_input_region")]
-		public static void set_stage_input_region (Meta.Screen screen, X.XserverRegion region);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_show_dialog")]
-		public static GLib.Pid show_dialog (string type, string message, string? timeout = null, string? display = null, string? ok_text = null, string? cancel_text = null, string? icon_name = null, int transient_for = 0, GLib.SList<string>? columns = null, GLib.SList<string>? entries = null);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_topic_real")]
-		public static void topic_real (Meta.DebugTopic topic, string format, ...);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_unsigned_long_equal")]
-		public static int unsigned_long_equal (void* v1, void* v2);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_unsigned_long_hash")]
-		public static uint unsigned_long_hash (void* v);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_verbose_real")]
-		public static void verbose_real (string format, ...);
-		[CCode (cheader_filename = "meta/main.h", cname = "meta_warning")]
-		public static void warning (string format, ...);
-	}
-	[CCode (cheader_filename = "meta/main.h", type_id = "meta_backend_get_type ()")]
-	public abstract class Backend : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Backend ();
-		[CCode (cheader_filename = "meta/meta-backend.h", cname = "meta_get_backend")]
-		public static unowned Meta.Backend get_backend ();
-		public unowned Clutter.Actor get_stage ();
-		public void lock_layout_group (uint idx);
-		public void set_keymap (string layouts, string variants, string options);
-		public signal void keymap_changed ();
-		public signal void keymap_layout_group_changed (uint object);
-		public signal void last_device_changed (int object);
-	}
-	[CCode (cheader_filename = "meta/meta-background.h", type_id = "meta_background_get_type ()")]
-	public class Background : GLib.Object {
-		[CCode (has_construct_function = false)]
-		public Background (Meta.Screen screen);
-		public static void refresh_all ();
-		public void set_blend (GLib.File file1, GLib.File file2, double blend_factor, GDesktop.BackgroundStyle style);
-		public void set_color (Clutter.Color color);
-		public void set_file (GLib.File file, GDesktop.BackgroundStyle style);
-		public void set_gradient (GDesktop.BackgroundShading shading_direction, Clutter.Color color, Clutter.Color second_color);
-		[NoAccessorMethod]
-		public Meta.Screen meta_screen { owned get; construct; }
-		public signal void changed ();
-	}
-	[CCode (cheader_filename = "meta/meta-background-actor.h", type_id = "meta_background_actor_get_type ()")]
-	public class BackgroundActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		public BackgroundActor (Meta.Screen screen, int monitor);
-		public void set_background (Meta.Background background);
-		public void set_vignette (bool enabled, double brightness, double sharpness);
-		[NoAccessorMethod]
-		public Meta.Background background { owned get; set; }
-		[NoAccessorMethod]
-		public double brightness { get; set; }
-		[NoAccessorMethod]
-		public Meta.Screen meta_screen { owned get; construct; }
-		[NoAccessorMethod]
-		public int monitor { get; construct; }
-		[NoAccessorMethod]
-		public bool vignette { get; set; }
-		[NoAccessorMethod]
-		public double vignette_sharpness { get; set; }
-	}
-	[CCode (cheader_filename = "meta/meta-background-group.h", type_id = "meta_background_group_get_type ()")]
-	public class BackgroundGroup : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		public BackgroundGroup ();
-	}
-	[CCode (cheader_filename = "meta/meta-background-image.h", type_id = "meta_background_image_get_type ()")]
-	public class BackgroundImage : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected BackgroundImage ();
-		public bool get_success ();
-		public unowned Cogl.Texture get_texture ();
-		public bool is_loaded ();
-		public signal void loaded ();
-	}
-	[CCode (cheader_filename = "meta/meta-background-image.h", type_id = "meta_background_image_cache_get_type ()")]
-	public class BackgroundImageCache : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected BackgroundImageCache ();
-		public static unowned Meta.BackgroundImageCache get_default ();
-		public Meta.BackgroundImage load (GLib.File file);
-		public void purge (GLib.File file);
-	}
-	[CCode (cheader_filename = "meta/barrier.h", type_id = "meta_barrier_get_type ()")]
-	public class Barrier : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Barrier ();
-		public void destroy ();
-		public bool is_active ();
-		public void release (Meta.BarrierEvent event);
-		[NoAccessorMethod]
-		public Meta.BarrierDirection directions { get; construct; }
-		[NoAccessorMethod]
-		public Meta.Display display { owned get; construct; }
-		[NoAccessorMethod]
-		public int x1 { get; construct; }
-		[NoAccessorMethod]
-		public int x2 { get; construct; }
-		[NoAccessorMethod]
-		public int y1 { get; construct; }
-		[NoAccessorMethod]
-		public int y2 { get; construct; }
-		public signal void hit (Meta.BarrierEvent event);
-		public signal void left (Meta.BarrierEvent event);
-	}
-	[CCode (cheader_filename = "meta/main.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "meta_barrier_event_get_type ()")]
-	[Compact]
-	public class BarrierEvent {
-		public int dt;
-		public double dx;
-		public double dy;
-		public int event_id;
-		public bool grabbed;
-		public bool released;
-		public uint32 time;
-		public double x;
-		public double y;
-	}
-	[CCode (cheader_filename = "meta/compositor.h")]
-	[Compact]
-	public class Compositor {
-		public void add_window (Meta.Window window);
-		public void destroy ();
-		public bool filter_keybinding (Meta.KeyBinding binding);
-		public void flash_screen (Meta.Screen screen);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_focus_stage_window")]
-		public static void focus_stage_window (Meta.Screen screen, uint32 timestamp);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_feedback_group_for_screen")]
-		public static unowned Clutter.Actor get_feedback_group_for_screen (Meta.Screen screen);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_stage_for_screen")]
-		public static unowned Clutter.Actor? get_stage_for_screen (Meta.Screen screen);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_top_window_group_for_screen")]
-		public static unowned Clutter.Actor? get_top_window_group_for_screen (Meta.Screen screen);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_window_actors")]
-		public static unowned GLib.List<weak Meta.WindowActor>? get_window_actors (Meta.Screen screen);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_window_group_for_screen")]
-		public static unowned Clutter.Actor? get_window_group_for_screen (Meta.Screen screen);
-		public void hide_tile_preview ();
-		public void hide_window (Meta.Window window, Meta.CompEffect effect);
-		public void manage ();
-		[CCode (cheader_filename = "meta/main.h")]
-		public static unowned Meta.Compositor @new (Meta.Display display);
-		public void queue_frame_drawn (Meta.Window window, bool no_delay_frame);
-		public void remove_window (Meta.Window window);
-		public void show_tile_preview (Meta.Window window, Meta.Rectangle tile_rect, int tile_monitor_number);
-		public void show_window (Meta.Window window, Meta.CompEffect effect);
-		public void show_window_menu (Meta.Window window, Meta.WindowMenuType menu, int x, int y);
-		public void show_window_menu_for_rect (Meta.Window window, Meta.WindowMenuType menu, Meta.Rectangle rect);
-		public void size_change_window (Meta.Window window, Meta.SizeChange which_change, Meta.Rectangle old_frame_rect, Meta.Rectangle old_buffer_rect);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_stage_is_focused")]
-		public static bool stage_is_focused (Meta.Screen screen);
-		public void switch_workspace (Meta.Workspace from, Meta.Workspace to, Meta.MotionDirection direction);
-		public void sync_stack (GLib.List<Meta.WindowActor> stack);
-		public void sync_updates_frozen (Meta.Window window);
-		public void sync_window_geometry (Meta.Window window, bool did_placement);
-		public void unmanage ();
-		public void window_opacity_changed (Meta.Window window);
-		public void window_shape_changed (Meta.Window window);
-		public void window_surface_changed (Meta.Window window);
-	}
-	[CCode (cheader_filename = "meta/meta-cursor-tracker.h", type_id = "meta_cursor_tracker_get_type ()")]
-	public class CursorTracker : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected CursorTracker ();
-		public static unowned Meta.CursorTracker get_for_screen (Meta.Screen screen);
-		public void get_hot (out int x, out int y);
-		public void get_pointer (int x, int y, Clutter.ModifierType mods);
-		public unowned Cogl.Texture get_sprite ();
-		public void set_pointer_visible (bool visible);
-		public signal void cursor_changed ();
-	}
-	[CCode (cheader_filename = "meta/display.h", type_id = "meta_display_get_type ()")]
-	public class Display : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Display ();
-		public void add_ignored_crossing_serial (ulong serial);
-		public uint add_keybinding (string name, GLib.Settings settings, Meta.KeyBindingFlags flags, owned Meta.KeyHandlerFunc handler);
-		public bool begin_grab_op (Meta.Screen screen, Meta.Window window, Meta.GrabOp op, bool pointer_already_grabbed, bool frame_action, int button, ulong modmask, uint32 timestamp, int root_x, int root_y);
-		public void clear_mouse_mode ();
-		public void end_grab_op (uint32 timestamp);
-		public void focus_the_no_focus_window (Meta.Screen screen, uint32 timestamp);
-		public void freeze_keyboard (uint32 timestamp);
-		public unowned Meta.Compositor get_compositor ();
-		public uint32 get_current_time ();
-		public uint32 get_current_time_roundtrip ();
-		public int get_damage_event_base ();
-		public unowned Meta.Window get_focus_window ();
-		public Meta.GrabOp get_grab_op ();
-		public uint get_keybinding_action (uint keycode, ulong mask);
-		public uint32 get_last_user_time ();
-		public int get_shape_event_base ();
-		public unowned Meta.Window get_tab_current (Meta.TabList type, Meta.Workspace workspace);
-		public GLib.List<weak Meta.Window> get_tab_list (Meta.TabList type, Meta.Workspace? workspace);
-		public unowned Meta.Window get_tab_next (Meta.TabList type, Meta.Workspace workspace, Meta.Window? window, bool backward);
-		public unowned X.Display get_xdisplay ();
-		public int get_xinput_opcode ();
-		public uint grab_accelerator (string accelerator);
-		public bool has_shape ();
-		public bool is_pointer_emulating_sequence (Clutter.EventSequence? sequence);
-		public unowned Meta.Group lookup_group (X.Window group_leader);
-		public bool remove_keybinding (string name);
-		public void set_input_focus_window (Meta.Window window, bool focus_frame, uint32 timestamp);
-		public GLib.SList<weak Meta.Window> sort_windows_by_stacking (GLib.SList<Meta.Window> windows);
-		public bool supports_extended_barriers ();
-		public void unfreeze_keyboard (uint32 timestamp);
-		public bool ungrab_accelerator (uint action_id);
-		public void ungrab_keyboard (uint32 timestamp);
-		public void unmanage_screen (Meta.Screen screen, uint32 timestamp);
-		public bool xserver_time_is_before (uint32 time1, uint32 time2);
-		public bool xwindow_is_a_no_focus_window (X.Window xwindow);
-		public signal void accelerator_activated (uint object, uint p0, uint p1);
-		public signal void grab_op_begin (Meta.Screen object, Meta.Window p0, Meta.GrabOp p1);
-		public signal void grab_op_end (Meta.Screen object, Meta.Window p0, Meta.GrabOp p1);
-		public signal bool modifiers_accelerator_activated ();
-		public signal void overlay_key ();
-		public signal bool restart ();
-		public signal bool show_resize_popup (bool object, Meta.Rectangle p0, int p1, int p2);
-		public signal bool show_restart_message (string? message);
-		public signal void window_created (Meta.Window object);
-		public signal void window_demands_attention (Meta.Window object);
-		public signal void window_marked_urgent (Meta.Window object);
-	}
-	[CCode (cheader_filename = "meta/common.h")]
-	[Compact]
-	public class Frame {
-	}
-	[CCode (cheader_filename = "meta/group.h")]
-	[Compact]
-	public class Group {
-		public int get_size ();
-		public unowned string get_startup_id ();
-		public GLib.SList<weak Meta.Window> list_windows ();
-		public bool property_notify (X.Event event);
-		public void update_layers ();
-	}
-	[CCode (cheader_filename = "meta/meta-idle-monitor.h", type_id = "meta_idle_monitor_get_type ()")]
-	public class IdleMonitor : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected IdleMonitor ();
-		public uint add_idle_watch (uint64 interval_msec, owned Meta.IdleMonitorWatchFunc? callback);
-		public uint add_user_active_watch (owned Meta.IdleMonitorWatchFunc? callback);
-		public static unowned Meta.IdleMonitor get_core ();
-		public static unowned Meta.IdleMonitor get_for_device (int device_id);
-		public int64 get_idletime ();
-		public void remove_watch (uint id);
-		[NoAccessorMethod]
-		public int device_id { get; construct; }
-	}
-	[CCode (cheader_filename = "meta/keybindings.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "meta_key_binding_get_type ()")]
-	[Compact]
-	public class KeyBinding {
-		public uint get_mask ();
-		public Meta.VirtualModifier get_modifiers ();
-		public unowned string get_name ();
-		public bool is_builtin ();
-		public bool is_reversed ();
-		[CCode (cheader_filename = "meta/keybindings.h", cname = "meta_keybindings_set_custom_handler")]
-		public static bool set_custom_handler (string name, owned Meta.KeyHandlerFunc? handler);
-	}
-	[CCode (cheader_filename = "meta/meta-monitor-manager.h", type_id = "meta_monitor_manager_get_type ()")]
-	public abstract class MonitorManager : GLib.DBusInterfaceSkeleton, GLib.DBusInterface {
-		[CCode (has_construct_function = false)]
-		protected MonitorManager ();
-		public static unowned Meta.MonitorManager @get ();
-		public int get_monitor_for_output (uint id);
-		public signal void confirm_display_change ();
-	}
-	[CCode (cheader_filename = "meta/meta-plugin.h", type_id = "meta_plugin_get_type ()")]
-	public abstract class Plugin : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Plugin ();
-		public bool begin_modal (Meta.ModalOptions options, uint32 timestamp);
-		public void complete_display_change (bool ok);
-		[NoWrapper]
-		public virtual void confirm_display_change ();
-		[NoWrapper]
-		public virtual void destroy (Meta.WindowActor actor);
-		public void destroy_completed (Meta.WindowActor actor);
-		public void end_modal (uint32 timestamp);
-		public unowned Meta.PluginInfo? get_info ();
-		public unowned Meta.Screen get_screen ();
-		[NoWrapper]
-		public virtual void hide_tile_preview ();
-		[NoWrapper]
-		public virtual bool keybinding_filter (Meta.KeyBinding binding);
-		[NoWrapper]
-		public virtual void kill_switch_workspace ();
-		[NoWrapper]
-		public virtual void kill_window_effects (Meta.WindowActor actor);
-		public static void manager_set_plugin_type (GLib.Type gtype);
-		[NoWrapper]
-		public virtual void map (Meta.WindowActor actor);
-		public void map_completed (Meta.WindowActor actor);
-		[NoWrapper]
-		public virtual void minimize (Meta.WindowActor actor);
-		public void minimize_completed (Meta.WindowActor actor);
-		[NoWrapper]
-		public virtual unowned Meta.PluginInfo? plugin_info ();
-		[NoWrapper]
-		public virtual void show_tile_preview (Meta.Window window, Meta.Rectangle tile_rect, int tile_monitor_number);
-		[NoWrapper]
-		public virtual void show_window_menu (Meta.Window window, Meta.WindowMenuType menu, int x, int y);
-		[NoWrapper]
-		public virtual void show_window_menu_for_rect (Meta.Window window, Meta.WindowMenuType menu, Meta.Rectangle rect);
-		[NoWrapper]
-		public virtual void size_change (Meta.WindowActor actor, Meta.SizeChange which_change, Meta.Rectangle old_frame_rect, Meta.Rectangle old_buffer_rect);
-		public void size_change_completed (Meta.WindowActor actor);
-		[NoWrapper]
-		public virtual void start ();
-		[NoWrapper]
-		public virtual void switch_workspace (int from, int to, Meta.MotionDirection direction);
-		public void switch_workspace_completed ();
- 		[NoWrapper]
-		public virtual void unminimize (Meta.WindowActor actor);
-		public void unminimize_completed (Meta.WindowActor actor);
-		[NoWrapper]
-		public virtual bool xevent_filter (X.Event event);
-	}
-	[CCode (cheader_filename = "meta/screen.h", type_id = "meta_screen_get_type ()")]
-	public class Screen : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Screen ();
-		public unowned Meta.Workspace? append_new_workspace (bool activate, uint32 timestamp);
-		public void focus_default_window (uint32 timestamp);
-		public unowned Meta.Workspace get_active_workspace ();
-		public int get_active_workspace_index ();
-		public int get_current_monitor ();
-		public int get_current_monitor_for_pos (int x, int y);
-		public unowned Meta.Display get_display ();
-		public Meta.Rectangle get_monitor_geometry (int monitor);
-		public bool get_monitor_in_fullscreen (int monitor);
-		public int get_monitor_index_for_rect (Meta.Rectangle rect);
-		public int get_monitor_neighbor_index (int which_monitor, Meta.ScreenDirection dir);
-		public int get_n_monitors ();
-		public int get_n_workspaces ();
-		public int get_primary_monitor ();
-		public int get_screen_number ();
-		public void get_size (out int width, out int height);
-		public unowned Meta.Workspace? get_workspace_by_index (int index);
-		public unowned GLib.List<Meta.Workspace> get_workspaces ();
-		public X.Window get_xroot ();
-		public void override_workspace_layout (Meta.ScreenCorner starting_corner, bool vertical_layout, int n_rows, int n_columns);
-		public void remove_workspace (Meta.Workspace workspace, uint32 timestamp);
-		public void set_cm_selection ();
-		public void set_cursor (Meta.Cursor cursor);
-		public int n_workspaces { get; }
-		public signal void in_fullscreen_changed ();
-		public signal void monitors_changed ();
-		public signal void restacked ();
-		public signal void startup_sequence_changed (void* object);
-		public signal void window_entered_monitor (int object, Meta.Window p0);
-		public signal void window_left_monitor (int object, Meta.Window p0);
-		public signal void workareas_changed ();
-		public signal void workspace_added (int object);
-		public signal void workspace_removed (int object);
-		public signal void workspace_switched (int object, int p0, Meta.MotionDirection p1);
-	}
-	[CCode (cheader_filename = "meta/meta-shadow-factory.h", ref_function = "meta_shadow_ref", type_id = "meta_shadow_get_type ()", unref_function = "meta_shadow_unref")]
-	[Compact]
-	public class Shadow {
-		public void get_bounds (int window_x, int window_y, int window_width, int window_height, Cairo.RectangleInt bounds);
-		public void paint (int window_x, int window_y, int window_width, int window_height, uint8 opacity, Cairo.Region? clip, bool clip_strictly);
-		public Meta.Shadow @ref ();
-		public void unref ();
-	}
-	[CCode (cheader_filename = "meta/meta-shadow-factory.h", type_id = "meta_shadow_factory_get_type ()")]
-	public class ShadowFactory : GLib.Object {
-		[CCode (has_construct_function = false)]
-		public ShadowFactory ();
-		public static unowned Meta.ShadowFactory get_default ();
-		public Meta.ShadowParams get_params (string class_name, bool focused);
-		public Meta.Shadow get_shadow (Meta.WindowShape shape, int width, int height, string class_name, bool focused);
-		public void set_params (string class_name, bool focused, Meta.ShadowParams @params);
-		public signal void changed ();
-	}
-	[CCode (cheader_filename = "meta/meta-shaped-texture.h", type_id = "meta_shaped_texture_get_type ()")]
-	public class ShapedTexture : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		protected ShapedTexture ();
-		public Cairo.Surface get_image (Cairo.RectangleInt clip);
-		public unowned Cogl.Texture get_texture ();
-		public void set_create_mipmaps (bool create_mipmaps);
-		public void set_mask_texture (Cogl.Texture mask_texture);
-		public void set_opaque_region (owned Cairo.Region opaque_region);
-		public bool update_area (int x, int y, int width, int height);
-		public signal void size_changed ();
-	}
-	[CCode (cheader_filename = "meta/theme.h")]
-	[Compact]
-	public class Theme {
-		public void free ();
-		[CCode (cheader_filename = "meta/main.h")]
-		public static unowned Meta.Theme get_default ();
-		[CCode (cheader_filename = "meta/main.h")]
-		public static unowned Meta.Theme @new ();
-	}
-	[CCode (cheader_filename = "meta/window.h", type_id = "meta_window_get_type ()")]
-	public abstract class Window : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Window ();
-		public void activate (uint32 current_time);
-		public void activate_with_workspace (uint32 current_time, Meta.Workspace workspace);
-		public bool allows_move ();
-		public bool allows_resize ();
-		public void begin_grab_op (Meta.GrabOp op, bool frame_action, uint32 timestamp);
-		public bool can_close ();
-		public bool can_maximize ();
-		public bool can_minimize ();
-		public bool can_shade ();
-		public void change_workspace (Meta.Workspace workspace);
-		public void change_workspace_by_index (int space_index, bool append);
-		public void check_alive (uint32 timestamp);
-		public Meta.Rectangle client_rect_to_frame_rect (Meta.Rectangle client_rect);
-		public void compute_group ();
-		public void @delete (uint32 timestamp);
-		public unowned Meta.Window find_root_ancestor ();
-		public void focus (uint32 timestamp);
-		public void foreach_ancestor (Meta.WindowForeachFunc func);
-		public void foreach_transient (Meta.WindowForeachFunc func);
-		public Meta.Rectangle frame_rect_to_client_rect (Meta.Rectangle frame_rect);
-		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
-		public int[] get_all_monitors ();
-		public Meta.Rectangle get_buffer_rect ();
-		public unowned string get_client_machine ();
-		public unowned GLib.Object get_compositor_private ();
-		public unowned string get_description ();
-		public unowned Meta.Display get_display ();
-		public unowned Meta.Frame get_frame ();
-		public unowned Cairo.Region? get_frame_bounds ();
-		public Meta.Rectangle get_frame_rect ();
-		public Meta.FrameType get_frame_type ();
-		public unowned Meta.Group get_group ();
-		public unowned string get_gtk_app_menu_object_path ();
-		public unowned string get_gtk_application_id ();
-		public unowned string get_gtk_application_object_path ();
-		public unowned string get_gtk_menubar_object_path ();
-		public unowned string get_gtk_theme_variant ();
-		public unowned string get_gtk_unique_bus_name ();
-		public unowned string get_gtk_window_object_path ();
-		public bool get_icon_geometry (out Meta.Rectangle rect);
-		public Meta.StackLayer get_layer ();
-		public Meta.MaximizeFlags get_maximized ();
-		public int get_monitor ();
-		public unowned string get_mutter_hints ();
-		public int get_pid ();
-		public unowned string get_role ();
-		public unowned Meta.Screen get_screen ();
-		public uint get_stable_sequence ();
-		public unowned string get_startup_id ();
-		public unowned Meta.Window? get_tile_match ();
-		public unowned string get_title ();
-		public unowned Meta.Window get_transient_for ();
-		public uint32 get_user_time ();
-		public Meta.WindowType get_window_type ();
-		public unowned string get_wm_class ();
-		public unowned string get_wm_class_instance ();
-		public Meta.Rectangle get_work_area_all_monitors ();
-		public Meta.Rectangle get_work_area_current_monitor ();
-		public Meta.Rectangle get_work_area_for_monitor (int which_monitor);
-		public unowned Meta.Workspace get_workspace ();
-		public X.Window get_xwindow ();
-		public void group_leader_changed ();
-		public bool has_focus ();
-		public bool is_above ();
-		public bool is_always_on_all_workspaces ();
-		public bool is_ancestor_of_transient (Meta.Window transient);
-		public bool is_attached_dialog ();
-		public bool is_fullscreen ();
-		public bool is_hidden ();
-		public bool is_monitor_sized ();
-		public bool is_on_all_workspaces ();
-		public bool is_on_primary_monitor ();
-		public bool is_override_redirect ();
-		public bool is_remote ();
-		public bool is_screen_sized ();
-		public bool is_shaded ();
-		public bool is_skip_taskbar ();
-		public void kill ();
-		public bool located_on_workspace (Meta.Workspace workspace);
-		public void lower ();
-		public void make_above ();
-		public void make_fullscreen ();
-		public void maximize (Meta.MaximizeFlags directions);
-		public void minimize ();
-		public void move_frame (bool user_op, int root_x_nw, int root_y_nw);
-		public void move_resize_frame (bool user_op, int root_x_nw, int root_y_nw, int w, int h);
-		public void move_to_monitor (int monitor);
-		public void raise ();
-		public bool requested_bypass_compositor ();
-		public bool requested_dont_bypass_compositor ();
-		public void set_compositor_private (GLib.Object priv);
-		public void set_demands_attention ();
-		public void set_icon_geometry (Meta.Rectangle? rect);
-		public void shade (uint32 timestamp);
-		public void shove_titlebar_onscreen ();
-		public bool showing_on_its_workspace ();
-		public void shutdown_group ();
-		public void stick ();
-		public bool titlebar_is_onscreen ();
-		public void unmake_above ();
-		public void unmake_fullscreen ();
-		public void unmaximize (Meta.MaximizeFlags directions);
-		public void unminimize ();
-		public void unset_demands_attention ();
-		public void unshade (uint32 timestamp);
-		public void unstick ();
-		[NoAccessorMethod]
-		public bool above { get; }
-		[NoAccessorMethod]
-		public bool appears_focused { get; }
-		[NoAccessorMethod]
-		public bool decorated { get; }
-		[NoAccessorMethod]
-		public bool demands_attention { get; }
-		[NoAccessorMethod]
-		public bool fullscreen { get; }
-		public string gtk_app_menu_object_path { get; }
-		public string gtk_application_id { get; }
-		public string gtk_application_object_path { get; }
-		public string gtk_menubar_object_path { get; }
-		public string gtk_unique_bus_name { get; }
-		public string gtk_window_object_path { get; }
-		[NoAccessorMethod]
-		public Cairo.Surface icon { owned get; }
-		[NoAccessorMethod]
-		public bool maximized_horizontally { get; }
-		[NoAccessorMethod]
-		public bool maximized_vertically { get; }
-		[NoAccessorMethod]
-		public Cairo.Surface mini_icon { owned get; }
-		[NoAccessorMethod]
-		public bool minimized { get; }
-		public string mutter_hints { get; }
-		[NoAccessorMethod]
-		public bool on_all_workspaces { get; }
-		[NoAccessorMethod]
-		public bool resizeable { get; }
-		[NoAccessorMethod]
-		public bool skip_taskbar { get; }
-		public string title { get; }
-		[NoAccessorMethod]
-		public bool urgent { get; }
-		public uint user_time { get; }
-		public Meta.WindowType window_type { get; }
-		public string wm_class { get; }
-		[CCode (cname = "focus")]
-		public signal void focused ();
-		public signal void position_changed ();
-		public signal void raised ();
-		public signal void size_changed ();
-		public signal void unmanaged ();
-		public signal void workspace_changed ();
-	}
-	[CCode (cheader_filename = "meta/meta-window-actor.h", type_id = "meta_window_actor_get_type ()")]
-	public class WindowActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		protected WindowActor ();
-		public unowned Meta.Window get_meta_window ();
-		public unowned Clutter.Actor get_texture ();
-		public X.Window get_x_window ();
-		public bool is_destroyed ();
-		[NoAccessorMethod]
-		public string shadow_class { owned get; set; }
-		[NoAccessorMethod]
-		public Meta.ShadowMode shadow_mode { get; set; }
-		public signal void first_frame ();
-	}
-	[CCode (cheader_filename = "meta/meta_window_shape.h", ref_function = "meta_window_shape_ref", type_id = "meta_window_shape_get_type ()", unref_function = "meta_window_shape_unref")]
-	[Compact]
-	public class WindowShape {
-		[CCode (has_construct_function = false)]
-		public WindowShape (Cairo.Region region);
-		public bool equal (Meta.WindowShape shape_b);
-		public void get_borders (int border_top, int border_right, int border_bottom, int border_left);
-		public uint hash ();
-		public Meta.WindowShape @ref ();
-		public Cairo.Region to_region (int center_width, int center_height);
-		public void unref ();
-	}
-	[CCode (cheader_filename = "meta/workspace.h", type_id = "meta_workspace_get_type ()")]
-	public class Workspace : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Workspace ();
-		public void activate (uint32 timestamp);
-		public void activate_with_focus (Meta.Window focus_this, uint32 timestamp);
-		public unowned Meta.Workspace get_neighbor (Meta.MotionDirection direction);
-		public unowned Meta.Screen get_screen ();
-		public Meta.Rectangle get_work_area_all_monitors ();
-		public Meta.Rectangle get_work_area_for_monitor (int which_monitor);
-		public int index ();
-		public GLib.List<weak Meta.Window> list_windows ();
-		public void set_builtin_struts (GLib.SList<Meta.Strut> struts);
-		[NoAccessorMethod]
-		public uint n_windows { get; }
-		[NoAccessorMethod]
-		public uint workspace_index { get; }
-		public signal void window_added (Meta.Window object);
-		public signal void window_removed (Meta.Window object);
-	}
-	[CCode (cheader_filename = "meta/common.h", has_type_id = false)]
-	public struct ButtonLayout {
-		[CCode (array_length = false, array_null_terminated = true)]
-		public weak Meta.ButtonFunction[] left_buttons;
-		[CCode (array_length = false, array_null_terminated = true)]
-		public weak bool[] left_buttons_has_spacer;
-		[CCode (array_length = false, array_null_terminated = true)]
-		public weak Meta.ButtonFunction[] right_buttons;
-		[CCode (array_length = false, array_null_terminated = true)]
-		public weak bool[] right_buttons_has_spacer;
-	}
-	[CCode (cheader_filename = "meta/boxes.h", has_type_id = false)]
-	public struct Edge {
-		public Meta.Rectangle rect;
-		public Meta.Side side_type;
-		public Meta.EdgeType edge_type;
-	}
-	[CCode (cheader_filename = "meta/common.h", has_type_id = false)]
-	public struct FrameBorders {
-		public Gtk.Border visible;
-		public Gtk.Border invisible;
-		public Gtk.Border total;
-		public void clear ();
-	}
-	[CCode (cheader_filename = "meta/meta-plugin.h", has_type_id = false)]
-	public struct PluginInfo {
-		public weak string name;
-		public weak string version;
-		public weak string author;
-		public weak string license;
-		public weak string description;
-	}
-	[CCode (cheader_filename = "meta/meta-plugin.h", has_type_id = false)]
-	public struct PluginVersion {
-		public uint version_major;
-		public uint version_minor;
-		public uint version_micro;
-		public uint version_api;
-	}
-	[CCode (cheader_filename = "meta/boxes.h", has_type_id = false)]
-	public struct Rectangle {
-		public int x;
-		public int y;
-		public int width;
-		public int height;
-		public int area ();
-		public bool contains_rect (Meta.Rectangle inner_rect);
-		public bool could_fit_rect (Meta.Rectangle inner_rect);
-		public bool equal (Meta.Rectangle src2);
-		public bool horiz_overlap (Meta.Rectangle rect2);
-		public bool intersect (Meta.Rectangle src2, out Meta.Rectangle dest);
-		public bool overlap (Meta.Rectangle rect2);
-		public Meta.Rectangle union (Meta.Rectangle rect2);
-		public bool vert_overlap (Meta.Rectangle rect2);
-	}
-	[CCode (cheader_filename = "meta/meta-shadow-factory.h", has_type_id = false)]
-	public struct ShadowParams {
-		public int radius;
-		public int top_fade;
-		public int x_offset;
-		public int y_offset;
-		public uint8 opacity;
-	}
-	[CCode (cheader_filename = "meta/boxes.h", has_type_id = false)]
-	public struct Strut {
-		public Meta.Rectangle rect;
-		public Meta.Side side;
-	}
-	[CCode (cheader_filename = "meta/barrier.h", cprefix = "META_BARRIER_DIRECTION_", type_id = "meta_barrier_direction_get_type ()")]
-	[Flags]
-	public enum BarrierDirection {
-		POSITIVE_X,
-		POSITIVE_Y,
-		NEGATIVE_X,
-		NEGATIVE_Y
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_BUTTON_FUNCTION_", type_id = "meta_button_function_get_type ()")]
-	public enum ButtonFunction {
-		MENU,
-		MINIMIZE,
-		MAXIMIZE,
-		CLOSE,
-		SHADE,
-		ABOVE,
-		STICK,
-		UNSHADE,
-		UNABOVE,
-		UNSTICK,
-		APPMENU,
-		LAST
-	}
-	[CCode (cheader_filename = "meta/compositor.h", cprefix = "META_COMP_EFFECT_", type_id = "meta_comp_effect_get_type ()")]
-	public enum CompEffect {
-		CREATE,
-		UNMINIMIZE,
-		DESTROY,
-		MINIMIZE,
-		NONE
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_CURSOR_", type_id = "meta_cursor_get_type ()")]
-	public enum Cursor {
-		NONE,
-		DEFAULT,
-		NORTH_RESIZE,
-		SOUTH_RESIZE,
-		WEST_RESIZE,
-		EAST_RESIZE,
-		SE_RESIZE,
-		SW_RESIZE,
-		NE_RESIZE,
-		NW_RESIZE,
-		MOVE_OR_RESIZE_WINDOW,
-		BUSY,
-		DND_IN_DRAG,
-		DND_MOVE,
-		DND_COPY,
-		DND_UNSUPPORTED_TARGET,
-		POINTING_HAND,
-		CROSSHAIR,
-		IBEAM,
-		LAST
-	}
-	[CCode (cheader_filename = "meta/util.h", cprefix = "META_DEBUG_", type_id = "meta_debug_topic_get_type ()")]
-	[Flags]
-	public enum DebugTopic {
-		VERBOSE,
-		FOCUS,
-		WORKAREA,
-		STACK,
-		THEMES,
-		SM,
-		EVENTS,
-		WINDOW_STATE,
-		WINDOW_OPS,
-		GEOMETRY,
-		PLACEMENT,
-		PING,
-		XINERAMA,
-		KEYBINDINGS,
-		SYNC,
-		ERRORS,
-		STARTUP,
-		PREFS,
-		GROUPS,
-		RESIZING,
-		SHAPES,
-		COMPOSITOR,
-		EDGE_RESISTANCE,
-		DBUS
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_DIRECTION_", type_id = "meta_direction_get_type ()")]
-	[Flags]
-	public enum Direction {
-		LEFT,
-		RIGHT,
-		TOP,
-		BOTTOM,
-		UP,
-		DOWN,
-		HORIZONTAL,
-		VERTICAL
-	}
-	[CCode (cheader_filename = "meta/boxes.h", cprefix = "META_EDGE_", type_id = "meta_edge_type_get_type ()")]
-	public enum EdgeType {
-		WINDOW,
-		MONITOR,
-		SCREEN
-	}
-	[CCode (cheader_filename = "meta/main.h", cprefix = "META_EXIT_", type_id = "meta_exit_code_get_type ()")]
-	public enum ExitCode {
-		SUCCESS,
-		ERROR
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_FRAME_", type_id = "meta_frame_flags_get_type ()")]
-	[Flags]
-	public enum FrameFlags {
-		ALLOWS_DELETE,
-		ALLOWS_MENU,
-		ALLOWS_APPMENU,
-		ALLOWS_MINIMIZE,
-		ALLOWS_MAXIMIZE,
-		ALLOWS_VERTICAL_RESIZE,
-		ALLOWS_HORIZONTAL_RESIZE,
-		HAS_FOCUS,
-		SHADED,
-		STUCK,
-		MAXIMIZED,
-		ALLOWS_SHADE,
-		ALLOWS_MOVE,
-		FULLSCREEN,
-		IS_FLASHING,
-		ABOVE,
-		TILED_LEFT,
-		TILED_RIGHT
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_FRAME_TYPE_", type_id = "meta_frame_type_get_type ()")]
-	public enum FrameType {
-		NORMAL,
-		DIALOG,
-		MODAL_DIALOG,
-		UTILITY,
-		MENU,
-		BORDER,
-		ATTACHED,
-		LAST;
-		[CCode (cheader_filename = "meta/main.h")]
-		public static unowned string to_string (Meta.FrameType type);
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_GRAB_OP_", type_id = "meta_grab_op_get_type ()")]
-	public enum GrabOp {
-		NONE,
-		COMPOSITOR,
-		WAYLAND_POPUP,
-		WINDOW_BASE,
-		FRAME_BUTTON,
-		MOVING,
-		RESIZING_NW,
-		RESIZING_N,
-		RESIZING_NE,
-		RESIZING_E,
-		RESIZING_SW,
-		RESIZING_S,
-		RESIZING_SE,
-		RESIZING_W,
-		KEYBOARD_MOVING,
-		KEYBOARD_RESIZING_UNKNOWN,
-		KEYBOARD_RESIZING_NW,
-		KEYBOARD_RESIZING_N,
-		KEYBOARD_RESIZING_NE,
-		KEYBOARD_RESIZING_E,
-		KEYBOARD_RESIZING_SW,
-		KEYBOARD_RESIZING_S,
-		KEYBOARD_RESIZING_SE,
-		KEYBOARD_RESIZING_W
-	}
-	[CCode (cheader_filename = "meta/prefs.h", cprefix = "META_KEYBINDING_ACTION_", type_id = "meta_key_binding_action_get_type ()")]
-	public enum KeyBindingAction {
-		NONE,
-		WORKSPACE_1,
-		WORKSPACE_2,
-		WORKSPACE_3,
-		WORKSPACE_4,
-		WORKSPACE_5,
-		WORKSPACE_6,
-		WORKSPACE_7,
-		WORKSPACE_8,
-		WORKSPACE_9,
-		WORKSPACE_10,
-		WORKSPACE_11,
-		WORKSPACE_12,
-		WORKSPACE_LEFT,
-		WORKSPACE_RIGHT,
-		WORKSPACE_UP,
-		WORKSPACE_DOWN,
-		WORKSPACE_LAST,
-		SWITCH_APPLICATIONS,
-		SWITCH_APPLICATIONS_BACKWARD,
-		SWITCH_GROUP,
-		SWITCH_GROUP_BACKWARD,
-		SWITCH_WINDOWS,
-		SWITCH_WINDOWS_BACKWARD,
-		SWITCH_PANELS,
-		SWITCH_PANELS_BACKWARD,
-		CYCLE_GROUP,
-		CYCLE_GROUP_BACKWARD,
-		CYCLE_WINDOWS,
-		CYCLE_WINDOWS_BACKWARD,
-		CYCLE_PANELS,
-		CYCLE_PANELS_BACKWARD,
-		SHOW_DESKTOP,
-		PANEL_MAIN_MENU,
-		PANEL_RUN_DIALOG,
-		TOGGLE_RECORDING,
-		SET_SPEW_MARK,
-		ACTIVATE_WINDOW_MENU,
-		TOGGLE_FULLSCREEN,
-		TOGGLE_MAXIMIZED,
-		TOGGLE_TILED_LEFT,
-		TOGGLE_TILED_RIGHT,
-		TOGGLE_ABOVE,
-		MAXIMIZE,
-		UNMAXIMIZE,
-		TOGGLE_SHADED,
-		MINIMIZE,
-		CLOSE,
-		BEGIN_MOVE,
-		BEGIN_RESIZE,
-		TOGGLE_ON_ALL_WORKSPACES,
-		MOVE_TO_WORKSPACE_1,
-		MOVE_TO_WORKSPACE_2,
-		MOVE_TO_WORKSPACE_3,
-		MOVE_TO_WORKSPACE_4,
-		MOVE_TO_WORKSPACE_5,
-		MOVE_TO_WORKSPACE_6,
-		MOVE_TO_WORKSPACE_7,
-		MOVE_TO_WORKSPACE_8,
-		MOVE_TO_WORKSPACE_9,
-		MOVE_TO_WORKSPACE_10,
-		MOVE_TO_WORKSPACE_11,
-		MOVE_TO_WORKSPACE_12,
-		MOVE_TO_WORKSPACE_LEFT,
-		MOVE_TO_WORKSPACE_RIGHT,
-		MOVE_TO_WORKSPACE_UP,
-		MOVE_TO_WORKSPACE_DOWN,
-		MOVE_TO_WORKSPACE_LAST,
-		MOVE_TO_MONITOR_LEFT,
-		MOVE_TO_MONITOR_RIGHT,
-		MOVE_TO_MONITOR_UP,
-		MOVE_TO_MONITOR_DOWN,
-		RAISE_OR_LOWER,
-		RAISE,
-		LOWER,
-		MAXIMIZE_VERTICALLY,
-		MAXIMIZE_HORIZONTALLY,
-		MOVE_TO_CORNER_NW,
-		MOVE_TO_CORNER_NE,
-		MOVE_TO_CORNER_SW,
-		MOVE_TO_CORNER_SE,
-		MOVE_TO_SIDE_N,
-		MOVE_TO_SIDE_S,
-		MOVE_TO_SIDE_E,
-		MOVE_TO_SIDE_W,
-		MOVE_TO_CENTER,
-		OVERLAY_KEY,
-		ISO_NEXT_GROUP,
-		ALWAYS_ON_TOP,
-		LAST
-	}
-	[CCode (cheader_filename = "meta/prefs.h", cprefix = "META_KEY_BINDING_", type_id = "meta_key_binding_flags_get_type ()")]
-	[Flags]
-	public enum KeyBindingFlags {
-		NONE,
-		PER_WINDOW,
-		BUILTIN,
-		IS_REVERSED
-	}
-	[CCode (cheader_filename = "meta/util.h", cprefix = "META_LATER_", type_id = "meta_later_type_get_type ()")]
-	public enum LaterType {
-		RESIZE,
-		CALC_SHOWING,
-		CHECK_FULLSCREEN,
-		SYNC_STACK,
-		BEFORE_REDRAW,
-		IDLE
-	}
-	[CCode (cheader_filename = "meta/util.h", cprefix = "META_LOCALE_DIRECTION_", type_id = "meta_locale_direction_get_type ()")]
-	public enum LocaleDirection {
-		LTR,
-		RTL
-	}
-	[CCode (cheader_filename = "meta/window.h", cprefix = "META_MAXIMIZE_", type_id = "meta_maximize_flags_get_type ()")]
-	[Flags]
-	public enum MaximizeFlags {
-		HORIZONTAL,
-		VERTICAL,
-		BOTH
-	}
-	[CCode (cheader_filename = "meta/meta-plugin.h", cprefix = "META_MODAL_", type_id = "meta_modal_options_get_type ()")]
-	[Flags]
-	public enum ModalOptions {
-		POINTER_ALREADY_GRABBED,
-		KEYBOARD_ALREADY_GRABBED
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_MOTION_", type_id = "meta_motion_direction_get_type ()")]
-	public enum MotionDirection {
-		UP,
-		DOWN,
-		LEFT,
-		RIGHT,
-		UP_LEFT,
-		UP_RIGHT,
-		DOWN_LEFT,
-		DOWN_RIGHT
-	}
-	[CCode (cheader_filename = "meta/prefs.h", cprefix = "META_PREF_", type_id = "meta_preference_get_type ()")]
-	public enum Preference {
-		MOUSE_BUTTON_MODS,
-		FOCUS_MODE,
-		FOCUS_NEW_WINDOWS,
-		ATTACH_MODAL_DIALOGS,
-		RAISE_ON_CLICK,
-		ACTION_DOUBLE_CLICK_TITLEBAR,
-		ACTION_MIDDLE_CLICK_TITLEBAR,
-		ACTION_RIGHT_CLICK_TITLEBAR,
-		AUTO_RAISE,
-		AUTO_RAISE_DELAY,
-		FOCUS_CHANGE_ON_POINTER_REST,
-		TITLEBAR_FONT,
-		NUM_WORKSPACES,
-		DYNAMIC_WORKSPACES,
-		KEYBINDINGS,
-		DISABLE_WORKAROUNDS,
-		BUTTON_LAYOUT,
-		WORKSPACE_NAMES,
-		VISUAL_BELL,
-		AUDIBLE_BELL,
-		VISUAL_BELL_TYPE,
-		GNOME_ACCESSIBILITY,
-		GNOME_ANIMATIONS,
-		CURSOR_THEME,
-		CURSOR_SIZE,
-		RESIZE_WITH_RIGHT_BUTTON,
-		EDGE_TILING,
-		FORCE_FULLSCREEN,
-		WORKSPACES_ONLY_ON_PRIMARY,
-		DRAGGABLE_BORDER_WIDTH,
-		AUTO_MAXIMIZE,
-		CENTER_NEW_WINDOWS,
-		DRAG_THRESHOLD;
-		[CCode (cheader_filename = "meta/main.h")]
-		public static unowned string to_string (Meta.Preference pref);
-	}
-	[CCode (cheader_filename = "meta/screen.h", cprefix = "META_SCREEN_", type_id = "meta_screen_corner_get_type ()")]
-	public enum ScreenCorner {
-		TOPLEFT,
-		TOPRIGHT,
-		BOTTOMLEFT,
-		BOTTOMRIGHT
-	}
-	[CCode (cheader_filename = "meta/meta-enum-types.h", cprefix = "META_SCREEN_", type_id = "meta_screen_direction_get_type ()")]
-	public enum ScreenDirection {
-		UP,
-		DOWN,
-		LEFT,
-		RIGHT
-	}
-	[CCode (cheader_filename = "meta/meta-enum-types.h", cprefix = "META_SHADOW_MODE_", type_id = "meta_shadow_mode_get_type ()")]
-	public enum ShadowMode {
-		AUTO,
-		FORCED_OFF,
-		FORCED_ON
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_SIDE_", type_id = "meta_side_get_type ()")]
-	public enum Side {
-		LEFT,
-		RIGHT,
-		TOP,
-		BOTTOM
-	}
-	[CCode (cheader_filename = "meta/meta-enum-types.h", cprefix = "META_SIZE_CHANGE_", type_id = "meta_size_change_get_type ()")]
-	public enum SizeChange {
-		MAXIMIZE,
-		UNMAXIMIZE,
-		FULLSCREEN,
-		UNFULLSCREEN
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_LAYER_", type_id = "meta_stack_layer_get_type ()")]
-	public enum StackLayer {
-		DESKTOP,
-		BOTTOM,
-		NORMAL,
-		TOP,
-		DOCK,
-		FULLSCREEN,
-		FOCUSED_WINDOW,
-		OVERRIDE_REDIRECT,
-		LAST
-	}
-	[CCode (cheader_filename = "meta/display.h", cprefix = "META_TAB_LIST_", type_id = "meta_tab_list_get_type ()")]
-	public enum TabList {
-		NORMAL,
-		DOCKS,
-		GROUP,
-		NORMAL_ALL
-	}
-	[CCode (cheader_filename = "meta/display.h", cprefix = "META_TAB_SHOW_", type_id = "meta_tab_show_type_get_type ()")]
-	public enum TabShowType {
-		ICON,
-		INSTANTLY
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_VIRTUAL_", type_id = "meta_virtual_modifier_get_type ()")]
-	[Flags]
-	public enum VirtualModifier {
-		SHIFT_MASK,
-		CONTROL_MASK,
-		ALT_MASK,
-		META_MASK,
-		SUPER_MASK,
-		HYPER_MASK,
-		MOD2_MASK,
-		MOD3_MASK,
-		MOD4_MASK,
-		MOD5_MASK
-	}
-	[CCode (cheader_filename = "meta/window.h", cprefix = "META_WINDOW_CLIENT_TYPE_", type_id = "meta_window_client_type_get_type ()")]
-	public enum WindowClientType {
-		WAYLAND,
-		X11
-	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_WINDOW_MENU_", type_id = "meta_window_menu_type_get_type ()")]
-	public enum WindowMenuType {
-		WM,
-		APP
-	}
-	[CCode (cheader_filename = "meta/window.h", cprefix = "META_WINDOW_", type_id = "meta_window_type_get_type ()")]
-	public enum WindowType {
-		NORMAL,
-		DESKTOP,
-		DOCK,
-		DIALOG,
-		MODAL_DIALOG,
-		TOOLBAR,
-		MENU,
-		UTILITY,
-		SPLASHSCREEN,
-		DROPDOWN_MENU,
-		POPUP_MENU,
-		TOOLTIP,
-		NOTIFICATION,
-		COMBO,
-		DND,
-		OVERRIDE_OTHER
-	}
-	[CCode (cheader_filename = "meta/meta-idle-monitor.h", instance_pos = 2.9)]
-	public delegate void IdleMonitorWatchFunc (Meta.IdleMonitor monitor, uint watch_id);
-	[CCode (cheader_filename = "meta/prefs.h", instance_pos = 5.9)]
-	public delegate void KeyHandlerFunc (Meta.Display display, Meta.Screen screen, Meta.Window? window, Clutter.KeyEvent? event, Meta.KeyBinding binding);
-	[CCode (cheader_filename = "meta/prefs.h", instance_pos = 1.9)]
-	public delegate void PrefsChangedFunc (Meta.Preference pref);
-	[CCode (cheader_filename = "meta/window.h", instance_pos = 1.9)]
-	public delegate bool WindowForeachFunc (Meta.Window window);
-	[CCode (cheader_filename = "meta/main.h", cname = "META_DEFAULT_ICON_NAME")]
-	public const string DEFAULT_ICON_NAME;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_ICON_HEIGHT")]
-	public const int ICON_HEIGHT;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_ICON_WIDTH")]
-	public const int ICON_WIDTH;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_MAJOR_VERSION")]
-	public const int MAJOR_VERSION;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_MICRO_VERSION")]
-	public const int MICRO_VERSION;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_MINI_ICON_HEIGHT")]
-	public const int MINI_ICON_HEIGHT;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_MINI_ICON_WIDTH")]
-	public const int MINI_ICON_WIDTH;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_MINOR_VERSION")]
-	public const int MINOR_VERSION;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_PLUGIN_API_VERSION")]
-	public const int PLUGIN_API_VERSION;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_PRIORITY_BEFORE_REDRAW")]
-	public const int PRIORITY_BEFORE_REDRAW;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_PRIORITY_PREFS_NOTIFY")]
-	public const int PRIORITY_PREFS_NOTIFY;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_PRIORITY_REDRAW")]
-	public const int PRIORITY_REDRAW;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_PRIORITY_RESIZE")]
-	public const int PRIORITY_RESIZE;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_VIRTUAL_CORE_KEYBOARD_ID")]
-	public const int VIRTUAL_CORE_KEYBOARD_ID;
-	[CCode (cheader_filename = "meta/main.h", cname = "META_VIRTUAL_CORE_POINTER_ID")]
-	public const int VIRTUAL_CORE_POINTER_ID;
-	[CCode (cheader_filename = "meta/main.h")]
-	public static bool activate_session ();
- 	[CCode (cheader_filename = "meta/main.h")]
-	public static void clutter_init ();
-	[CCode (cheader_filename = "meta/main.h")]
-	public static void exit (Meta.ExitCode code);
-	[CCode (cheader_filename = "meta/main.h")]
-	public static unowned GLib.OptionContext get_option_context ();
-	[CCode (cheader_filename = "meta/main.h")]
-	public static bool get_replace_current_wm ();
-	[CCode (cheader_filename = "meta/main.h")]
-	public static void init ();
-	[CCode (cheader_filename = "meta/main.h")]
-	public static bool is_restart ();
-	[CCode (cheader_filename = "meta/main.h")]
-	public static void quit (Meta.ExitCode code);
-	[CCode (cheader_filename = "meta/main.h")]
-	public static void register_with_session ();
- 	[CCode (cheader_filename = "meta/main.h")]
-	public static void restart (string message);
-	[CCode (cheader_filename = "meta/main.h")]
-	public static int run ();
-	[CCode (cheader_filename = "meta/main.h")]
-	public static void set_gnome_wm_keybindings (string wm_keybindings);
-	[CCode (cheader_filename = "meta/main.h")]
-	public static void set_wm_name (string wm_name);
-}
diff --git vapi/libmutter-3-custom.vala vapi/libmutter-3-custom.vala
deleted file mode 100644
index 29e5977d..00000000
--- vapi/libmutter-3-custom.vala
+++ /dev/null
@@ -1,6 +0,0 @@
-namespace Meta {
-	public abstract class MonitorManager : Meta.DBusDisplayConfigSkeleton, GLib.DBusInterface {
-		/* not exported */
-		public signal void monitors_changed ();
-	}
-}
diff --git vapi/libmutter-3.deps vapi/libmutter-3.deps
deleted file mode 100644
index 1f3c9079..00000000
--- vapi/libmutter-3.deps
+++ /dev/null
@@ -1,9 +0,0 @@
-cairo
-gsettings-desktop-schemas
-gdk-3.0
-gdk-pixbuf-2.0
-gtk+-3.0
-x11
-xfixes-4.0
-clutter-1.0
-cogl-1.0
diff --git vapi/libmutter-4.deps vapi/libmutter-4.deps
deleted file mode 100644
index 367c35b9..00000000
--- vapi/libmutter-4.deps
+++ /dev/null
@@ -1,8 +0,0 @@
-gdk-3.0
-gdk-pixbuf-2.0
-gsettings-desktop-schemas
-gtk+-3.0
-mutter-clutter-4
-mutter-cogl-4
-x11
-xfixes-4.0
diff --git vapi/libmutter-4.vapi vapi/libmutter-4.vapi
deleted file mode 100644
index e0d356a0..00000000
--- vapi/libmutter-4.vapi
+++ /dev/null
@@ -1,1425 +0,0 @@
-/* libmutter-4.vapi generated by vapigen, do not modify. */
-
-[CCode (cprefix = "Meta", gir_namespace = "Meta", gir_version = "4", lower_case_cprefix = "meta_")]
-namespace Meta {
-	namespace Compositor {
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_disable_unredirect_for_display")]
-		public static void disable_unredirect_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_empty_stage_input_region")]
-		public static void empty_stage_input_region (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_enable_unredirect_for_display")]
-		public static void enable_unredirect_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_focus_stage_window")]
-		public static void focus_stage_window (Meta.Display display, uint32 timestamp);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_feedback_group_for_display")]
-		public static unowned Clutter.Actor get_feedback_group_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_stage_for_display")]
-		public static unowned Clutter.Actor get_stage_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_top_window_group_for_display")]
-		public static unowned Clutter.Actor get_top_window_group_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_window_actors")]
-		public static unowned GLib.List<Clutter.Actor> get_window_actors (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_window_group_for_display")]
-		public static unowned Clutter.Actor get_window_group_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_set_stage_input_region")]
-		public static void set_stage_input_region (Meta.Display display, X.XserverRegion region);
-	}
-	namespace Prefs {
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_bell_is_audible")]
-		public static bool prefs_bell_is_audible ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_change_workspace_name")]
-		public static void prefs_change_workspace_name (int i, string name);
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_action_double_click_titlebar")]
-		public static GDesktop.TitlebarAction prefs_get_action_double_click_titlebar ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_action_middle_click_titlebar")]
-		public static GDesktop.TitlebarAction prefs_get_action_middle_click_titlebar ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_action_right_click_titlebar")]
-		public static GDesktop.TitlebarAction prefs_get_action_right_click_titlebar ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_attach_modal_dialogs")]
-		public static bool prefs_get_attach_modal_dialogs ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_auto_maximize")]
-		public static bool prefs_get_auto_maximize ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_auto_raise")]
-		public static bool prefs_get_auto_raise ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_auto_raise_delay")]
-		public static int prefs_get_auto_raise_delay ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_button_layout")]
-		public static Meta.ButtonLayout prefs_get_button_layout ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_center_new_windows")]
-		public static bool prefs_get_center_new_windows ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_compositing_manager")]
-		public static bool prefs_get_compositing_manager ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_cursor_size")]
-		public static int prefs_get_cursor_size ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_cursor_theme")]
-		public static unowned string prefs_get_cursor_theme ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_disable_workarounds")]
-		public static bool prefs_get_disable_workarounds ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_drag_threshold")]
-		public static int prefs_get_drag_threshold ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_draggable_border_width")]
-		public static int prefs_get_draggable_border_width ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_dynamic_workspaces")]
-		public static bool prefs_get_dynamic_workspaces ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_edge_tiling")]
-		public static bool prefs_get_edge_tiling ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_focus_change_on_pointer_rest")]
-		public static bool prefs_get_focus_change_on_pointer_rest ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_focus_mode")]
-		public static GDesktop.FocusMode prefs_get_focus_mode ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_focus_new_windows")]
-		public static GDesktop.FocusNewWindows prefs_get_focus_new_windows ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_force_fullscreen")]
-		public static bool prefs_get_force_fullscreen ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_gnome_accessibility")]
-		public static bool prefs_get_gnome_accessibility ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_gnome_animations")]
-		public static bool prefs_get_gnome_animations ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_keybinding_action")]
-		public static Meta.KeyBindingAction prefs_get_keybinding_action (string name);
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_mouse_button_menu")]
-		public static int prefs_get_mouse_button_menu ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_mouse_button_mods")]
-		public static Meta.VirtualModifier prefs_get_mouse_button_mods ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_mouse_button_resize")]
-		public static int prefs_get_mouse_button_resize ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_num_workspaces")]
-		public static int prefs_get_num_workspaces ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_raise_on_click")]
-		public static bool prefs_get_raise_on_click ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_show_fallback_app_menu")]
-		public static bool prefs_get_show_fallback_app_menu ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_titlebar_font")]
-		public static unowned Pango.FontDescription prefs_get_titlebar_font ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_visual_bell")]
-		public static bool prefs_get_visual_bell ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_visual_bell_type")]
-		public static GDesktop.VisualBellType prefs_get_visual_bell_type ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_workspace_name")]
-		public static unowned string prefs_get_workspace_name (int i);
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_workspaces_only_on_primary")]
-		public static bool prefs_get_workspaces_only_on_primary ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_init")]
-		public static void prefs_init ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_set_force_fullscreen")]
-		public static void prefs_set_force_fullscreen (bool whether);
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_set_num_workspaces")]
-		public static void prefs_set_num_workspaces (int n_workspaces);
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_set_show_fallback_app_menu")]
-		public static void prefs_set_show_fallback_app_menu (bool whether);
-	}
-	namespace Util {
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_add_verbose_topic")]
-		public static void add_verbose_topic (Meta.DebugTopic topic);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_external_binding_name_for_action")]
-		public static string external_binding_name_for_action (uint keybinding_action);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_g_utf8_strndup")]
-		public static string g_utf8_strndup (string src, size_t n);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_get_locale_direction")]
-		public static Meta.LocaleDirection get_locale_direction ();
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_gravity_to_string")]
-		public static unowned string gravity_to_string (int gravity);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_is_debugging")]
-		public static bool is_debugging ();
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_is_syncing")]
-		public static bool is_syncing ();
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_is_verbose")]
-		public static bool is_verbose ();
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_is_wayland_compositor")]
-		public static bool is_wayland_compositor ();
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_later_add")]
-		public static uint later_add (Meta.LaterType when, owned GLib.SourceFunc func);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_later_remove")]
-		public static void later_remove (uint later_id);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_pop_no_msg_prefix")]
-		public static void pop_no_msg_prefix ();
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_push_no_msg_prefix")]
-		public static void push_no_msg_prefix ();
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_rect")]
-		public static Meta.Rectangle? rect (int x, int y, int width, int height);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_remove_verbose_topic")]
-		public static void remove_verbose_topic (Meta.DebugTopic topic);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_show_dialog")]
-		public static GLib.Pid show_dialog (string type, string message, string timeout, string display, string ok_text, string cancel_text, string icon_name, int transient_for, GLib.SList<void*> columns, GLib.SList<void*> entries);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_unsigned_long_equal")]
-		public static int unsigned_long_equal (void* v1, void* v2);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_unsigned_long_hash")]
-		public static uint unsigned_long_hash (void* v);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_x11_error_trap_pop")]
-		public static void x11_error_trap_pop (Meta.X11Display x11_display);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_x11_error_trap_pop_with_return")]
-		public static int x11_error_trap_pop_with_return (Meta.X11Display x11_display);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_x11_error_trap_push")]
-		public static void x11_error_trap_push (Meta.X11Display x11_display);
-	}
-	[CCode (cheader_filename = "meta/meta-backend.h", type_id = "meta_backend_get_type ()")]
-	public abstract class Backend : GLib.Object, GLib.Initable {
-		[CCode (has_construct_function = false)]
-		protected Backend ();
-		[CCode (cheader_filename = "meta/meta-backend.h", cname = "meta_get_backend")]
-		public static unowned Meta.Backend get_backend ();
-		public unowned Meta.Dnd get_dnd ();
-		public unowned Meta.RemoteAccessController get_remote_access_controller ();
-		public unowned Clutter.Actor get_stage ();
-		public void lock_layout_group (uint idx);
-		public void set_keymap (string layouts, string variants, string options);
-		public void set_numlock (bool numlock_state);
-		public signal void keymap_changed ();
-		public signal void keymap_layout_group_changed (uint object);
-		public signal void last_device_changed (int object);
-		public signal void lid_is_closed_changed (bool object);
-	}
-	[CCode (cheader_filename = "meta/meta-background.h", type_id = "meta_background_get_type ()")]
-	public class Background : GLib.Object {
-		[CCode (has_construct_function = false)]
-		public Background (Meta.Display display);
-		public static void refresh_all ();
-		public void set_blend (GLib.File file1, GLib.File file2, double blend_factor, GDesktop.BackgroundStyle style);
-		public void set_color (Clutter.Color color);
-		public void set_file (GLib.File file, GDesktop.BackgroundStyle style);
-		public void set_gradient (GDesktop.BackgroundShading shading_direction, Clutter.Color color, Clutter.Color second_color);
-		[NoAccessorMethod]
-		public Meta.Display meta_display { owned get; construct; }
-		public signal void changed ();
-	}
-	[CCode (cheader_filename = "meta/meta-background-actor.h", type_id = "meta_background_actor_get_type ()")]
-	public class BackgroundActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		public BackgroundActor (Meta.Display display, int monitor);
-		public void set_background (Meta.Background background);
-		public void set_gradient (bool enabled, int height, double tone_start);
-		public void set_monitor (int monitor);
-		public void set_vignette (bool enabled, double brightness, double sharpness);
-		[NoAccessorMethod]
-		public Meta.Background background { owned get; set; }
-		[NoAccessorMethod]
-		public double brightness { get; set; }
-		[NoAccessorMethod]
-		public bool gradient { get; set; }
-		[NoAccessorMethod]
-		public int gradient_height { get; set; }
-		[NoAccessorMethod]
-		public double gradient_max_darkness { get; set; }
-		[NoAccessorMethod]
-		public Meta.Display meta_display { owned get; construct; }
-		[NoAccessorMethod]
-		public int monitor { get; construct; }
-		[NoAccessorMethod]
-		public bool vignette { get; set; }
-		[NoAccessorMethod]
-		public double vignette_sharpness { get; set; }
-	}
-	[CCode (cheader_filename = "meta/meta-background-group.h", type_id = "meta_background_group_get_type ()")]
-	public class BackgroundGroup : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		public BackgroundGroup ();
-	}
-	[CCode (cheader_filename = "meta/meta-background-image.h", type_id = "meta_background_image_get_type ()")]
-	public class BackgroundImage : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected BackgroundImage ();
-		public bool get_success ();
-		public unowned Cogl.Texture get_texture ();
-		public bool is_loaded ();
-		public signal void loaded ();
-	}
-	[CCode (cheader_filename = "meta/meta-background-image.h", type_id = "meta_background_image_cache_get_type ()")]
-	public class BackgroundImageCache : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected BackgroundImageCache ();
-		public static unowned Meta.BackgroundImageCache get_default ();
-		public Meta.BackgroundImage load (GLib.File file);
-		public void purge (GLib.File file);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_barrier_get_type ()")]
-	public class Barrier : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Barrier ();
-		public void destroy ();
-		public bool is_active ();
-		public void release (Meta.BarrierEvent event);
-		[NoAccessorMethod]
-		public Meta.BarrierDirection directions { get; construct; }
-		[NoAccessorMethod]
-		public Meta.Display display { owned get; construct; }
-		[NoAccessorMethod]
-		public int x1 { get; construct; }
-		[NoAccessorMethod]
-		public int x2 { get; construct; }
-		[NoAccessorMethod]
-		public int y1 { get; construct; }
-		[NoAccessorMethod]
-		public int y2 { get; construct; }
-		public signal void hit (Meta.BarrierEvent event);
-		public signal void left (Meta.BarrierEvent event);
-	}
-	[CCode (cheader_filename = "meta/barrier.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "meta_barrier_event_get_type ()")]
-	[Compact]
-	public class BarrierEvent {
-		public int dt;
-		public double dx;
-		public double dy;
-		public int event_id;
-		public bool grabbed;
-		public bool released;
-		public uint32 time;
-		public double x;
-		public double y;
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_cursor_tracker_get_type ()")]
-	public class CursorTracker : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected CursorTracker ();
-		public static unowned Meta.CursorTracker get_for_display (Meta.Display display);
-		public void get_hot (out int x, out int y);
-		public void get_pointer (int x, int y, Clutter.ModifierType mods);
-		public unowned Cogl.Texture get_sprite ();
-		public void set_pointer_visible (bool visible);
-		public signal void cursor_changed ();
-		public signal void cursor_moved (float object, float p0);
-	}
-	[CCode (cheader_filename = "meta/display.h", type_id = "meta_display_get_type ()")]
-	public class Display : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Display ();
-		public void add_ignored_crossing_serial (ulong serial);
-		public uint add_keybinding (string name, GLib.Settings settings, Meta.KeyBindingFlags flags, owned Meta.KeyHandlerFunc handler);
-		public bool begin_grab_op (Meta.Window window, Meta.GrabOp op, bool pointer_already_grabbed, bool frame_action, int button, ulong modmask, uint32 timestamp, int root_x, int root_y);
-		public void clear_mouse_mode ();
-		public void close (uint32 timestamp);
-		public void end_grab_op (uint32 timestamp);
-		public void focus_default_window (uint32 timestamp);
-		public void freeze_keyboard (uint32 timestamp);
-		public int get_current_monitor ();
-		public uint32 get_current_time ();
-		public uint32 get_current_time_roundtrip ();
-		public unowned Meta.Window get_focus_window ();
-		public Meta.GrabOp get_grab_op ();
-		public uint get_keybinding_action (uint keycode, ulong mask);
-		public uint32 get_last_user_time ();
-		public Meta.Rectangle get_monitor_geometry (int monitor);
-		public bool get_monitor_in_fullscreen (int monitor);
-		public int get_monitor_index_for_rect (Meta.Rectangle rect);
-		public int get_monitor_neighbor_index (int which_monitor, Meta.DisplayDirection dir);
-		public int get_n_monitors ();
-		public string get_pad_action_label (Clutter.InputDevice pad, Meta.PadActionType action_type, uint action_number);
-		public int get_primary_monitor ();
-		public void get_size (out int width, out int height);
-		public unowned Meta.SoundPlayer get_sound_player ();
-		public unowned Meta.Window get_tab_current (Meta.TabList type, Meta.Workspace workspace);
-		public GLib.List<weak Meta.Window> get_tab_list (Meta.TabList type, Meta.Workspace? workspace);
-		public unowned Meta.Window get_tab_next (Meta.TabList type, Meta.Workspace workspace, Meta.Window? window, bool backward);
-		public unowned Meta.WorkspaceManager get_workspace_manager ();
-		public uint grab_accelerator (string accelerator, Meta.KeyBindingFlags flags);
-		public bool is_pointer_emulating_sequence (Clutter.EventSequence? sequence);
-		public bool remove_keybinding (string name);
-		public void request_pad_osd (Clutter.InputDevice pad, bool edition_mode);
-		public void set_cursor (Meta.Cursor cursor);
-		public GLib.SList<weak Meta.Window> sort_windows_by_stacking (GLib.SList<Meta.Window> windows);
-		public bool supports_extended_barriers ();
-		public void unfreeze_keyboard (uint32 timestamp);
-		public bool ungrab_accelerator (uint action_id);
-		public void ungrab_keyboard (uint32 timestamp);
-		public bool xserver_time_is_before (uint32 time1, uint32 time2);
-		public Meta.Window focus_window { get; }
-		public signal void accelerator_activated (uint object, uint p0, uint p1);
-		public signal void cursor_updated ();
-		public signal void gl_video_memory_purged ();
-		public signal void grab_op_begin (Meta.Display object, Meta.Window p0, Meta.GrabOp p1);
-		public signal void grab_op_end (Meta.Display object, Meta.Window p0, Meta.GrabOp p1);
-		public signal void in_fullscreen_changed ();
-		public signal bool modifiers_accelerator_activated ();
-		public signal void overlay_key ();
-		public signal void pad_mode_switch (Clutter.InputDevice object, uint p0, uint p1);
-		public signal void restacked ();
-		public signal bool restart ();
-		public signal void show_osd (int object, string p0, string p1);
-		public signal unowned Clutter.Actor? show_pad_osd (Clutter.InputDevice pad, GLib.Settings settings, string layout_path, bool edition_mode, int monitor_idx);
-		public signal bool show_resize_popup (bool object, Meta.Rectangle p0, int p1, int p2);
-		public signal bool show_restart_message (string? message);
-		public signal void showing_desktop_changed ();
-		public signal void window_created (Meta.Window object);
-		public signal void window_demands_attention (Meta.Window object);
-		public signal void window_entered_monitor (int object, Meta.Window p0);
-		public signal void window_left_monitor (int object, Meta.Window p0);
-		public signal void window_marked_urgent (Meta.Window object);
-		public signal void workareas_changed ();
-		public signal void x11_display_closing ();
-		public signal void x11_display_opened ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_dnd_get_type ()")]
-	public class Dnd : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Dnd ();
-		public signal void dnd_enter ();
-		public signal void dnd_leave ();
-		public signal void dnd_position_change (int object, int p0);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", has_type_id = false)]
-	[Compact]
-	public class Frame {
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_idle_monitor_get_type ()")]
-	public class IdleMonitor : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected IdleMonitor ();
-		public uint add_idle_watch (uint64 interval_msec, owned Meta.IdleMonitorWatchFunc? callback);
-		public uint add_user_active_watch (owned Meta.IdleMonitorWatchFunc? callback);
-		public static unowned Meta.IdleMonitor get_core ();
-		public static unowned Meta.IdleMonitor get_for_device (int device_id);
-		public int64 get_idletime ();
-		public void remove_watch (uint id);
-		[NoAccessorMethod]
-		public int device_id { get; construct; }
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "meta_key_binding_get_type ()")]
-	[Compact]
-	public class KeyBinding {
-		public uint get_mask ();
-		public Meta.VirtualModifier get_modifiers ();
-		public unowned string get_name ();
-		public bool is_builtin ();
-		public bool is_reversed ();
-		[CCode (cname = "meta_keybindings_set_custom_handler")]
-		public static bool set_custom_handler (string name, owned Meta.KeyHandlerFunc? handler);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_launch_context_get_type ()")]
-	public class LaunchContext : GLib.AppLaunchContext {
-		[CCode (has_construct_function = false)]
-		protected LaunchContext ();
-		public void set_timestamp (uint32 timestamp);
-		public void set_workspace (Meta.Workspace workspace);
-		[NoAccessorMethod]
-		public Meta.Display display { owned get; construct; }
-		[NoAccessorMethod]
-		public uint timestamp { get; set; }
-		[NoAccessorMethod]
-		public Meta.Workspace workspace { owned get; set; }
-	}
-	[CCode (cheader_filename = "meta/meta-monitor-manager.h", type_id = "meta_monitor_manager_get_type ()")]
-	public class MonitorManager : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected MonitorManager ();
-		public bool can_switch_config ();
-		public static unowned Meta.MonitorManager @get ();
-		public static int get_display_configuration_timeout ();
-		public bool get_is_builtin_display_on ();
-		public int get_monitor_for_connector (string connector);
-		public Meta.MonitorSwitchConfigType get_switch_config ();
-		public void switch_config (Meta.MonitorSwitchConfigType config_type);
-		[NoAccessorMethod]
-		public Meta.Backend backend { owned get; construct; }
-		public signal void confirm_display_change ();
-		public signal void monitors_changed ();
-		public signal void monitors_changed_internal ();
-		public signal void power_save_mode_changed ();
-	}
-	[CCode (cheader_filename = "meta/meta-plugin.h", type_id = "meta_plugin_get_type ()")]
-	public abstract class Plugin : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Plugin ();
-		public bool begin_modal (Meta.ModalOptions options, uint32 timestamp);
-		public void complete_display_change (bool ok);
-		[NoWrapper]
-		public virtual void confirm_display_change ();
-		[NoWrapper]
-		public virtual void destroy (Meta.WindowActor actor);
-		public void destroy_completed (Meta.WindowActor actor);
-		public void end_modal (uint32 timestamp);
-		public unowned Meta.Display get_display ();
-		public unowned Meta.PluginInfo? get_info ();
-		[NoWrapper]
-		public virtual void hide_tile_preview ();
-		[NoWrapper]
-		public virtual bool keybinding_filter (Meta.KeyBinding binding);
-		[NoWrapper]
-		public virtual void kill_switch_workspace ();
-		[NoWrapper]
-		public virtual void kill_window_effects (Meta.WindowActor actor);
-		public static void manager_set_plugin_type (GLib.Type gtype);
-		[NoWrapper]
-		public virtual void map (Meta.WindowActor actor);
-		public void map_completed (Meta.WindowActor actor);
-		[NoWrapper]
-		public virtual void minimize (Meta.WindowActor actor);
-		public void minimize_completed (Meta.WindowActor actor);
-		[NoWrapper]
-		public virtual unowned Meta.PluginInfo? plugin_info ();
-		[NoWrapper]
-		public virtual void show_tile_preview (Meta.Window window, Meta.Rectangle tile_rect, int tile_monitor_number);
-		[NoWrapper]
-		public virtual void show_window_menu (Meta.Window window, Meta.WindowMenuType menu, int x, int y);
-		[NoWrapper]
-		public virtual void show_window_menu_for_rect (Meta.Window window, Meta.WindowMenuType menu, Meta.Rectangle rect);
-		[NoWrapper]
-		public virtual void size_change (Meta.WindowActor actor, Meta.SizeChange which_change, Meta.Rectangle old_frame_rect, Meta.Rectangle old_buffer_rect);
-		public void size_change_completed (Meta.WindowActor actor);
-		[NoWrapper]
-		public virtual void size_changed (Meta.WindowActor actor);
-		[NoWrapper]
-		public virtual void start ();
-		[NoWrapper]
-		public virtual void switch_workspace (int from, int to, Meta.MotionDirection direction);
-		public void switch_workspace_completed ();
-		[NoWrapper]
-		public virtual void unminimize (Meta.WindowActor actor);
-		public void unminimize_completed (Meta.WindowActor actor);
-		[NoWrapper]
-		public virtual bool xevent_filter (X.Event event);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_remote_access_controller_get_type ()")]
-	public class RemoteAccessController : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected RemoteAccessController ();
-		public signal void new_handle (Meta.RemoteAccessHandle object);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_remote_access_handle_get_type ()")]
-	public class RemoteAccessHandle : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected RemoteAccessHandle ();
-		public virtual void stop ();
-		public signal void stopped ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", has_type_id = false)]
-	[Compact]
-	public class Settings {
-		public int get_font_dpi ();
-		public int get_ui_scaling_factor ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", ref_function = "meta_shadow_ref", type_id = "meta_shadow_get_type ()", unref_function = "meta_shadow_unref")]
-	[Compact]
-	public class Shadow {
-		public void get_bounds (int window_x, int window_y, int window_width, int window_height, Cairo.RectangleInt bounds);
-		public void paint (Cogl.Framebuffer framebuffer, int window_x, int window_y, int window_width, int window_height, uint8 opacity, Cairo.Region? clip, bool clip_strictly);
-		public Meta.Shadow @ref ();
-		public void unref ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_shadow_factory_get_type ()")]
-	public class ShadowFactory : GLib.Object {
-		[CCode (has_construct_function = false)]
-		public ShadowFactory ();
-		public static unowned Meta.ShadowFactory get_default ();
-		public Meta.ShadowParams get_params (string class_name, bool focused);
-		public Meta.Shadow get_shadow (Meta.WindowShape shape, int width, int height, string class_name, bool focused);
-		public void set_params (string class_name, bool focused, Meta.ShadowParams @params);
-		public signal void changed ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_shaped_texture_get_type ()")]
-	public class ShapedTexture : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		protected ShapedTexture ();
-		public Cairo.Surface get_image (Cairo.RectangleInt clip);
-		public unowned Cogl.Texture get_texture ();
-		public void set_create_mipmaps (bool create_mipmaps);
-		public void set_mask_texture (Cogl.Texture mask_texture);
-		public void set_opaque_region (owned Cairo.Region opaque_region);
-		public bool update_area (int x, int y, int width, int height);
-		public signal void size_changed ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_sound_player_get_type ()")]
-	public class SoundPlayer : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected SoundPlayer ();
-		public void play_from_file (GLib.File file, string description, GLib.Cancellable? cancellable = null);
-		public void play_from_theme (string name, string description, GLib.Cancellable? cancellable = null);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_stage_get_type ()")]
-	public class Stage : Clutter.Stage, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		protected Stage ();
-		public static bool is_focused (Meta.Display display);
-		public signal void actors_painted ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_startup_notification_get_type ()")]
-	public class StartupNotification : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected StartupNotification ();
-		public Meta.LaunchContext create_launcher ();
-		[NoAccessorMethod]
-		public Meta.Display display { owned get; construct; }
-		public signal void changed (void* object);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_startup_sequence_get_type ()")]
-	public class StartupSequence : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected StartupSequence ();
-		public void complete ();
-		public unowned string get_application_id ();
-		public bool get_completed ();
-		public unowned string get_icon_name ();
-		public unowned string get_id ();
-		public unowned string get_name ();
-		public uint64 get_timestamp ();
-		public unowned string get_wmclass ();
-		public int get_workspace ();
-		public string application_id { get; construct; }
-		public string icon_name { get; construct; }
-		public string id { get; construct; }
-		public string name { get; construct; }
-		public uint64 timestamp { get; construct; }
-		public string wmclass { get; construct; }
-		public int workspace { get; construct; }
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", has_type_id = false)]
-	[Compact]
-	public class Theme {
-		public void free ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_window_get_type ()")]
-	public abstract class Window : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Window ();
-		public void activate (uint32 current_time);
-		public void activate_with_workspace (uint32 current_time, Meta.Workspace workspace);
-		public bool allows_move ();
-		public bool allows_resize ();
-		public void begin_grab_op (Meta.GrabOp op, bool frame_action, uint32 timestamp);
-		public bool can_close ();
-		public bool can_maximize ();
-		public bool can_minimize ();
-		public bool can_shade ();
-		public void change_workspace (Meta.Workspace workspace);
-		public void change_workspace_by_index (int space_index, bool append);
-		public void check_alive (uint32 timestamp);
-		public Meta.Rectangle client_rect_to_frame_rect (Meta.Rectangle client_rect);
-		public void compute_group ();
-		public void @delete (uint32 timestamp);
-		public unowned Meta.Window find_root_ancestor ();
-		public void focus (uint32 timestamp);
-		public void foreach_ancestor (Meta.WindowForeachFunc func);
-		public void foreach_transient (Meta.WindowForeachFunc func);
-		public Meta.Rectangle frame_rect_to_client_rect (Meta.Rectangle frame_rect);
-		public Meta.Rectangle get_buffer_rect ();
-		public unowned string get_client_machine ();
-		public Meta.WindowClientType get_client_type ();
-		public unowned GLib.Object get_compositor_private ();
-		public unowned string get_description ();
-		public unowned Meta.Display get_display ();
-		public unowned Cairo.Region? get_frame_bounds ();
-		public Meta.Rectangle get_frame_rect ();
-		public Meta.FrameType get_frame_type ();
-		public unowned string get_gtk_app_menu_object_path ();
-		public unowned string get_gtk_application_id ();
-		public unowned string get_gtk_application_object_path ();
-		public unowned string get_gtk_menubar_object_path ();
-		public unowned string get_gtk_theme_variant ();
-		public unowned string get_gtk_unique_bus_name ();
-		public unowned string get_gtk_window_object_path ();
-		public bool get_icon_geometry (out Meta.Rectangle rect);
-		public uint64 get_id ();
-		public Meta.StackLayer get_layer ();
-		public Meta.MaximizeFlags get_maximized ();
-		public int get_monitor ();
-		public unowned string get_mutter_hints ();
-		public int get_pid ();
-		public unowned string get_role ();
-		public unowned string get_sandboxed_app_id ();
-		public uint get_stable_sequence ();
-		public unowned string get_startup_id ();
-		public unowned Meta.Window? get_tile_match ();
-		public unowned string get_title ();
-		public unowned Meta.Window get_transient_for ();
-		public uint32 get_user_time ();
-		public Meta.WindowType get_window_type ();
-		public unowned string get_wm_class ();
-		public unowned string get_wm_class_instance ();
-		public Meta.Rectangle get_work_area_all_monitors ();
-		public Meta.Rectangle get_work_area_current_monitor ();
-		public Meta.Rectangle get_work_area_for_monitor (int which_monitor);
-		public unowned Meta.Workspace get_workspace ();
-		public X.Window get_xwindow ();
-		public void group_leader_changed ();
-		public bool has_focus ();
-		public bool is_above ();
-		public bool is_always_on_all_workspaces ();
-		public bool is_ancestor_of_transient (Meta.Window transient);
-		public bool is_attached_dialog ();
-		public bool is_client_decorated ();
-		public bool is_fullscreen ();
-		public bool is_hidden ();
-		public bool is_monitor_sized ();
-		public bool is_on_all_workspaces ();
-		public bool is_on_primary_monitor ();
-		public bool is_override_redirect ();
-		public bool is_remote ();
-		public bool is_screen_sized ();
-		public bool is_shaded ();
-		public bool is_skip_taskbar ();
-		public void kill ();
-		public bool located_on_workspace (Meta.Workspace workspace);
-		public void lower ();
-		public void make_above ();
-		public void make_fullscreen ();
-		public void maximize (Meta.MaximizeFlags directions);
-		public void minimize ();
-		public void move_frame (bool user_op, int root_x_nw, int root_y_nw);
-		public void move_resize_frame (bool user_op, int root_x_nw, int root_y_nw, int w, int h);
-		public void move_to_monitor (int monitor);
-		public void raise ();
-		public bool requested_bypass_compositor ();
-		public bool requested_dont_bypass_compositor ();
-		public void set_compositor_private (GLib.Object priv);
-		public void set_demands_attention ();
-		public void set_icon_geometry (Meta.Rectangle? rect);
-		public void shade (uint32 timestamp);
-		public void shove_titlebar_onscreen ();
-		public bool showing_on_its_workspace ();
-		public void shutdown_group ();
-		public void stick ();
-		public bool titlebar_is_onscreen ();
-		public void unmake_above ();
-		public void unmake_fullscreen ();
-		public void unmaximize (Meta.MaximizeFlags directions);
-		public void unminimize ();
-		public void unset_demands_attention ();
-		public void unshade (uint32 timestamp);
-		public void unstick ();
-		[NoAccessorMethod]
-		public bool above { get; }
-		[NoAccessorMethod]
-		public bool appears_focused { get; }
-		[NoAccessorMethod]
-		public bool decorated { get; }
-		[NoAccessorMethod]
-		public bool demands_attention { get; }
-		[NoAccessorMethod]
-		public bool fullscreen { get; }
-		public string gtk_app_menu_object_path { get; }
-		public string gtk_application_id { get; }
-		public string gtk_application_object_path { get; }
-		public string gtk_menubar_object_path { get; }
-		public string gtk_unique_bus_name { get; }
-		public string gtk_window_object_path { get; }
-		[NoAccessorMethod]
-		public void* icon { get; }
-		[NoAccessorMethod]
-		public bool maximized_horizontally { get; }
-		[NoAccessorMethod]
-		public bool maximized_vertically { get; }
-		[NoAccessorMethod]
-		public void* mini_icon { get; }
-		[NoAccessorMethod]
-		public bool minimized { get; }
-		public string mutter_hints { get; }
-		[NoAccessorMethod]
-		public bool on_all_workspaces { get; }
-		[NoAccessorMethod]
-		public bool resizeable { get; }
-		[NoAccessorMethod]
-		public bool skip_taskbar { get; }
-		public string title { get; }
-		[NoAccessorMethod]
-		public bool urgent { get; }
-		public uint user_time { get; }
-		public Meta.WindowType window_type { get; }
-		public string wm_class { get; }
-		public signal void position_changed ();
-		public signal void raised ();
-		public signal void shown ();
-		public signal void size_changed ();
-		public signal void unmanaged ();
-		public signal void workspace_changed ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_window_actor_get_type ()")]
-	public abstract class WindowActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		protected WindowActor ();
-		public unowned Meta.Window get_meta_window ();
-		public unowned Clutter.Actor get_texture ();
-		public X.Window get_x_window ();
-		public bool is_destroyed ();
-		public void sync_visibility ();
-		public Meta.Window meta_window { get; construct; }
-		[NoAccessorMethod]
-		public string shadow_class { owned get; set; }
-		[NoAccessorMethod]
-		public Meta.ShadowMode shadow_mode { get; set; }
-		public signal void effects_completed ();
-		public signal void first_frame ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_window_group_get_type ()")]
-	public class WindowGroup : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		protected WindowGroup ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", ref_function = "meta_window_shape_ref", type_id = "meta_window_shape_get_type ()", unref_function = "meta_window_shape_unref")]
-	[Compact]
-	public class WindowShape {
-		[CCode (has_construct_function = false)]
-		public WindowShape (Cairo.Region region);
-		public bool equal (Meta.WindowShape shape_b);
-		public void get_borders (int border_top, int border_right, int border_bottom, int border_left);
-		public uint hash ();
-		public Meta.WindowShape @ref ();
-		public Cairo.Region to_region (int center_width, int center_height);
-		public void unref ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_workspace_get_type ()")]
-	public class Workspace : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected Workspace ();
-		public void activate (uint32 timestamp);
-		public void activate_with_focus (Meta.Window focus_this, uint32 timestamp);
-		public unowned Meta.Display get_display ();
-		public unowned Meta.Workspace get_neighbor (Meta.MotionDirection direction);
-		public Meta.Rectangle get_work_area_all_monitors ();
-		public Meta.Rectangle get_work_area_for_monitor (int which_monitor);
-		public int index ();
-		public GLib.List<weak Meta.Window> list_windows ();
-		public void set_builtin_struts (GLib.SList<Meta.Strut?> struts);
-		[NoAccessorMethod]
-		public uint n_windows { get; }
-		[NoAccessorMethod]
-		public uint workspace_index { get; }
-		public signal void window_added (Meta.Window object);
-		public signal void window_removed (Meta.Window object);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_workspace_manager_get_type ()")]
-	public class WorkspaceManager : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected WorkspaceManager ();
-		public unowned Meta.Workspace append_new_workspace (bool activate, uint32 timestamp);
-		public unowned Meta.Workspace get_active_workspace ();
-		public int get_active_workspace_index ();
-		public int get_n_workspaces ();
-		public unowned Meta.Workspace get_workspace_by_index (int index);
-		public void override_workspace_layout (Meta.DisplayCorner starting_corner, bool vertical_layout, int n_rows, int n_columns);
-		public void remove_workspace (Meta.Workspace workspace, uint32 timestamp);
-		public int n_workspaces { get; }
-		public signal void active_workspace_changed ();
-		public signal void showing_desktop_changed ();
-		public signal void workspace_added (int object);
-		public signal void workspace_removed (int object);
-		public signal void workspace_switched (int object, int p0, Meta.MotionDirection p1);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_x11_display_get_type ()")]
-	public class X11Display : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected X11Display ();
-		public void focus_the_no_focus_window (uint32 timestamp);
-		public int get_damage_event_base ();
-		public int get_screen_number ();
-		public int get_shape_event_base ();
-		public bool has_shape ();
-		public void set_cm_selection ();
-		public void set_input_focus_window (Meta.Window window, bool focus_frame, uint32 timestamp);
-		public bool xwindow_is_a_no_focus_window (X.Window xwindow);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_cname = "MetaCloseDialogInterface", type_id = "meta_close_dialog_get_type ()")]
-	public interface CloseDialog : GLib.Object {
-		public abstract void focus ();
-		public abstract void hide ();
-		public bool is_visible ();
-		public abstract void show ();
-		[NoAccessorMethod]
-		public abstract Meta.Window window { owned get; construct; }
-		[HasEmitter]
-		public signal void response (Meta.CloseDialogResponse response);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_cname = "MetaInhibitShortcutsDialogInterface", type_id = "meta_inhibit_shortcuts_dialog_get_type ()")]
-	public interface InhibitShortcutsDialog : GLib.Object {
-		public abstract void hide ();
-		public abstract void show ();
-		[NoAccessorMethod]
-		public abstract Meta.Window window { owned get; construct; }
-		[HasEmitter]
-		public signal void response (Meta.InhibitShortcutsDialogResponse response);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", has_type_id = false)]
-	public struct ButtonLayout {
-		[CCode (array_length = false)]
-		public weak Meta.ButtonFunction left_buttons[4];
-		[CCode (array_length = false)]
-		public weak bool left_buttons_has_spacer[4];
-		[CCode (array_length = false)]
-		public weak Meta.ButtonFunction right_buttons[4];
-		[CCode (array_length = false)]
-		public weak bool right_buttons_has_spacer[4];
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", has_type_id = false)]
-	public struct Edge {
-		public Meta.Rectangle rect;
-		public Meta.Side side_type;
-		public Meta.EdgeType edge_type;
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", has_type_id = false)]
-	public struct FrameBorders {
-		public Gtk.Border visible;
-		public Gtk.Border invisible;
-		public Gtk.Border total;
-		public void clear ();
-	}
-	[CCode (cheader_filename = "meta/meta-plugin.h", has_type_id = false)]
-	public struct PluginInfo {
-		public weak string name;
-		public weak string version;
-		public weak string author;
-		public weak string license;
-		public weak string description;
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", has_type_id = false)]
-	public struct PluginVersion {
-		public uint version_major;
-		public uint version_minor;
-		public uint version_micro;
-		public uint version_api;
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", type_id = "meta_rectangle_get_type ()")]
-	public struct Rectangle {
-		public int x;
-		public int y;
-		public int width;
-		public int height;
-		public int area ();
-		public bool contains_rect (Meta.Rectangle inner_rect);
-		public Meta.Rectangle? copy ();
-		public bool could_fit_rect (Meta.Rectangle inner_rect);
-		public bool equal (Meta.Rectangle src2);
-		public void free ();
-		public bool horiz_overlap (Meta.Rectangle rect2);
-		public bool intersect (Meta.Rectangle src2, out Meta.Rectangle dest);
-		public bool overlap (Meta.Rectangle rect2);
-		public Meta.Rectangle union (Meta.Rectangle rect2);
-		public bool vert_overlap (Meta.Rectangle rect2);
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", has_type_id = false)]
-	public struct ShadowParams {
-		public int radius;
-		public int top_fade;
-		public int x_offset;
-		public int y_offset;
-		public uint8 opacity;
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", has_type_id = false)]
-	public struct Strut {
-		public Meta.Rectangle rect;
-		public Meta.Side side;
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_BARRIER_DIRECTION_", type_id = "meta_barrier_direction_get_type ()")]
-	[Flags]
-	public enum BarrierDirection {
-		POSITIVE_X,
-		POSITIVE_Y,
-		NEGATIVE_X,
-		NEGATIVE_Y
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_BUTTON_FUNCTION_", type_id = "meta_button_function_get_type ()")]
-	public enum ButtonFunction {
-		MENU,
-		MINIMIZE,
-		MAXIMIZE,
-		CLOSE,
-		LAST
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_CLOSE_DIALOG_RESPONSE_", type_id = "meta_close_dialog_response_get_type ()")]
-	public enum CloseDialogResponse {
-		WAIT,
-		FORCE_CLOSE
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_COMP_EFFECT_", type_id = "meta_comp_effect_get_type ()")]
-	public enum CompEffect {
-		CREATE,
-		UNMINIMIZE,
-		DESTROY,
-		MINIMIZE,
-		NONE
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_CURSOR_", type_id = "meta_cursor_get_type ()")]
-	public enum Cursor {
-		NONE,
-		DEFAULT,
-		NORTH_RESIZE,
-		SOUTH_RESIZE,
-		WEST_RESIZE,
-		EAST_RESIZE,
-		SE_RESIZE,
-		SW_RESIZE,
-		NE_RESIZE,
-		NW_RESIZE,
-		MOVE_OR_RESIZE_WINDOW,
-		BUSY,
-		DND_IN_DRAG,
-		DND_MOVE,
-		DND_COPY,
-		DND_UNSUPPORTED_TARGET,
-		POINTING_HAND,
-		CROSSHAIR,
-		IBEAM,
-		LAST
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_DEBUG_", type_id = "meta_debug_topic_get_type ()")]
-	[Flags]
-	public enum DebugTopic {
-		VERBOSE,
-		FOCUS,
-		WORKAREA,
-		STACK,
-		THEMES,
-		SM,
-		EVENTS,
-		WINDOW_STATE,
-		WINDOW_OPS,
-		GEOMETRY,
-		PLACEMENT,
-		PING,
-		XINERAMA,
-		KEYBINDINGS,
-		SYNC,
-		ERRORS,
-		STARTUP,
-		PREFS,
-		GROUPS,
-		RESIZING,
-		SHAPES,
-		COMPOSITOR,
-		EDGE_RESISTANCE,
-		DBUS
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_DIRECTION_", type_id = "meta_direction_get_type ()")]
-	[Flags]
-	public enum Direction {
-		LEFT,
-		RIGHT,
-		TOP,
-		BOTTOM,
-		UP,
-		DOWN,
-		HORIZONTAL,
-		VERTICAL
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_DISPLAY_", type_id = "meta_display_corner_get_type ()")]
-	public enum DisplayCorner {
-		TOPLEFT,
-		TOPRIGHT,
-		BOTTOMLEFT,
-		BOTTOMRIGHT
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_DISPLAY_", type_id = "meta_display_direction_get_type ()")]
-	public enum DisplayDirection {
-		UP,
-		DOWN,
-		LEFT,
-		RIGHT
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_EDGE_", type_id = "meta_edge_type_get_type ()")]
-	public enum EdgeType {
-		WINDOW,
-		MONITOR,
-		SCREEN
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_EXIT_", type_id = "meta_exit_code_get_type ()")]
-	public enum ExitCode {
-		SUCCESS,
-		ERROR
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_FRAME_", type_id = "meta_frame_flags_get_type ()")]
-	[Flags]
-	public enum FrameFlags {
-		ALLOWS_DELETE,
-		ALLOWS_MENU,
-		ALLOWS_MINIMIZE,
-		ALLOWS_MAXIMIZE,
-		ALLOWS_VERTICAL_RESIZE,
-		ALLOWS_HORIZONTAL_RESIZE,
-		HAS_FOCUS,
-		SHADED,
-		STUCK,
-		MAXIMIZED,
-		ALLOWS_SHADE,
-		ALLOWS_MOVE,
-		FULLSCREEN,
-		IS_FLASHING,
-		ABOVE,
-		TILED_LEFT,
-		TILED_RIGHT
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_FRAME_TYPE_", type_id = "meta_frame_type_get_type ()")]
-	public enum FrameType {
-		NORMAL,
-		DIALOG,
-		MODAL_DIALOG,
-		UTILITY,
-		MENU,
-		BORDER,
-		ATTACHED,
-		LAST;
-		public unowned string to_string ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_GRAB_OP_", type_id = "meta_grab_op_get_type ()")]
-	public enum GrabOp {
-		NONE,
-		WINDOW_BASE,
-		COMPOSITOR,
-		WAYLAND_POPUP,
-		FRAME_BUTTON,
-		MOVING,
-		RESIZING_NW,
-		RESIZING_N,
-		RESIZING_NE,
-		RESIZING_E,
-		RESIZING_SW,
-		RESIZING_S,
-		RESIZING_SE,
-		RESIZING_W,
-		KEYBOARD_MOVING,
-		KEYBOARD_RESIZING_UNKNOWN,
-		KEYBOARD_RESIZING_NW,
-		KEYBOARD_RESIZING_N,
-		KEYBOARD_RESIZING_NE,
-		KEYBOARD_RESIZING_E,
-		KEYBOARD_RESIZING_SW,
-		KEYBOARD_RESIZING_S,
-		KEYBOARD_RESIZING_SE,
-		KEYBOARD_RESIZING_W
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_INHIBIT_SHORTCUTS_DIALOG_RESPONSE_", type_id = "meta_inhibit_shortcuts_dialog_response_get_type ()")]
-	public enum InhibitShortcutsDialogResponse {
-		ALLOW,
-		DENY
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_KEYBINDING_ACTION_", type_id = "meta_key_binding_action_get_type ()")]
-	public enum KeyBindingAction {
-		NONE,
-		WORKSPACE_1,
-		WORKSPACE_2,
-		WORKSPACE_3,
-		WORKSPACE_4,
-		WORKSPACE_5,
-		WORKSPACE_6,
-		WORKSPACE_7,
-		WORKSPACE_8,
-		WORKSPACE_9,
-		WORKSPACE_10,
-		WORKSPACE_11,
-		WORKSPACE_12,
-		WORKSPACE_LEFT,
-		WORKSPACE_RIGHT,
-		WORKSPACE_UP,
-		WORKSPACE_DOWN,
-		WORKSPACE_LAST,
-		SWITCH_APPLICATIONS,
-		SWITCH_APPLICATIONS_BACKWARD,
-		SWITCH_GROUP,
-		SWITCH_GROUP_BACKWARD,
-		SWITCH_WINDOWS,
-		SWITCH_WINDOWS_BACKWARD,
-		SWITCH_PANELS,
-		SWITCH_PANELS_BACKWARD,
-		CYCLE_GROUP,
-		CYCLE_GROUP_BACKWARD,
-		CYCLE_WINDOWS,
-		CYCLE_WINDOWS_BACKWARD,
-		CYCLE_PANELS,
-		CYCLE_PANELS_BACKWARD,
-		SHOW_DESKTOP,
-		PANEL_MAIN_MENU,
-		PANEL_RUN_DIALOG,
-		TOGGLE_RECORDING,
-		SET_SPEW_MARK,
-		ACTIVATE_WINDOW_MENU,
-		TOGGLE_FULLSCREEN,
-		TOGGLE_MAXIMIZED,
-		TOGGLE_TILED_LEFT,
-		TOGGLE_TILED_RIGHT,
-		TOGGLE_ABOVE,
-		MAXIMIZE,
-		UNMAXIMIZE,
-		TOGGLE_SHADED,
-		MINIMIZE,
-		CLOSE,
-		BEGIN_MOVE,
-		BEGIN_RESIZE,
-		TOGGLE_ON_ALL_WORKSPACES,
-		MOVE_TO_WORKSPACE_1,
-		MOVE_TO_WORKSPACE_2,
-		MOVE_TO_WORKSPACE_3,
-		MOVE_TO_WORKSPACE_4,
-		MOVE_TO_WORKSPACE_5,
-		MOVE_TO_WORKSPACE_6,
-		MOVE_TO_WORKSPACE_7,
-		MOVE_TO_WORKSPACE_8,
-		MOVE_TO_WORKSPACE_9,
-		MOVE_TO_WORKSPACE_10,
-		MOVE_TO_WORKSPACE_11,
-		MOVE_TO_WORKSPACE_12,
-		MOVE_TO_WORKSPACE_LEFT,
-		MOVE_TO_WORKSPACE_RIGHT,
-		MOVE_TO_WORKSPACE_UP,
-		MOVE_TO_WORKSPACE_DOWN,
-		MOVE_TO_WORKSPACE_LAST,
-		MOVE_TO_MONITOR_LEFT,
-		MOVE_TO_MONITOR_RIGHT,
-		MOVE_TO_MONITOR_UP,
-		MOVE_TO_MONITOR_DOWN,
-		RAISE_OR_LOWER,
-		RAISE,
-		LOWER,
-		MAXIMIZE_VERTICALLY,
-		MAXIMIZE_HORIZONTALLY,
-		MOVE_TO_CORNER_NW,
-		MOVE_TO_CORNER_NE,
-		MOVE_TO_CORNER_SW,
-		MOVE_TO_CORNER_SE,
-		MOVE_TO_SIDE_N,
-		MOVE_TO_SIDE_S,
-		MOVE_TO_SIDE_E,
-		MOVE_TO_SIDE_W,
-		MOVE_TO_CENTER,
-		OVERLAY_KEY,
-		ISO_NEXT_GROUP,
-		ALWAYS_ON_TOP,
-		SWITCH_MONITOR,
-		ROTATE_MONITOR,
-		LAST
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_KEY_BINDING_", type_id = "meta_key_binding_flags_get_type ()")]
-	[Flags]
-	public enum KeyBindingFlags {
-		NONE,
-		PER_WINDOW,
-		BUILTIN,
-		IS_REVERSED,
-		NON_MASKABLE,
-		IGNORE_AUTOREPEAT
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_LATER_", type_id = "meta_later_type_get_type ()")]
-	public enum LaterType {
-		RESIZE,
-		CALC_SHOWING,
-		CHECK_FULLSCREEN,
-		SYNC_STACK,
-		BEFORE_REDRAW,
-		IDLE
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_LOCALE_DIRECTION_", type_id = "meta_locale_direction_get_type ()")]
-	public enum LocaleDirection {
-		LTR,
-		RTL
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_MAXIMIZE_", type_id = "meta_maximize_flags_get_type ()")]
-	[Flags]
-	public enum MaximizeFlags {
-		HORIZONTAL,
-		VERTICAL,
-		BOTH
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_MODAL_", type_id = "meta_modal_options_get_type ()")]
-	[Flags]
-	public enum ModalOptions {
-		POINTER_ALREADY_GRABBED,
-		KEYBOARD_ALREADY_GRABBED
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_MONITOR_SWITCH_CONFIG_", type_id = "meta_monitor_switch_config_type_get_type ()")]
-	public enum MonitorSwitchConfigType {
-		ALL_MIRROR,
-		ALL_LINEAR,
-		EXTERNAL,
-		BUILTIN,
-		UNKNOWN
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_MOTION_", type_id = "meta_motion_direction_get_type ()")]
-	public enum MotionDirection {
-		UP,
-		DOWN,
-		LEFT,
-		RIGHT,
-		UP_LEFT,
-		UP_RIGHT,
-		DOWN_LEFT,
-		DOWN_RIGHT
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_PAD_ACTION_", type_id = "meta_pad_action_type_get_type ()")]
-	public enum PadActionType {
-		BUTTON,
-		RING,
-		STRIP
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_PREF_", type_id = "meta_preference_get_type ()")]
-	public enum Preference {
-		MOUSE_BUTTON_MODS,
-		FOCUS_MODE,
-		FOCUS_NEW_WINDOWS,
-		ATTACH_MODAL_DIALOGS,
-		RAISE_ON_CLICK,
-		ACTION_DOUBLE_CLICK_TITLEBAR,
-		ACTION_MIDDLE_CLICK_TITLEBAR,
-		ACTION_RIGHT_CLICK_TITLEBAR,
-		AUTO_RAISE,
-		AUTO_RAISE_DELAY,
-		FOCUS_CHANGE_ON_POINTER_REST,
-		TITLEBAR_FONT,
-		NUM_WORKSPACES,
-		DYNAMIC_WORKSPACES,
-		KEYBINDINGS,
-		DISABLE_WORKAROUNDS,
-		BUTTON_LAYOUT,
-		WORKSPACE_NAMES,
-		VISUAL_BELL,
-		AUDIBLE_BELL,
-		VISUAL_BELL_TYPE,
-		GNOME_ACCESSIBILITY,
-		GNOME_ANIMATIONS,
-		CURSOR_THEME,
-		CURSOR_SIZE,
-		RESIZE_WITH_RIGHT_BUTTON,
-		EDGE_TILING,
-		FORCE_FULLSCREEN,
-		WORKSPACES_ONLY_ON_PRIMARY,
-		DRAGGABLE_BORDER_WIDTH,
-		AUTO_MAXIMIZE,
-		CENTER_NEW_WINDOWS,
-		DRAG_THRESHOLD;
-		public unowned string to_string ();
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_SHADOW_MODE_", type_id = "meta_shadow_mode_get_type ()")]
-	public enum ShadowMode {
-		AUTO,
-		FORCED_OFF,
-		FORCED_ON
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_SIDE_", type_id = "meta_side_get_type ()")]
-	public enum Side {
-		LEFT,
-		RIGHT,
-		TOP,
-		BOTTOM
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_SIZE_CHANGE_", type_id = "meta_size_change_get_type ()")]
-	public enum SizeChange {
-		MAXIMIZE,
-		UNMAXIMIZE,
-		FULLSCREEN,
-		UNFULLSCREEN
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_LAYER_", type_id = "meta_stack_layer_get_type ()")]
-	public enum StackLayer {
-		DESKTOP,
-		BOTTOM,
-		NORMAL,
-		TOP,
-		DOCK,
-		OVERRIDE_REDIRECT,
-		LAST
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_TAB_LIST_", type_id = "meta_tab_list_get_type ()")]
-	public enum TabList {
-		NORMAL,
-		DOCKS,
-		GROUP,
-		NORMAL_ALL
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_TAB_SHOW_", type_id = "meta_tab_show_type_get_type ()")]
-	public enum TabShowType {
-		ICON,
-		INSTANTLY
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_VIRTUAL_", type_id = "meta_virtual_modifier_get_type ()")]
-	[Flags]
-	public enum VirtualModifier {
-		SHIFT_MASK,
-		CONTROL_MASK,
-		ALT_MASK,
-		META_MASK,
-		SUPER_MASK,
-		HYPER_MASK,
-		MOD2_MASK,
-		MOD3_MASK,
-		MOD4_MASK,
-		MOD5_MASK
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_WINDOW_CLIENT_TYPE_", type_id = "meta_window_client_type_get_type ()")]
-	public enum WindowClientType {
-		WAYLAND,
-		X11
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_WINDOW_MENU_", type_id = "meta_window_menu_type_get_type ()")]
-	public enum WindowMenuType {
-		WM,
-		APP
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cprefix = "META_WINDOW_", type_id = "meta_window_type_get_type ()")]
-	public enum WindowType {
-		NORMAL,
-		DESKTOP,
-		DOCK,
-		DIALOG,
-		MODAL_DIALOG,
-		TOOLBAR,
-		MENU,
-		UTILITY,
-		SPLASHSCREEN,
-		DROPDOWN_MENU,
-		POPUP_MENU,
-		TOOLTIP,
-		NOTIFICATION,
-		COMBO,
-		DND,
-		OVERRIDE_OTHER
-	}
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", instance_pos = 2.9)]
-	public delegate void IdleMonitorWatchFunc (Meta.IdleMonitor monitor, uint watch_id);
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", instance_pos = 4.9)]
-	public delegate void KeyHandlerFunc (Meta.Display display, Meta.Window window, [CCode (type = "ClutterKeyEvent*")] Clutter.KeyEvent? event, Meta.KeyBinding binding);
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", instance_pos = 1.9)]
-	public delegate void PrefsChangedFunc (Meta.Preference pref);
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", instance_pos = 1.9)]
-	public delegate bool WindowForeachFunc (Meta.Window window);
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_CURRENT_TIME")]
-	public const int CURRENT_TIME;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_DEFAULT_ICON_NAME")]
-	public const string DEFAULT_ICON_NAME;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_ICON_HEIGHT")]
-	public const int ICON_HEIGHT;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_ICON_WIDTH")]
-	public const int ICON_WIDTH;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_MAJOR_VERSION")]
-	public const int MAJOR_VERSION;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_MICRO_VERSION")]
-	public const int MICRO_VERSION;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_MINI_ICON_HEIGHT")]
-	public const int MINI_ICON_HEIGHT;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_MINI_ICON_WIDTH")]
-	public const int MINI_ICON_WIDTH;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_MINOR_VERSION")]
-	public const int MINOR_VERSION;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_PLUGIN_API_VERSION")]
-	public const int PLUGIN_API_VERSION;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_PRIORITY_BEFORE_REDRAW")]
-	public const int PRIORITY_BEFORE_REDRAW;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_PRIORITY_PREFS_NOTIFY")]
-	public const int PRIORITY_PREFS_NOTIFY;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_PRIORITY_REDRAW")]
-	public const int PRIORITY_REDRAW;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_PRIORITY_RESIZE")]
-	public const int PRIORITY_RESIZE;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_VIRTUAL_CORE_KEYBOARD_ID")]
-	public const int VIRTUAL_CORE_KEYBOARD_ID;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h", cname = "META_VIRTUAL_CORE_POINTER_ID")]
-	public const int VIRTUAL_CORE_POINTER_ID;
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static bool activate_session ();
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static void exit (Meta.ExitCode code);
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static unowned GLib.OptionContext get_option_context ();
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static bool get_replace_current_wm ();
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static void init ();
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static bool is_restart ();
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static void quit (Meta.ExitCode code);
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static void register_with_session ();
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static void restart (string? message);
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static int run ();
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static void set_gnome_wm_keybindings (string wm_keybindings);
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static void set_wm_name (string wm_name);
-	[CCode (cheader_filename = "meta/barrier.h,meta/boxes.h,meta/common.h,meta/compositor.h,meta/compositor-mutter.h,meta/display.h,meta/group.h,meta/keybindings.h,meta/main.h,meta/meta-backend.h,meta/meta-background-actor.h,meta/meta-background-group.h,meta/meta-background.h,meta/meta-background-image.h,meta/meta-close-dialog.h,meta/meta-cursor-tracker.h,meta/meta-dnd.h,meta/meta-enum-types.h,meta/meta-idle-monitor.h,meta/meta-inhibit-shortcuts-dialog.h,meta/meta-launch-context.h,meta/meta-monitor-manager.h,meta/meta-plugin.h,meta/meta-remote-access-controller.h,meta/meta-settings.h,meta/meta-shadow-factory.h,meta/meta-shaped-texture.h,meta/meta-sound-player.h,meta/meta-stage.h,meta/meta-startup-notification.h,meta/meta-version.h,meta/meta-window-actor.h,meta/meta-window-group.h,meta/meta-window-shape.h,meta/meta-workspace-manager.h,meta/meta-x11-display.h,meta/meta-x11-errors.h,meta/prefs.h,meta/theme.h,meta/types.h,meta/util.h,meta/window.h,meta/workspace.h")]
-	public static bool x11_init_gdk_display () throws GLib.Error;
-}
diff --git vapi/libmutter-5.deps vapi/libmutter-6.deps
similarity index 50%
rename from vapi/libmutter-5.deps
rename to vapi/libmutter-6.deps
index 48aa7563..223525e4 100644
--- vapi/libmutter-5.deps
+++ vapi/libmutter-6.deps
@@ -1,5 +1,6 @@
 gtk+-3.0
 json-glib-1.0
-mutter-clutter-5
+mutter-clutter-6
 x11
 xfixes-4.0
+graphene-gobject-1.0
diff --git vapi/libmutter-5.vapi vapi/libmutter-6.vapi
similarity index 97%
rename from vapi/libmutter-5.vapi
rename to vapi/libmutter-6.vapi
index b95a28e6..b36be1b7 100644
--- vapi/libmutter-5.vapi
+++ vapi/libmutter-6.vapi
@@ -1,12 +1,10 @@
-/* libmutter-5.vapi generated by vapigen, do not modify. */
+/* libmutter-6.vapi generated by vapigen, do not modify. */
 
-[CCode (cprefix = "Meta", gir_namespace = "Meta", gir_version = "5", lower_case_cprefix = "meta_")]
+[CCode (cprefix = "Meta", gir_namespace = "Meta", gir_version = "6", lower_case_cprefix = "meta_")]
 namespace Meta {
 	namespace Compositor {
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_disable_unredirect_for_display")]
 		public static void disable_unredirect_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_empty_stage_input_region")]
-		public static void empty_stage_input_region (Meta.Display display);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_enable_unredirect_for_display")]
 		public static void enable_unredirect_for_display (Meta.Display display);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_focus_stage_window")]
@@ -21,8 +19,6 @@ namespace Meta {
 		public static unowned GLib.List<Clutter.Actor> get_window_actors (Meta.Display display);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_window_group_for_display")]
 		public static unowned Clutter.Actor get_window_group_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_set_stage_input_region")]
-		public static void set_stage_input_region (Meta.Display display, X.XserverRegion region);
 	}
 	namespace Prefs {
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_bell_is_audible")]
@@ -164,7 +160,7 @@ namespace Meta {
 		public void set_numlock (bool numlock_state);
 		public signal void keymap_changed ();
 		public signal void keymap_layout_group_changed (uint object);
-		public signal void last_device_changed (int object);
+		public signal void last_device_changed (Clutter.InputDevice object);
 		public signal void lid_is_closed_changed (bool object);
 	}
 	[CCode (cheader_filename = "meta/meta-background.h", type_id = "meta_background_get_type ()")]
@@ -174,7 +170,7 @@ namespace Meta {
 		public static void refresh_all ();
 		public void set_blend (GLib.File file1, GLib.File file2, double blend_factor, GDesktop.BackgroundStyle style);
 		public void set_color (Clutter.Color color);
-		public void set_file (GLib.File file, GDesktop.BackgroundStyle style);
+		public void set_file (GLib.File? file, GDesktop.BackgroundStyle style);
 		public void set_gradient (GDesktop.BackgroundShading shading_direction, Clutter.Color color, Clutter.Color second_color);
 		[NoAccessorMethod]
 		public Meta.Display meta_display { owned get; construct; }
@@ -275,7 +271,7 @@ namespace Meta {
 		public unowned Cogl.Texture get_sprite ();
 		public void set_pointer_visible (bool visible);
 		public signal void cursor_changed ();
-		public signal void cursor_moved (float object, float p0);
+		public signal void cursor_moved (float x, float y);
 		public signal void visibility_changed ();
 	}
 	[CCode (cheader_filename = "meta/display.h", type_id = "meta_display_get_type ()")]
@@ -327,6 +323,7 @@ namespace Meta {
 		public bool xserver_time_is_before (uint32 time1, uint32 time2);
 		public Meta.Window focus_window { get; }
 		public signal void accelerator_activated (uint object, Clutter.InputDevice p0, uint p1);
+		public signal void closing ();
 		public signal void cursor_updated ();
 		public signal void gl_video_memory_purged ();
 		public signal void grab_op_begin (Meta.Display object, Meta.Window p0, Meta.GrabOp p1);
@@ -350,6 +347,7 @@ namespace Meta {
 		public signal void workareas_changed ();
 		public signal void x11_display_closing ();
 		public signal void x11_display_opened ();
+		public signal void x11_display_setup ();
 	}
 	[CCode (cheader_filename = "meta/meta-dnd.h", type_id = "meta_dnd_get_type ()")]
 	public class Dnd : GLib.Object {
@@ -370,11 +368,10 @@ namespace Meta {
 		public uint add_idle_watch (uint64 interval_msec, owned Meta.IdleMonitorWatchFunc? callback);
 		public uint add_user_active_watch (owned Meta.IdleMonitorWatchFunc? callback);
 		public static unowned Meta.IdleMonitor get_core ();
-		public static unowned Meta.IdleMonitor get_for_device (int device_id);
 		public int64 get_idletime ();
 		public void remove_watch (uint id);
 		[NoAccessorMethod]
-		public int device_id { get; construct; }
+		public Clutter.InputDevice device { owned get; construct; }
 	}
 	[CCode (cheader_filename = "meta/main.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "meta_key_binding_get_type ()")]
 	[Compact]
@@ -536,15 +533,14 @@ namespace Meta {
 		public signal void changed ();
 	}
 	[CCode (cheader_filename = "meta/meta-shaped-texture.h", type_id = "meta_shaped_texture_get_type ()")]
-	public class ShapedTexture : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
+	public class ShapedTexture : GLib.Object, Clutter.Content {
 		[CCode (has_construct_function = false)]
 		protected ShapedTexture ();
-		public Cairo.Surface get_image (Cairo.RectangleInt clip);
+		public Cairo.Surface? get_image (Cairo.RectangleInt? clip);
 		public unowned Cogl.Texture get_texture ();
 		public void set_create_mipmaps (bool create_mipmaps);
 		public void set_mask_texture (Cogl.Texture mask_texture);
 		public void set_opaque_region (owned Cairo.Region opaque_region);
-		public bool update_area (int x, int y, int width, int height);
 		public signal void size_changed ();
 	}
 	[CCode (cheader_filename = "meta/meta-sound-player.h", type_id = "meta_sound_player_get_type ()")]
@@ -756,17 +752,16 @@ namespace Meta {
 	public abstract class WindowActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
 		[CCode (has_construct_function = false)]
 		protected WindowActor ();
+		public Cairo.Surface? get_image (Cairo.RectangleInt? clip);
 		public unowned Meta.Window get_meta_window ();
-		public unowned Clutter.Actor get_texture ();
+		public unowned Meta.ShapedTexture get_texture ();
 		public bool is_destroyed ();
 		public void sync_visibility ();
 		public Meta.Window meta_window { get; construct; }
-		[NoAccessorMethod]
-		public string shadow_class { owned get; set; }
-		[NoAccessorMethod]
-		public Meta.ShadowMode shadow_mode { get; set; }
+		public signal void damaged ();
 		public signal void effects_completed ();
 		public signal void first_frame ();
+		public signal void thawed ();
 	}
 	[CCode (cheader_filename = "meta/meta-window-group.h", type_id = "meta_window_group_get_type ()")]
 	public class WindowGroup : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
@@ -813,7 +808,7 @@ namespace Meta {
 		public unowned Meta.Workspace get_active_workspace ();
 		public int get_active_workspace_index ();
 		public int get_n_workspaces ();
-		public unowned Meta.Workspace get_workspace_by_index (int index);
+		public unowned Meta.Workspace? get_workspace_by_index (int index);
 		public void override_workspace_layout (Meta.DisplayCorner starting_corner, bool vertical_layout, int n_rows, int n_columns);
 		public void remove_workspace (Meta.Workspace workspace, uint32 timestamp);
 		public void reorder_workspace (Meta.Workspace workspace, int new_index);
@@ -833,11 +828,13 @@ namespace Meta {
 	public class X11Display : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected X11Display ();
+		public void clear_stage_input_region ();
 		public int get_damage_event_base ();
 		public int get_screen_number ();
 		public int get_shape_event_base ();
 		public bool has_shape ();
 		public void set_cm_selection ();
+		public void set_stage_input_region (X.XserverRegion region);
 		public bool xwindow_is_a_no_focus_window (X.Window xwindow);
 	}
 	[CCode (cheader_filename = "meta/meta-close-dialog.h", type_cname = "MetaCloseDialogInterface", type_id = "meta_close_dialog_get_type ()")]
@@ -899,7 +896,7 @@ namespace Meta {
 		public uint version_micro;
 		public uint version_api;
 	}
-	[CCode (cheader_filename = "meta/main.h", type_id = "meta_rectangle_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "meta_rectangle_get_type ()")]
 	public struct Rectangle {
 		public int x;
 		public int y;
@@ -1443,6 +1440,8 @@ namespace Meta {
 	[CCode (cheader_filename = "meta/main.h")]
 	public static bool activate_session ();
 	[CCode (cheader_filename = "meta/main.h")]
+	public static void add_clutter_debug_flags (Clutter.DebugFlag debug_flags, Clutter.DrawDebugFlag draw_flags, Clutter.PickDebugFlag pick_flags);
+	[CCode (cheader_filename = "meta/main.h")]
 	public static void exit (Meta.ExitCode code);
 	[CCode (cheader_filename = "meta/main.h")]
 	public static string g_utf8_strndup (string src, size_t n);
@@ -1459,6 +1458,8 @@ namespace Meta {
 	[CCode (cheader_filename = "meta/main.h")]
 	public static void register_with_session ();
 	[CCode (cheader_filename = "meta/main.h")]
+	public static void remove_clutter_debug_flags (Clutter.DebugFlag debug_flags, Clutter.DrawDebugFlag draw_flags, Clutter.PickDebugFlag pick_flags);
+	[CCode (cheader_filename = "meta/main.h")]
 	public static void restart (string? message);
 	[CCode (cheader_filename = "meta/main.h")]
 	public static int run ();
@@ -1467,5 +1468,7 @@ namespace Meta {
 	[CCode (cheader_filename = "meta/main.h")]
 	public static void set_wm_name (string wm_name);
 	[CCode (cheader_filename = "meta/main.h")]
+	public static void test_init ();
+	[CCode (cheader_filename = "meta/main.h")]
 	public static bool x11_init_gdk_display () throws GLib.Error;
 }
diff --git vapi/libmutter-7-custom.vala vapi/libmutter-7-custom.vala
new file mode 100644
index 00000000..1e0b917c
--- /dev/null
+++ vapi/libmutter-7-custom.vala
@@ -0,0 +1,7 @@
+[CCode (has_type_id = false)]
+public struct before_frame {
+}
+
+[CCode (has_type_id = false)]
+public struct frame {
+}
diff --git vapi/libmutter-7.deps vapi/libmutter-7.deps
new file mode 100644
index 00000000..2ef919ee
--- /dev/null
+++ vapi/libmutter-7.deps
@@ -0,0 +1,6 @@
+gtk+-3.0
+json-glib-1.0
+mutter-clutter-7
+x11
+xfixes-4.0
+graphene-gobject-1.0
diff --git vapi/libmutter-3.vapi vapi/libmutter-7.vapi
similarity index 75%
rename from vapi/libmutter-3.vapi
rename to vapi/libmutter-7.vapi
index 1715aa8f..90c41590 100644
--- vapi/libmutter-3.vapi
+++ vapi/libmutter-7.vapi
@@ -1,12 +1,10 @@
-/* libmutter-3.vapi generated by vapigen, do not modify. */
+/* libmutter-7.vapi generated by vapigen, do not modify. */
 
-[CCode (cprefix = "Meta", gir_namespace = "Meta", gir_version = "3", lower_case_cprefix = "meta_")]
+[CCode (cprefix = "Meta", gir_namespace = "Meta", gir_version = "7", lower_case_cprefix = "meta_")]
 namespace Meta {
 	namespace Compositor {
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_disable_unredirect_for_display")]
 		public static void disable_unredirect_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_empty_stage_input_region")]
-		public static void empty_stage_input_region (Meta.Display display);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_enable_unredirect_for_display")]
 		public static void enable_unredirect_for_display (Meta.Display display);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_focus_stage_window")]
@@ -21,8 +19,6 @@ namespace Meta {
 		public static unowned GLib.List<Clutter.Actor> get_window_actors (Meta.Display display);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_window_group_for_display")]
 		public static unowned Clutter.Actor get_window_group_for_display (Meta.Display display);
-		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_set_stage_input_region")]
-		public static void set_stage_input_region (Meta.Display display, X.XserverRegion region);
 	}
 	namespace Prefs {
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_bell_is_audible")]
@@ -47,6 +43,8 @@ namespace Meta {
 		public static Meta.ButtonLayout prefs_get_button_layout ();
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_center_new_windows")]
 		public static bool prefs_get_center_new_windows ();
+		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_check_alive_timeout")]
+		public static uint prefs_get_check_alive_timeout ();
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_compositing_manager")]
 		public static bool prefs_get_compositing_manager ();
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_cursor_size")]
@@ -75,8 +73,6 @@ namespace Meta {
 		public static bool prefs_get_gnome_accessibility ();
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_gnome_animations")]
 		public static bool prefs_get_gnome_animations ();
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_ignore_request_hide_titlebar")]
-		public static bool prefs_get_ignore_request_hide_titlebar ();
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_keybinding_action")]
 		public static Meta.KeyBindingAction prefs_get_keybinding_action (string name);
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_get_mouse_button_menu")]
@@ -105,8 +101,6 @@ namespace Meta {
 		public static void prefs_init ();
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_set_force_fullscreen")]
 		public static void prefs_set_force_fullscreen (bool whether);
-		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_set_ignore_request_hide_titlebar")]
-		public static void prefs_set_ignore_request_hide_titlebar (bool whether);
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_set_num_workspaces")]
 		public static void prefs_set_num_workspaces (int n_workspaces);
 		[CCode (cheader_filename = "meta/prefs.h", cname = "meta_prefs_set_show_fallback_app_menu")]
@@ -117,12 +111,10 @@ namespace Meta {
 		public static void add_verbose_topic (Meta.DebugTopic topic);
 		[CCode (cheader_filename = "meta/util.h", cname = "meta_external_binding_name_for_action")]
 		public static string external_binding_name_for_action (uint keybinding_action);
-		[CCode (cheader_filename = "meta/util.h", cname = "meta_g_utf8_strndup")]
-		public static string g_utf8_strndup (string src, size_t n);
 		[CCode (cheader_filename = "meta/util.h", cname = "meta_get_locale_direction")]
 		public static Meta.LocaleDirection get_locale_direction ();
 		[CCode (cheader_filename = "meta/util.h", cname = "meta_gravity_to_string")]
-		public static unowned string gravity_to_string (int gravity);
+		public static unowned string gravity_to_string (Meta.Gravity gravity);
 		[CCode (cheader_filename = "meta/util.h", cname = "meta_is_debugging")]
 		public static bool is_debugging ();
 		[CCode (cheader_filename = "meta/util.h", cname = "meta_is_syncing")]
@@ -165,12 +157,13 @@ namespace Meta {
 		public unowned Meta.Dnd get_dnd ();
 		public unowned Meta.RemoteAccessController get_remote_access_controller ();
 		public unowned Clutter.Actor get_stage ();
+		public bool is_rendering_hardware_accelerated ();
 		public void lock_layout_group (uint idx);
 		public void set_keymap (string layouts, string variants, string options);
 		public void set_numlock (bool numlock_state);
 		public signal void keymap_changed ();
 		public signal void keymap_layout_group_changed (uint object);
-		public signal void last_device_changed (int object);
+		public signal void last_device_changed (Clutter.InputDevice object);
 		public signal void lid_is_closed_changed (bool object);
 	}
 	[CCode (cheader_filename = "meta/meta-background.h", type_id = "meta_background_get_type ()")]
@@ -180,7 +173,7 @@ namespace Meta {
 		public static void refresh_all ();
 		public void set_blend (GLib.File file1, GLib.File file2, double blend_factor, GDesktop.BackgroundStyle style);
 		public void set_color (Clutter.Color color);
-		public void set_file (GLib.File file, GDesktop.BackgroundStyle style);
+		public void set_file (GLib.File? file, GDesktop.BackgroundStyle style);
 		public void set_gradient (GDesktop.BackgroundShading shading_direction, Clutter.Color color, Clutter.Color second_color);
 		[NoAccessorMethod]
 		public Meta.Display meta_display { owned get; construct; }
@@ -190,9 +183,18 @@ namespace Meta {
 	public class BackgroundActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
 		[CCode (has_construct_function = false, type = "ClutterActor*")]
 		public BackgroundActor (Meta.Display display, int monitor);
+		[NoAccessorMethod]
+		public Meta.Display meta_display { owned get; construct; }
+		[NoAccessorMethod]
+		public int monitor { get; construct; }
+	}
+	[CCode (cheader_filename = "meta/meta-background-content.h", type_id = "meta_background_content_get_type ()")]
+	public class BackgroundContent : GLib.Object, Clutter.Content {
+		[CCode (has_construct_function = false)]
+		protected BackgroundContent ();
+		public static Clutter.Content @new (Meta.Display display, int monitor);
 		public void set_background (Meta.Background background);
 		public void set_gradient (bool enabled, int height, double tone_start);
-		public void set_monitor (int monitor);
 		public void set_vignette (bool enabled, double brightness, double sharpness);
 		[NoAccessorMethod]
 		public Meta.Background background { owned get; set; }
@@ -277,14 +279,14 @@ namespace Meta {
 		public static unowned Meta.CursorTracker get_for_display (Meta.Display display);
 		public void get_hot (out int x, out int y);
 		public void get_pointer (int x, int y, Clutter.ModifierType mods);
+		public bool get_pointer_visible ();
 		public unowned Cogl.Texture get_sprite ();
 		public void set_pointer_visible (bool visible);
+		[NoAccessorMethod]
+		public Meta.Backend backend { owned get; construct; }
 		public signal void cursor_changed ();
-	}
-	[CCode (cheader_filename = "meta/meta-monitor-manager.h", type_id = "meta_dbus_display_config_skeleton_get_type ()")]
-	public class DBusDisplayConfigSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface {
-		[CCode (has_construct_function = false)]
-		protected DBusDisplayConfigSkeleton ();
+		public signal void cursor_moved (float x, float y);
+		public signal void visibility_changed ();
 	}
 	[CCode (cheader_filename = "meta/display.h", type_id = "meta_display_get_type ()")]
 	public class Display : GLib.Object {
@@ -309,32 +311,39 @@ namespace Meta {
 		public bool get_monitor_in_fullscreen (int monitor);
 		public int get_monitor_index_for_rect (Meta.Rectangle rect);
 		public int get_monitor_neighbor_index (int which_monitor, Meta.DisplayDirection dir);
+		public float get_monitor_scale (int monitor);
 		public int get_n_monitors ();
 		public string get_pad_action_label (Clutter.InputDevice pad, Meta.PadActionType action_type, uint action_number);
 		public int get_primary_monitor ();
+		public unowned Meta.Selection get_selection ();
 		public void get_size (out int width, out int height);
+		public unowned Meta.SoundPlayer get_sound_player ();
 		public unowned Meta.Window get_tab_current (Meta.TabList type, Meta.Workspace workspace);
 		public GLib.List<weak Meta.Window> get_tab_list (Meta.TabList type, Meta.Workspace? workspace);
 		public unowned Meta.Window get_tab_next (Meta.TabList type, Meta.Workspace workspace, Meta.Window? window, bool backward);
 		public unowned Meta.WorkspaceManager get_workspace_manager ();
-		public uint grab_accelerator (string accelerator);
+		public uint grab_accelerator (string accelerator, Meta.KeyBindingFlags flags);
 		public bool is_pointer_emulating_sequence (Clutter.EventSequence? sequence);
 		public bool remove_keybinding (string name);
 		public void request_pad_osd (Clutter.InputDevice pad, bool edition_mode);
 		public void set_cursor (Meta.Cursor cursor);
+		public void set_input_focus (Meta.Window window, bool focus_frame, uint32 timestamp);
 		public GLib.SList<weak Meta.Window> sort_windows_by_stacking (GLib.SList<Meta.Window> windows);
 		public bool supports_extended_barriers ();
 		public void unfreeze_keyboard (uint32 timestamp);
 		public bool ungrab_accelerator (uint action_id);
 		public void ungrab_keyboard (uint32 timestamp);
+		public void unset_input_focus (uint32 timestamp);
 		public bool xserver_time_is_before (uint32 time1, uint32 time2);
 		public Meta.Window focus_window { get; }
-		public signal void accelerator_activated (uint object, uint p0, uint p1);
+		public signal void accelerator_activated (uint object, Clutter.InputDevice p0, uint p1);
+		public signal void closing ();
 		public signal void cursor_updated ();
 		public signal void gl_video_memory_purged ();
 		public signal void grab_op_begin (Meta.Display object, Meta.Window p0, Meta.GrabOp p1);
 		public signal void grab_op_end (Meta.Display object, Meta.Window p0, Meta.GrabOp p1);
 		public signal void in_fullscreen_changed ();
+		public signal bool init_xserver (GLib.Task object);
 		public signal bool modifiers_accelerator_activated ();
 		public signal void overlay_key ();
 		public signal void pad_mode_switch (Clutter.InputDevice object, uint p0, uint p1);
@@ -345,7 +354,6 @@ namespace Meta {
 		public signal bool show_resize_popup (bool object, Meta.Rectangle p0, int p1, int p2);
 		public signal bool show_restart_message (string? message);
 		public signal void showing_desktop_changed ();
-		public signal void startup_sequence_changed (void* object);
 		public signal void window_created (Meta.Window object);
 		public signal void window_demands_attention (Meta.Window object);
 		public signal void window_entered_monitor (int object, Meta.Window p0);
@@ -354,6 +362,7 @@ namespace Meta {
 		public signal void workareas_changed ();
 		public signal void x11_display_closing ();
 		public signal void x11_display_opened ();
+		public signal void x11_display_setup ();
 	}
 	[CCode (cheader_filename = "meta/meta-dnd.h", type_id = "meta_dnd_get_type ()")]
 	public class Dnd : GLib.Object {
@@ -363,7 +372,7 @@ namespace Meta {
 		public signal void dnd_leave ();
 		public signal void dnd_position_change (int object, int p0);
 	}
-	[CCode (cheader_filename = "meta/common.h", has_type_id = false)]
+	[CCode (cheader_filename = "meta/main.h", has_type_id = false)]
 	[Compact]
 	public class Frame {
 	}
@@ -374,13 +383,12 @@ namespace Meta {
 		public uint add_idle_watch (uint64 interval_msec, owned Meta.IdleMonitorWatchFunc? callback);
 		public uint add_user_active_watch (owned Meta.IdleMonitorWatchFunc? callback);
 		public static unowned Meta.IdleMonitor get_core ();
-		public static unowned Meta.IdleMonitor get_for_device (int device_id);
 		public int64 get_idletime ();
 		public void remove_watch (uint id);
 		[NoAccessorMethod]
-		public int device_id { get; construct; }
+		public Clutter.InputDevice device { owned get; construct; }
 	}
-	[CCode (cheader_filename = "meta/keybindings.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "meta_key_binding_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "meta_key_binding_get_type ()")]
 	[Compact]
 	public class KeyBinding {
 		public uint get_mask ();
@@ -391,8 +399,21 @@ namespace Meta {
 		[CCode (cname = "meta_keybindings_set_custom_handler")]
 		public static bool set_custom_handler (string name, owned Meta.KeyHandlerFunc? handler);
 	}
+	[CCode (cheader_filename = "meta/meta-launch-context.h", type_id = "meta_launch_context_get_type ()")]
+	public class LaunchContext : GLib.AppLaunchContext {
+		[CCode (has_construct_function = false)]
+		protected LaunchContext ();
+		public void set_timestamp (uint32 timestamp);
+		public void set_workspace (Meta.Workspace workspace);
+		[NoAccessorMethod]
+		public Meta.Display display { owned get; construct; }
+		[NoAccessorMethod]
+		public uint timestamp { get; set; }
+		[NoAccessorMethod]
+		public Meta.Workspace workspace { owned get; set; }
+	}
 	[CCode (cheader_filename = "meta/meta-monitor-manager.h", type_id = "meta_monitor_manager_get_type ()")]
-	public abstract class MonitorManager : Meta.DBusDisplayConfigSkeleton, GLib.DBusInterface, GLib.DBusInterface {
+	public class MonitorManager : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected MonitorManager ();
 		public bool can_switch_config ();
@@ -407,6 +428,7 @@ namespace Meta {
 		public signal void confirm_display_change ();
 		public signal void monitors_changed ();
 		public signal void monitors_changed_internal ();
+		public signal void power_save_mode_changed ();
 	}
 	[CCode (cheader_filename = "meta/meta-plugin.h", type_id = "meta_plugin_get_type ()")]
 	public abstract class Plugin : GLib.Object {
@@ -430,6 +452,8 @@ namespace Meta {
 		public virtual void kill_switch_workspace ();
 		[NoWrapper]
 		public virtual void kill_window_effects (Meta.WindowActor actor);
+		[NoWrapper]
+		public virtual void locate_pointer ();
 		public static void manager_set_plugin_type (GLib.Type gtype);
 		[NoWrapper]
 		public virtual void map (Meta.WindowActor actor);
@@ -465,26 +489,56 @@ namespace Meta {
 	public class RemoteAccessController : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected RemoteAccessController ();
+		public void inhibit_remote_access ();
+		public void uninhibit_remote_access ();
 		public signal void new_handle (Meta.RemoteAccessHandle object);
 	}
 	[CCode (cheader_filename = "meta/meta-remote-access-controller.h", type_id = "meta_remote_access_handle_get_type ()")]
 	public class RemoteAccessHandle : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected RemoteAccessHandle ();
+		public bool get_disable_animations ();
 		public virtual void stop ();
+		[NoAccessorMethod]
+		public bool is_recording { get; construct; }
 		public signal void stopped ();
 	}
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_selection_get_type ()")]
+	public class Selection : GLib.Object {
+		[CCode (has_construct_function = false)]
+		public Selection (Meta.Display display);
+		public GLib.List<string> get_mimetypes (Meta.SelectionType selection_type);
+		public void set_owner (Meta.SelectionType selection_type, Meta.SelectionSource owner);
+		public async bool transfer_async (Meta.SelectionType selection_type, string mimetype, ssize_t size, GLib.OutputStream output, GLib.Cancellable? cancellable) throws GLib.Error;
+		public void unset_owner (Meta.SelectionType selection_type, Meta.SelectionSource owner);
+		public signal void owner_changed (uint object, Meta.SelectionSource p0);
+	}
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_selection_source_get_type ()")]
+	public class SelectionSource : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected SelectionSource ();
+		public virtual GLib.List<string> get_mimetypes ();
+		public bool is_active ();
+		public virtual async GLib.InputStream read_async (string mimetype, GLib.Cancellable? cancellable) throws GLib.Error;
+		public virtual signal void activated ();
+		public virtual signal void deactivated ();
+	}
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_selection_source_memory_get_type ()")]
+	public class SelectionSourceMemory : Meta.SelectionSource {
+		[CCode (has_construct_function = false, type = "MetaSelectionSource*")]
+		public SelectionSourceMemory (string mimetype, GLib.Bytes content);
+	}
 	[CCode (cheader_filename = "meta/meta-settings.h", has_type_id = false)]
 	[Compact]
 	public class Settings {
 		public int get_font_dpi ();
 		public int get_ui_scaling_factor ();
 	}
-	[CCode (cheader_filename = "meta/meta-shadow-factory.h", ref_function = "meta_shadow_ref", type_id = "meta_shadow_get_type ()", unref_function = "meta_shadow_unref")]
+	[CCode (cheader_filename = "meta/main.h", ref_function = "meta_shadow_ref", type_id = "meta_shadow_get_type ()", unref_function = "meta_shadow_unref")]
 	[Compact]
 	public class Shadow {
 		public void get_bounds (int window_x, int window_y, int window_width, int window_height, Cairo.RectangleInt bounds);
-		public void paint (int window_x, int window_y, int window_width, int window_height, uint8 opacity, Cairo.Region? clip, bool clip_strictly);
+		public void paint (Cogl.Framebuffer framebuffer, int window_x, int window_y, int window_width, int window_height, uint8 opacity, Cairo.Region? clip, bool clip_strictly);
 		public Meta.Shadow @ref ();
 		public void unref ();
 	}
@@ -499,28 +553,74 @@ namespace Meta {
 		public signal void changed ();
 	}
 	[CCode (cheader_filename = "meta/meta-shaped-texture.h", type_id = "meta_shaped_texture_get_type ()")]
-	public class ShapedTexture : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
+	public class ShapedTexture : GLib.Object, Clutter.Content {
 		[CCode (has_construct_function = false)]
 		protected ShapedTexture ();
-		public Cairo.Surface get_image (Cairo.RectangleInt clip);
+		public Cairo.Surface? get_image (Cairo.RectangleInt? clip);
 		public unowned Cogl.Texture get_texture ();
 		public void set_create_mipmaps (bool create_mipmaps);
 		public void set_mask_texture (Cogl.Texture mask_texture);
-		public void set_opaque_region (owned Cairo.Region opaque_region);
-		public bool update_area (int x, int y, int width, int height);
 		public signal void size_changed ();
 	}
-	[CCode (cheader_filename = "meta/compositor-mutter.h", type_id = "meta_stage_get_type ()")]
+	[CCode (cheader_filename = "meta/meta-sound-player.h", type_id = "meta_sound_player_get_type ()")]
+	public class SoundPlayer : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected SoundPlayer ();
+		public void play_from_file (GLib.File file, string description, GLib.Cancellable? cancellable = null);
+		public void play_from_theme (string name, string description, GLib.Cancellable? cancellable = null);
+	}
+	[CCode (cheader_filename = "meta/meta-stage.h", type_id = "meta_stage_get_type ()")]
 	public class Stage : Clutter.Stage, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
 		[CCode (has_construct_function = false)]
 		protected Stage ();
 		public static bool is_focused (Meta.Display display);
+		public signal void actors_painted ();
+	}
+	[CCode (cheader_filename = "meta/meta-startup-notification.h", type_id = "meta_startup_notification_get_type ()")]
+	public class StartupNotification : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected StartupNotification ();
+		public Meta.LaunchContext create_launcher ();
+		[NoAccessorMethod]
+		public Meta.Display display { owned get; construct; }
+		public signal void changed (void* object);
+	}
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_startup_sequence_get_type ()")]
+	public class StartupSequence : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected StartupSequence ();
+		public unowned string get_application_id ();
+		public bool get_completed ();
+		public unowned string get_icon_name ();
+		public unowned string get_id ();
+		public unowned string get_name ();
+		public uint64 get_timestamp ();
+		public unowned string get_wmclass ();
+		public int get_workspace ();
+		public string application_id { get; construct; }
+		public string icon_name { get; construct; }
+		public string id { get; construct; }
+		public string name { get; construct; }
+		public uint64 timestamp { get; construct; }
+		public string wmclass { get; construct; }
+		public int workspace { get; construct; }
+		[HasEmitter]
+		public signal void complete ();
 	}
 	[CCode (cheader_filename = "meta/theme.h", has_type_id = false)]
 	[Compact]
 	public class Theme {
 		public void free ();
 	}
+	[CCode (cheader_filename = "meta/meta-wayland-client.h", type_id = "meta_wayland_client_get_type ()")]
+	public class WaylandClient : GLib.Object {
+		[CCode (has_construct_function = false)]
+		public WaylandClient (GLib.SubprocessLauncher launcher) throws GLib.Error;
+		public void hide_from_window_list (Meta.Window window);
+		public bool owns_window (Meta.Window window);
+		public void show_in_window_list (Meta.Window window);
+		public GLib.Subprocess spawnv (Meta.Display display, [CCode (array_length = false, array_null_terminated = true)] string[] argv) throws GLib.Error;
+	}
 	[CCode (cheader_filename = "meta/window.h", type_id = "meta_window_get_type ()")]
 	public abstract class Window : GLib.Object {
 		[CCode (has_construct_function = false)]
@@ -547,6 +647,7 @@ namespace Meta {
 		public Meta.Rectangle frame_rect_to_client_rect (Meta.Rectangle frame_rect);
 		public Meta.Rectangle get_buffer_rect ();
 		public unowned string get_client_machine ();
+		public Meta.WindowClientType get_client_type ();
 		public unowned GLib.Object get_compositor_private ();
 		public unowned string get_description ();
 		public unowned Meta.Display get_display ();
@@ -561,6 +662,7 @@ namespace Meta {
 		public unowned string get_gtk_unique_bus_name ();
 		public unowned string get_gtk_window_object_path ();
 		public bool get_icon_geometry (out Meta.Rectangle rect);
+		public uint64 get_id ();
 		public Meta.StackLayer get_layer ();
 		public Meta.MaximizeFlags get_maximized ();
 		public int get_monitor ();
@@ -610,8 +712,6 @@ namespace Meta {
 		public void move_resize_frame (bool user_op, int root_x_nw, int root_y_nw, int w, int h);
 		public void move_to_monitor (int monitor);
 		public void raise ();
-		public bool requested_bypass_compositor ();
-		public bool requested_dont_bypass_compositor ();
 		public void set_compositor_private (GLib.Object priv);
 		public void set_demands_attention ();
 		public void set_icon_geometry (Meta.Rectangle? rect);
@@ -672,24 +772,25 @@ namespace Meta {
 		public signal void shown ();
 		public signal void size_changed ();
 		public signal void unmanaged ();
+		public signal void unmanaging ();
 		public signal void workspace_changed ();
 	}
 	[CCode (cheader_filename = "meta/meta-window-actor.h", type_id = "meta_window_actor_get_type ()")]
-	public class WindowActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
+	public abstract class WindowActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
 		[CCode (has_construct_function = false)]
 		protected WindowActor ();
+		public void freeze ();
+		public Cairo.Surface? get_image (Cairo.RectangleInt? clip);
 		public unowned Meta.Window get_meta_window ();
-		public unowned Clutter.Actor get_texture ();
-		public X.Window get_x_window ();
+		public unowned Meta.ShapedTexture get_texture ();
 		public bool is_destroyed ();
 		public void sync_visibility ();
+		public void thaw ();
 		public Meta.Window meta_window { get; construct; }
-		[NoAccessorMethod]
-		public string shadow_class { owned get; set; }
-		[NoAccessorMethod]
-		public Meta.ShadowMode shadow_mode { get; set; }
+		public signal void damaged ();
 		public signal void effects_completed ();
 		public signal void first_frame ();
+		public signal void thawed ();
 	}
 	[CCode (cheader_filename = "meta/meta-window-group.h", type_id = "meta_window_group_get_type ()")]
 	public class WindowGroup : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
@@ -720,7 +821,9 @@ namespace Meta {
 		public Meta.Rectangle get_work_area_for_monitor (int which_monitor);
 		public int index ();
 		public GLib.List<weak Meta.Window> list_windows ();
-		public void set_builtin_struts (GLib.SList<Meta.Strut> struts);
+		public void set_builtin_struts (GLib.SList<Meta.Strut?> struts);
+		[NoAccessorMethod]
+		public bool active { get; }
 		[NoAccessorMethod]
 		public uint n_windows { get; }
 		[NoAccessorMethod]
@@ -736,27 +839,33 @@ namespace Meta {
 		public unowned Meta.Workspace get_active_workspace ();
 		public int get_active_workspace_index ();
 		public int get_n_workspaces ();
-		public unowned Meta.Workspace get_workspace_by_index (int index);
+		public unowned Meta.Workspace? get_workspace_by_index (int index);
 		public void override_workspace_layout (Meta.DisplayCorner starting_corner, bool vertical_layout, int n_rows, int n_columns);
 		public void remove_workspace (Meta.Workspace workspace, uint32 timestamp);
+		public void reorder_workspace (Meta.Workspace workspace, int new_index);
+		[NoAccessorMethod]
+		public int layout_columns { get; }
+		[NoAccessorMethod]
+		public int layout_rows { get; }
 		public int n_workspaces { get; }
 		public signal void active_workspace_changed ();
 		public signal void showing_desktop_changed ();
 		public signal void workspace_added (int object);
 		public signal void workspace_removed (int object);
 		public signal void workspace_switched (int object, int p0, Meta.MotionDirection p1);
+		public signal void workspaces_reordered ();
 	}
 	[CCode (cheader_filename = "meta/meta-x11-display.h", type_id = "meta_x11_display_get_type ()")]
 	public class X11Display : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected X11Display ();
-		public void focus_the_no_focus_window (uint32 timestamp);
+		public void clear_stage_input_region ();
 		public int get_damage_event_base ();
 		public int get_screen_number ();
 		public int get_shape_event_base ();
 		public bool has_shape ();
 		public void set_cm_selection ();
-		public void set_input_focus_window (Meta.Window window, bool focus_frame, uint32 timestamp);
+		public void set_stage_input_region (X.XserverRegion region);
 		public bool xwindow_is_a_no_focus_window (X.Window xwindow);
 	}
 	[CCode (cheader_filename = "meta/meta-close-dialog.h", type_cname = "MetaCloseDialogInterface", type_id = "meta_close_dialog_get_type ()")]
@@ -779,24 +888,24 @@ namespace Meta {
 		[HasEmitter]
 		public signal void response (Meta.InhibitShortcutsDialogResponse response);
 	}
-	[CCode (cheader_filename = "meta/common.h", has_type_id = false)]
+	[CCode (cheader_filename = "meta/main.h", has_type_id = false)]
 	public struct ButtonLayout {
 		[CCode (array_length = false)]
-		public weak Meta.ButtonFunction left_buttons[5];
+		public weak Meta.ButtonFunction left_buttons[4];
 		[CCode (array_length = false)]
-		public weak bool left_buttons_has_spacer[5];
+		public weak bool left_buttons_has_spacer[4];
 		[CCode (array_length = false)]
-		public weak Meta.ButtonFunction right_buttons[5];
+		public weak Meta.ButtonFunction right_buttons[4];
 		[CCode (array_length = false)]
-		public weak bool right_buttons_has_spacer[5];
+		public weak bool right_buttons_has_spacer[4];
 	}
-	[CCode (cheader_filename = "meta/boxes.h", has_type_id = false)]
+	[CCode (cheader_filename = "meta/main.h", has_type_id = false)]
 	public struct Edge {
 		public Meta.Rectangle rect;
 		public Meta.Side side_type;
 		public Meta.EdgeType edge_type;
 	}
-	[CCode (cheader_filename = "meta/common.h", has_type_id = false)]
+	[CCode (cheader_filename = "meta/main.h", has_type_id = false)]
 	public struct FrameBorders {
 		public Gtk.Border visible;
 		public Gtk.Border invisible;
@@ -811,14 +920,14 @@ namespace Meta {
 		public weak string license;
 		public weak string description;
 	}
-	[CCode (cheader_filename = "meta/meta-plugin.h", has_type_id = false)]
+	[CCode (cheader_filename = "meta/main.h", has_type_id = false)]
 	public struct PluginVersion {
 		public uint version_major;
 		public uint version_minor;
 		public uint version_micro;
 		public uint version_api;
 	}
-	[CCode (cheader_filename = "meta/boxes.h", type_id = "meta_rectangle_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "meta_rectangle_get_type ()")]
 	public struct Rectangle {
 		public int x;
 		public int y;
@@ -836,7 +945,7 @@ namespace Meta {
 		public Meta.Rectangle union (Meta.Rectangle rect2);
 		public bool vert_overlap (Meta.Rectangle rect2);
 	}
-	[CCode (cheader_filename = "meta/meta-shadow-factory.h", has_type_id = false)]
+	[CCode (cheader_filename = "meta/main.h", has_type_id = false)]
 	public struct ShadowParams {
 		public int radius;
 		public int top_fade;
@@ -844,12 +953,12 @@ namespace Meta {
 		public int y_offset;
 		public uint8 opacity;
 	}
-	[CCode (cheader_filename = "meta/boxes.h", has_type_id = false)]
+	[CCode (cheader_filename = "meta/main.h", has_type_id = false)]
 	public struct Strut {
 		public Meta.Rectangle rect;
 		public Meta.Side side;
 	}
-	[CCode (cheader_filename = "meta/barrier.h", cprefix = "META_BARRIER_DIRECTION_", type_id = "meta_barrier_direction_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_BARRIER_DIRECTION_", type_id = "meta_barrier_direction_get_type ()")]
 	[Flags]
 	public enum BarrierDirection {
 		POSITIVE_X,
@@ -857,21 +966,20 @@ namespace Meta {
 		NEGATIVE_X,
 		NEGATIVE_Y
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_BUTTON_FUNCTION_", type_id = "meta_button_function_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_BUTTON_FUNCTION_", type_id = "meta_button_function_get_type ()")]
 	public enum ButtonFunction {
 		MENU,
 		MINIMIZE,
 		MAXIMIZE,
 		CLOSE,
-		APPMENU,
 		LAST
 	}
-	[CCode (cheader_filename = "meta/meta-close-dialog.h", cprefix = "META_CLOSE_DIALOG_RESPONSE_", type_id = "meta_close_dialog_response_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_CLOSE_DIALOG_RESPONSE_", type_id = "meta_close_dialog_response_get_type ()")]
 	public enum CloseDialogResponse {
 		WAIT,
 		FORCE_CLOSE
 	}
-	[CCode (cheader_filename = "meta/compositor.h", cprefix = "META_COMP_EFFECT_", type_id = "meta_comp_effect_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_COMP_EFFECT_", type_id = "meta_comp_effect_get_type ()")]
 	public enum CompEffect {
 		CREATE,
 		UNMINIMIZE,
@@ -879,7 +987,7 @@ namespace Meta {
 		MINIMIZE,
 		NONE
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_CURSOR_", type_id = "meta_cursor_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_CURSOR_", type_id = "meta_cursor_get_type ()")]
 	public enum Cursor {
 		NONE,
 		DEFAULT,
@@ -900,9 +1008,10 @@ namespace Meta {
 		POINTING_HAND,
 		CROSSHAIR,
 		IBEAM,
+		BLANK,
 		LAST
 	}
-	[CCode (cheader_filename = "meta/util.h", cprefix = "META_DEBUG_", type_id = "meta_debug_topic_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_DEBUG_", type_id = "meta_debug_topic_get_type ()")]
 	[Flags]
 	public enum DebugTopic {
 		VERBOSE,
@@ -928,9 +1037,10 @@ namespace Meta {
 		SHAPES,
 		COMPOSITOR,
 		EDGE_RESISTANCE,
-		DBUS
+		DBUS,
+		INPUT
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_DIRECTION_", type_id = "meta_direction_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_DIRECTION_", type_id = "meta_direction_get_type ()")]
 	[Flags]
 	public enum Direction {
 		LEFT,
@@ -942,21 +1052,21 @@ namespace Meta {
 		HORIZONTAL,
 		VERTICAL
 	}
-	[CCode (cheader_filename = "meta/display.h", cprefix = "META_DISPLAY_", type_id = "meta_display_corner_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_DISPLAY_", type_id = "meta_display_corner_get_type ()")]
 	public enum DisplayCorner {
 		TOPLEFT,
 		TOPRIGHT,
 		BOTTOMLEFT,
 		BOTTOMRIGHT
 	}
-	[CCode (cheader_filename = "meta/display.h", cprefix = "META_DISPLAY_", type_id = "meta_display_direction_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_DISPLAY_", type_id = "meta_display_direction_get_type ()")]
 	public enum DisplayDirection {
 		UP,
 		DOWN,
 		LEFT,
 		RIGHT
 	}
-	[CCode (cheader_filename = "meta/boxes.h", cprefix = "META_EDGE_", type_id = "meta_edge_type_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_EDGE_", type_id = "meta_edge_type_get_type ()")]
 	public enum EdgeType {
 		WINDOW,
 		MONITOR,
@@ -967,12 +1077,11 @@ namespace Meta {
 		SUCCESS,
 		ERROR
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_FRAME_", type_id = "meta_frame_flags_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_FRAME_", type_id = "meta_frame_flags_get_type ()")]
 	[Flags]
 	public enum FrameFlags {
 		ALLOWS_DELETE,
 		ALLOWS_MENU,
-		ALLOWS_APPMENU,
 		ALLOWS_MINIMIZE,
 		ALLOWS_MAXIMIZE,
 		ALLOWS_VERTICAL_RESIZE,
@@ -984,12 +1093,11 @@ namespace Meta {
 		ALLOWS_SHADE,
 		ALLOWS_MOVE,
 		FULLSCREEN,
-		IS_FLASHING,
 		ABOVE,
 		TILED_LEFT,
 		TILED_RIGHT
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_FRAME_TYPE_", type_id = "meta_frame_type_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_FRAME_TYPE_", type_id = "meta_frame_type_get_type ()")]
 	public enum FrameType {
 		NORMAL,
 		DIALOG,
@@ -1001,7 +1109,7 @@ namespace Meta {
 		LAST;
 		public unowned string to_string ();
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_GRAB_OP_", type_id = "meta_grab_op_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_GRAB_OP_", type_id = "meta_grab_op_get_type ()")]
 	public enum GrabOp {
 		NONE,
 		WINDOW_BASE,
@@ -1028,12 +1136,26 @@ namespace Meta {
 		KEYBOARD_RESIZING_SE,
 		KEYBOARD_RESIZING_W
 	}
-	[CCode (cheader_filename = "meta/meta-inhibit-shortcuts-dialog.h", cprefix = "META_INHIBIT_SHORTCUTS_DIALOG_RESPONSE_", type_id = "meta_inhibit_shortcuts_dialog_response_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_GRAVITY_", type_id = "meta_gravity_get_type ()")]
+	public enum Gravity {
+		NONE,
+		NORTH_WEST,
+		NORTH,
+		NORTH_EAST,
+		WEST,
+		CENTER,
+		EAST,
+		SOUTH_WEST,
+		SOUTH,
+		SOUTH_EAST,
+		STATIC
+	}
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_INHIBIT_SHORTCUTS_DIALOG_RESPONSE_", type_id = "meta_inhibit_shortcuts_dialog_response_get_type ()")]
 	public enum InhibitShortcutsDialogResponse {
 		ALLOW,
 		DENY
 	}
-	[CCode (cheader_filename = "meta/prefs.h", cprefix = "META_KEYBINDING_ACTION_", type_id = "meta_key_binding_action_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_KEYBINDING_ACTION_", type_id = "meta_key_binding_action_get_type ()")]
 	public enum KeyBindingAction {
 		NONE,
 		WORKSPACE_1,
@@ -1122,22 +1244,25 @@ namespace Meta {
 		MOVE_TO_SIDE_W,
 		MOVE_TO_CENTER,
 		OVERLAY_KEY,
+		LOCATE_POINTER_KEY,
 		ISO_NEXT_GROUP,
 		ALWAYS_ON_TOP,
 		SWITCH_MONITOR,
 		ROTATE_MONITOR,
 		LAST
 	}
-	[CCode (cheader_filename = "meta/prefs.h", cprefix = "META_KEY_BINDING_", type_id = "meta_key_binding_flags_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_KEY_BINDING_", type_id = "meta_key_binding_flags_get_type ()")]
 	[Flags]
 	public enum KeyBindingFlags {
 		NONE,
 		PER_WINDOW,
 		BUILTIN,
 		IS_REVERSED,
-		NON_MASKABLE
+		NON_MASKABLE,
+		IGNORE_AUTOREPEAT,
+		NO_AUTO_GRAB
 	}
-	[CCode (cheader_filename = "meta/util.h", cprefix = "META_LATER_", type_id = "meta_later_type_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_LATER_", type_id = "meta_later_type_get_type ()")]
 	public enum LaterType {
 		RESIZE,
 		CALC_SHOWING,
@@ -1146,25 +1271,25 @@ namespace Meta {
 		BEFORE_REDRAW,
 		IDLE
 	}
-	[CCode (cheader_filename = "meta/util.h", cprefix = "META_LOCALE_DIRECTION_", type_id = "meta_locale_direction_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_LOCALE_DIRECTION_", type_id = "meta_locale_direction_get_type ()")]
 	public enum LocaleDirection {
 		LTR,
 		RTL
 	}
-	[CCode (cheader_filename = "meta/window.h", cprefix = "META_MAXIMIZE_", type_id = "meta_maximize_flags_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_MAXIMIZE_", type_id = "meta_maximize_flags_get_type ()")]
 	[Flags]
 	public enum MaximizeFlags {
 		HORIZONTAL,
 		VERTICAL,
 		BOTH
 	}
-	[CCode (cheader_filename = "meta/meta-plugin.h", cprefix = "META_MODAL_", type_id = "meta_modal_options_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_MODAL_", type_id = "meta_modal_options_get_type ()")]
 	[Flags]
 	public enum ModalOptions {
 		POINTER_ALREADY_GRABBED,
 		KEYBOARD_ALREADY_GRABBED
 	}
-	[CCode (cheader_filename = "meta/meta-monitor-manager.h", cprefix = "META_MONITOR_SWITCH_CONFIG_", type_id = "meta_monitor_switch_config_type_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_MONITOR_SWITCH_CONFIG_", type_id = "meta_monitor_switch_config_type_get_type ()")]
 	public enum MonitorSwitchConfigType {
 		ALL_MIRROR,
 		ALL_LINEAR,
@@ -1172,7 +1297,7 @@ namespace Meta {
 		BUILTIN,
 		UNKNOWN
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_MOTION_", type_id = "meta_motion_direction_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_MOTION_", type_id = "meta_motion_direction_get_type ()")]
 	public enum MotionDirection {
 		UP,
 		DOWN,
@@ -1183,7 +1308,7 @@ namespace Meta {
 		DOWN_LEFT,
 		DOWN_RIGHT
 	}
-	[CCode (cheader_filename = "meta/display.h", cprefix = "META_PAD_ACTION_", type_id = "meta_pad_action_type_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_PAD_ACTION_", type_id = "meta_pad_action_type_get_type ()")]
 	public enum PadActionType {
 		BUTTON,
 		RING,
@@ -1223,30 +1348,39 @@ namespace Meta {
 		DRAGGABLE_BORDER_WIDTH,
 		AUTO_MAXIMIZE,
 		CENTER_NEW_WINDOWS,
-		DRAG_THRESHOLD;
+		DRAG_THRESHOLD,
+		LOCATE_POINTER,
+		CHECK_ALIVE_TIMEOUT;
 		public unowned string to_string ();
 	}
-	[CCode (cheader_filename = "meta/meta-window-actor.h", cprefix = "META_SHADOW_MODE_", type_id = "meta_shadow_mode_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_", type_id = "meta_selection_type_get_type ()")]
+	public enum SelectionType {
+		SELECTION_PRIMARY,
+		SELECTION_CLIPBOARD,
+		SELECTION_DND,
+		N_SELECTION_TYPES
+	}
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_SHADOW_MODE_", type_id = "meta_shadow_mode_get_type ()")]
 	public enum ShadowMode {
 		AUTO,
 		FORCED_OFF,
 		FORCED_ON
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_SIDE_", type_id = "meta_side_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_SIDE_", type_id = "meta_side_get_type ()")]
 	public enum Side {
 		LEFT,
 		RIGHT,
 		TOP,
 		BOTTOM
 	}
-	[CCode (cheader_filename = "meta/compositor.h", cprefix = "META_SIZE_CHANGE_", type_id = "meta_size_change_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_SIZE_CHANGE_", type_id = "meta_size_change_get_type ()")]
 	public enum SizeChange {
 		MAXIMIZE,
 		UNMAXIMIZE,
 		FULLSCREEN,
 		UNFULLSCREEN
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_LAYER_", type_id = "meta_stack_layer_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_LAYER_", type_id = "meta_stack_layer_get_type ()")]
 	public enum StackLayer {
 		DESKTOP,
 		BOTTOM,
@@ -1256,19 +1390,19 @@ namespace Meta {
 		OVERRIDE_REDIRECT,
 		LAST
 	}
-	[CCode (cheader_filename = "meta/display.h", cprefix = "META_TAB_LIST_", type_id = "meta_tab_list_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_TAB_LIST_", type_id = "meta_tab_list_get_type ()")]
 	public enum TabList {
 		NORMAL,
 		DOCKS,
 		GROUP,
 		NORMAL_ALL
 	}
-	[CCode (cheader_filename = "meta/display.h", cprefix = "META_TAB_SHOW_", type_id = "meta_tab_show_type_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_TAB_SHOW_", type_id = "meta_tab_show_type_get_type ()")]
 	public enum TabShowType {
 		ICON,
 		INSTANTLY
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_VIRTUAL_", type_id = "meta_virtual_modifier_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_VIRTUAL_", type_id = "meta_virtual_modifier_get_type ()")]
 	[Flags]
 	public enum VirtualModifier {
 		SHIFT_MASK,
@@ -1282,17 +1416,17 @@ namespace Meta {
 		MOD4_MASK,
 		MOD5_MASK
 	}
-	[CCode (cheader_filename = "meta/window.h", cprefix = "META_WINDOW_CLIENT_TYPE_", type_id = "meta_window_client_type_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_WINDOW_CLIENT_TYPE_", type_id = "meta_window_client_type_get_type ()")]
 	public enum WindowClientType {
 		WAYLAND,
 		X11
 	}
-	[CCode (cheader_filename = "meta/common.h", cprefix = "META_WINDOW_MENU_", type_id = "meta_window_menu_type_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_WINDOW_MENU_", type_id = "meta_window_menu_type_get_type ()")]
 	public enum WindowMenuType {
 		WM,
 		APP
 	}
-	[CCode (cheader_filename = "meta/window.h", cprefix = "META_WINDOW_", type_id = "meta_window_type_get_type ()")]
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_WINDOW_", type_id = "meta_window_type_get_type ()")]
 	public enum WindowType {
 		NORMAL,
 		DESKTOP,
@@ -1311,51 +1445,57 @@ namespace Meta {
 		DND,
 		OVERRIDE_OTHER
 	}
-	[CCode (cheader_filename = "meta/meta-idle-monitor.h", instance_pos = 2.9)]
+	[CCode (cheader_filename = "meta/main.h", instance_pos = 2.9)]
 	public delegate void IdleMonitorWatchFunc (Meta.IdleMonitor monitor, uint watch_id);
-	[CCode (cheader_filename = "meta/prefs.h", instance_pos = 4.9)]
+	[CCode (cheader_filename = "meta/main.h", instance_pos = 4.9)]
 	public delegate void KeyHandlerFunc (Meta.Display display, Meta.Window window, [CCode (type = "ClutterKeyEvent*")] Clutter.KeyEvent? event, Meta.KeyBinding binding);
-	[CCode (cheader_filename = "meta/prefs.h", instance_pos = 1.9)]
+	[CCode (cheader_filename = "meta/main.h", instance_pos = 1.9)]
 	public delegate void PrefsChangedFunc (Meta.Preference pref);
-	[CCode (cheader_filename = "meta/window.h", instance_pos = 1.9)]
+	[CCode (cheader_filename = "meta/main.h", instance_pos = 1.9)]
 	public delegate bool WindowForeachFunc (Meta.Window window);
-	[CCode (cheader_filename = "meta/common.h", cname = "META_CURRENT_TIME")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_CURRENT_TIME")]
 	public const int CURRENT_TIME;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_DEFAULT_ICON_NAME")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_DEFAULT_ICON_NAME")]
 	public const string DEFAULT_ICON_NAME;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_ICON_HEIGHT")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_ICON_HEIGHT")]
 	public const int ICON_HEIGHT;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_ICON_WIDTH")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_ICON_WIDTH")]
 	public const int ICON_WIDTH;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_MAJOR_VERSION")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_MAJOR_VERSION")]
 	public const int MAJOR_VERSION;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_MICRO_VERSION")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_MICRO_VERSION")]
 	public const int MICRO_VERSION;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_MINI_ICON_HEIGHT")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_MINI_ICON_HEIGHT")]
 	public const int MINI_ICON_HEIGHT;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_MINI_ICON_WIDTH")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_MINI_ICON_WIDTH")]
 	public const int MINI_ICON_WIDTH;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_MINOR_VERSION")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_MINOR_VERSION")]
 	public const int MINOR_VERSION;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_PLUGIN_API_VERSION")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_PLUGIN_API_VERSION")]
 	public const int PLUGIN_API_VERSION;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_PRIORITY_BEFORE_REDRAW")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_PRIORITY_BEFORE_REDRAW")]
 	public const int PRIORITY_BEFORE_REDRAW;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_PRIORITY_PREFS_NOTIFY")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_PRIORITY_PREFS_NOTIFY")]
 	public const int PRIORITY_PREFS_NOTIFY;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_PRIORITY_REDRAW")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_PRIORITY_REDRAW")]
 	public const int PRIORITY_REDRAW;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_PRIORITY_RESIZE")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_PRIORITY_RESIZE")]
 	public const int PRIORITY_RESIZE;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_VIRTUAL_CORE_KEYBOARD_ID")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_VIRTUAL_CORE_KEYBOARD_ID")]
 	public const int VIRTUAL_CORE_KEYBOARD_ID;
-	[CCode (cheader_filename = "meta/common.h", cname = "META_VIRTUAL_CORE_POINTER_ID")]
+	[CCode (cheader_filename = "meta/main.h", cname = "META_VIRTUAL_CORE_POINTER_ID")]
 	public const int VIRTUAL_CORE_POINTER_ID;
 	[CCode (cheader_filename = "meta/main.h")]
 	public static bool activate_session ();
 	[CCode (cheader_filename = "meta/main.h")]
+	public static void add_clutter_debug_flags (Clutter.DebugFlag debug_flags, Clutter.DrawDebugFlag draw_flags, Clutter.PickDebugFlag pick_flags);
+	[CCode (cheader_filename = "meta/main.h")]
+	public static void clutter_init ();
+	[CCode (cheader_filename = "meta/main.h")]
 	public static void exit (Meta.ExitCode code);
 	[CCode (cheader_filename = "meta/main.h")]
+	public static string g_utf8_strndup (string src, size_t n);
+	[CCode (cheader_filename = "meta/main.h")]
 	public static unowned GLib.OptionContext get_option_context ();
 	[CCode (cheader_filename = "meta/main.h")]
 	public static bool get_replace_current_wm ();
@@ -1368,6 +1508,8 @@ namespace Meta {
 	[CCode (cheader_filename = "meta/main.h")]
 	public static void register_with_session ();
 	[CCode (cheader_filename = "meta/main.h")]
+	public static void remove_clutter_debug_flags (Clutter.DebugFlag debug_flags, Clutter.DrawDebugFlag draw_flags, Clutter.PickDebugFlag pick_flags);
+	[CCode (cheader_filename = "meta/main.h")]
 	public static void restart (string? message);
 	[CCode (cheader_filename = "meta/main.h")]
 	public static int run ();
@@ -1375,6 +1517,14 @@ namespace Meta {
 	public static void set_gnome_wm_keybindings (string wm_keybindings);
 	[CCode (cheader_filename = "meta/main.h")]
 	public static void set_wm_name (string wm_name);
-	[CCode (cheader_filename = "meta/meta-x11-display.h")]
+	[CCode (cheader_filename = "meta/main.h")]
+	public static void test_init ();
+	[CCode (cheader_filename = "meta/main.h")]
 	public static bool x11_init_gdk_display () throws GLib.Error;
 }
+[CCode (cheader_filename = "libmutter-7-custom.h", has_type_id = false)]
+public struct before_frame {
+}
+[CCode (cheader_filename = "libmutter-7-custom.h", has_type_id = false)]
+public struct frame {
+}
diff --git vapi/libmutter-cogl-4.vapi vapi/libmutter-cogl-4.vapi
deleted file mode 100644
index 7dc18476..00000000
--- vapi/libmutter-cogl-4.vapi
+++ /dev/null
@@ -1,1272 +0,0 @@
-/* libmutter-cogl-4.vapi generated by vapigen, do not modify. */
-
-[CCode (cprefix = "Cogl", gir_namespace = "Cogl", gir_version = "4", lower_case_cprefix = "cogl_")]
-namespace Cogl {
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_bitmap_get_gtype ()")]
-	public class Bitmap : Cogl.Object {
-		[CCode (has_construct_function = false)]
-		protected Bitmap ();
-		public static uint32 error_quark ();
-		[CCode (has_construct_function = false)]
-		[Version (since = "1.0")]
-		public Bitmap.from_file (string filename) throws GLib.Error;
-		[Version (since = "1.10")]
-		public Cogl.PixelFormat get_format ();
-		[Version (since = "1.10")]
-		public int get_height ();
-		[Version (since = "1.10")]
-		public int get_rowstride ();
-		[Version (since = "1.0")]
-		public static Cogl.Bool get_size_from_file (string filename, out int width, out int height);
-		[Version (since = "1.10")]
-		public int get_width ();
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Compact]
-	public class Euler {
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_frame_closure_get_gtype ()")]
-	[Compact]
-	[Version (since = "1.14")]
-	public class FrameClosure {
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_material_get_type ()")]
-	[Compact]
-	public class Material {
-		[CCode (has_construct_function = false)]
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Material ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.2")]
-		public Cogl.Material copy ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void foreach_layer (Cogl.MaterialLayerCallback callback);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_ambient (Cogl.Color ambient);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public Cogl.Color get_color ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_diffuse (Cogl.Color diffuse);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_emission (Cogl.Color emission);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.Bool get_layer_point_sprite_coords_enabled (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-		public Cogl.MaterialWrapMode get_layer_wrap_mode_p (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-		public Cogl.MaterialWrapMode get_layer_wrap_mode_s (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-		public Cogl.MaterialWrapMode get_layer_wrap_mode_t (int layer_index);
-		public unowned GLib.List<Cogl.MaterialLayer> get_layers ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public int get_n_layers ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public float get_point_size ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public float get_shininess ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_specular (Cogl.Color specular);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.Handle get_user_program ();
-		[Version (deprecated = true, deprecated_since = "1.2", since = "1.0")]
-		public static Cogl.Handle @ref (Cogl.Handle material);
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public void remove_layer (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_alpha_test_function (Cogl.MaterialAlphaFunc alpha_func, float alpha_reference);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_ambient (Cogl.Color ambient);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_ambient_and_diffuse (Cogl.Color color);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public Cogl.Bool set_blend (string blend_string) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_blend_constant (Cogl.Color constant_color);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_color (Cogl.Color color);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_color4f (float red, float green, float blue, float alpha);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_color4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_diffuse (Cogl.Color diffuse);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_emission (Cogl.Color emission);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_layer (int layer_index, Cogl.Handle texture);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public Cogl.Bool set_layer_combine (int layer_index, string blend_string) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_layer_combine_constant (int layer_index, Cogl.Color constant);
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public void set_layer_filters (int layer_index, Cogl.MaterialFilter min_filter, Cogl.MaterialFilter mag_filter);
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public void set_layer_matrix (int layer_index, Cogl.Matrix matrix);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.Bool set_layer_point_sprite_coords_enabled (int layer_index, Cogl.Bool enable) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode_p (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode_s (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode_t (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_point_size (float point_size);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_shininess (float shininess);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_specular (Cogl.Color specular);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_user_program (Cogl.Handle program);
-		[Version (deprecated = true, deprecated_since = "1.2", since = "1.0")]
-		public static void unref (Cogl.Handle material);
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Compact]
-	public class MaterialLayer {
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.MaterialFilter get_mag_filter ();
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.MaterialFilter get_min_filter ();
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.Handle get_texture ();
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.MaterialLayerType get_type ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.MaterialWrapMode get_wrap_mode_p ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.MaterialWrapMode get_wrap_mode_s ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.MaterialWrapMode get_wrap_mode_t ();
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_object_get_gtype ()")]
-	public abstract class Object {
-		[CCode (has_construct_function = false)]
-		protected Object ();
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_offscreen_get_gtype ()")]
-	public class Offscreen : Cogl.Object, Cogl.Framebuffer {
-		[CCode (has_construct_function = false)]
-		protected Offscreen ();
-		[Version (deprecated = true, deprecated_since = "1.2")]
-		public static void* @ref (void* offscreen);
-		[CCode (has_construct_function = false)]
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Offscreen.to_texture (Cogl.Texture texture);
-		[Version (deprecated = true, deprecated_since = "1.2")]
-		public static void unref (void* offscreen);
-		[CCode (has_construct_function = false)]
-		public Offscreen.with_texture (Cogl.Texture texture);
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_onscreen_get_gtype ()")]
-	public class Onscreen : Cogl.Object, Cogl.Framebuffer {
-		[CCode (has_construct_function = false)]
-		protected Onscreen ();
-		[Version (since = "1.16")]
-		public Cogl.OnscreenDirtyClosure add_dirty_callback ([CCode (delegate_target_pos = 1.5)] Cogl.OnscreenDirtyCallback callback, Cogl.UserDataDestroyCallback? destroy);
-		[Version (since = "2.0")]
-		public Cogl.OnscreenResizeClosure add_resize_callback ([CCode (delegate_target_pos = 1.5)] Cogl.OnscreenResizeCallback callback, Cogl.UserDataDestroyCallback? destroy);
-		[Version (deprecated = true, deprecated_since = "1.14", since = "1.10")]
-		public uint add_swap_buffers_callback (Cogl.SwapBuffersNotify callback);
-		public static void clutter_backend_set_size_CLUTTER (int width, int height);
-		[Version (since = "1.14")]
-		public int get_buffer_age ();
-		[Version (since = "1.14")]
-		public int64 get_frame_counter ();
-		[Version (since = "2.0")]
-		public Cogl.Bool get_resizable ();
-		[Version (since = "2.0")]
-		public void hide ();
-		[Version (since = "1.16")]
-		public void remove_dirty_callback (Cogl.OnscreenDirtyClosure closure);
-		[Version (since = "1.14")]
-		public void remove_frame_callback (Cogl.FrameClosure closure);
-		[Version (since = "2.0")]
-		public void remove_resize_callback (Cogl.OnscreenResizeClosure closure);
-		[Version (deprecated = true, deprecated_since = "1.14", since = "1.10")]
-		public void remove_swap_buffers_callback (uint id);
-		[Version (since = "2.0")]
-		public void set_resizable (Cogl.Bool resizable);
-		[Version (since = "2.0")]
-		public void show ();
-		[Version (since = "1.10")]
-		public void swap_buffers ();
-		[Version (since = "1.16")]
-		public void swap_buffers_with_damage (int rectangles, int n_rectangles);
-		[Version (since = "1.10")]
-		public void swap_region (int rectangles, int n_rectangles);
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_onscreen_dirty_closure_get_gtype ()")]
-	[Compact]
-	[Version (since = "1.16")]
-	public class OnscreenDirtyClosure {
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_onscreen_resize_closure_get_gtype ()")]
-	[Compact]
-	[Version (since = "2.0")]
-	public class OnscreenResizeClosure {
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_pipeline_get_gtype ()")]
-	public class Pipeline : Cogl.Object {
-		[CCode (has_construct_function = false)]
-		protected Pipeline ();
-		[Version (since = "2.0")]
-		public Cogl.Pipeline copy ();
-		[Version (since = "2.0")]
-		public void foreach_layer (Cogl.PipelineLayerCallback callback);
-		[Version (since = "2.0")]
-		public Cogl.PipelineAlphaFunc get_alpha_test_function ();
-		[Version (since = "2.0")]
-		public float get_alpha_test_reference ();
-		[Version (since = "2.0")]
-		public void get_ambient (Cogl.Color ambient);
-		[Version (since = "2.0")]
-		public Cogl.Color get_color ();
-		[Version (since = "1.8")]
-		public Cogl.ColorMask get_color_mask ();
-		[Version (since = "2.0")]
-		public Cogl.PipelineCullFaceMode get_cull_face_mode ();
-		[Version (since = "2.0")]
-		public void get_diffuse (Cogl.Color diffuse);
-		[Version (since = "2.0")]
-		public void get_emission (Cogl.Color emission);
-		[Version (since = "2.0")]
-		public Cogl.Winding get_front_face_winding ();
-		[Version (since = "1.10")]
-		public Cogl.PipelineFilter get_layer_mag_filter (int layer_index);
-		[Version (since = "1.10")]
-		public Cogl.PipelineFilter get_layer_min_filter (int layer_index);
-		[Version (since = "2.0")]
-		public Cogl.Bool get_layer_point_sprite_coords_enabled (int layer_index);
-		[Version (since = "1.10")]
-		public unowned Cogl.Texture get_layer_texture (int layer_index);
-		[Version (since = "1.6")]
-		public Cogl.PipelineWrapMode get_layer_wrap_mode_p (int layer_index);
-		[Version (since = "1.6")]
-		public Cogl.PipelineWrapMode get_layer_wrap_mode_s (int layer_index);
-		[Version (since = "1.6")]
-		public Cogl.PipelineWrapMode get_layer_wrap_mode_t (int layer_index);
-		[Version (since = "2.0")]
-		public int get_n_layers ();
-		[Version (since = "2.0")]
-		public Cogl.Bool get_per_vertex_point_size ();
-		[Version (since = "2.0")]
-		public float get_point_size ();
-		[Version (since = "2.0")]
-		public float get_shininess ();
-		[Version (since = "2.0")]
-		public void get_specular (Cogl.Color specular);
-		[Version (since = "2.0")]
-		public int get_uniform_location (string uniform_name);
-		[Version (since = "2.0")]
-		public Cogl.Handle get_user_program ();
-		[Version (since = "1.10")]
-		public void remove_layer (int layer_index);
-		[Version (since = "2.0")]
-		public void set_alpha_test_function (Cogl.PipelineAlphaFunc alpha_func, float alpha_reference);
-		[Version (since = "2.0")]
-		public void set_ambient (Cogl.Color ambient);
-		[Version (since = "2.0")]
-		public void set_ambient_and_diffuse (Cogl.Color color);
-		[Version (since = "2.0")]
-		public Cogl.Bool set_blend (string blend_string) throws GLib.Error;
-		[Version (since = "2.0")]
-		public void set_blend_constant (Cogl.Color constant_color);
-		[Version (since = "2.0")]
-		public void set_color (Cogl.Color color);
-		[Version (since = "2.0")]
-		public void set_color4f (float red, float green, float blue, float alpha);
-		[Version (since = "2.0")]
-		public void set_color4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
-		[Version (since = "1.8")]
-		public void set_color_mask (Cogl.ColorMask color_mask);
-		[Version (since = "2.0")]
-		public void set_cull_face_mode (Cogl.PipelineCullFaceMode cull_face_mode);
-		[Version (since = "2.0")]
-		public void set_diffuse (Cogl.Color diffuse);
-		[Version (since = "2.0")]
-		public void set_emission (Cogl.Color emission);
-		[Version (since = "2.0")]
-		public void set_front_face_winding (Cogl.Winding front_winding);
-		[Version (since = "2.0")]
-		public Cogl.Bool set_layer_combine (int layer_index, string blend_string) throws GLib.Error;
-		[Version (since = "2.0")]
-		public void set_layer_combine_constant (int layer_index, Cogl.Color constant);
-		[Version (since = "1.10")]
-		public void set_layer_filters (int layer_index, Cogl.PipelineFilter min_filter, Cogl.PipelineFilter mag_filter);
-		[Version (since = "1.10")]
-		public void set_layer_matrix (int layer_index, Cogl.Matrix matrix);
-		[Version (since = "1.10")]
-		public void set_layer_null_texture (int layer_index, Cogl.TextureType texture_type);
-		[Version (since = "2.0")]
-		public Cogl.Bool set_layer_point_sprite_coords_enabled (int layer_index, Cogl.Bool enable) throws GLib.Error;
-		public void set_layer_texture (int layer_index, Cogl.Texture texture);
-		[Version (since = "2.0")]
-		public void set_layer_wrap_mode (int layer_index, Cogl.PipelineWrapMode mode);
-		[Version (since = "2.0")]
-		public void set_layer_wrap_mode_p (int layer_index, Cogl.PipelineWrapMode mode);
-		[Version (since = "2.0")]
-		public void set_layer_wrap_mode_s (int layer_index, Cogl.PipelineWrapMode mode);
-		[Version (since = "2.0")]
-		public void set_layer_wrap_mode_t (int layer_index, Cogl.PipelineWrapMode mode);
-		[Version (since = "2.0")]
-		public Cogl.Bool set_per_vertex_point_size (Cogl.Bool enable) throws GLib.Error;
-		[Version (since = "2.0")]
-		public void set_point_size (float point_size);
-		[Version (since = "2.0")]
-		public void set_shininess (float shininess);
-		[Version (since = "2.0")]
-		public void set_specular (Cogl.Color specular);
-		[Version (since = "2.0")]
-		public void set_uniform_1f (int uniform_location, float value);
-		[Version (since = "2.0")]
-		public void set_uniform_1i (int uniform_location, int value);
-		[Version (since = "2.0")]
-		public void set_uniform_float (int uniform_location, int n_components, int count, float value);
-		[Version (since = "2.0")]
-		public void set_uniform_int (int uniform_location, int n_components, int count, int value);
-		[Version (since = "2.0")]
-		public void set_uniform_matrix (int uniform_location, int dimensions, int count, Cogl.Bool transpose, float value);
-		[Version (since = "2.0")]
-		public void set_user_program (Cogl.Handle program);
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Compact]
-	public class Quaternion {
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_framebuffer_get_gtype ()")]
-	public interface Framebuffer : Cogl.Object {
-		[Version (since = "1.8")]
-		public Cogl.Bool allocate () throws GLib.Error;
-		[Version (since = "1.8")]
-		public void clear (ulong buffers, Cogl.Color color);
-		[Version (since = "1.8")]
-		public void clear4f (ulong buffers, float red, float green, float blue, float alpha);
-		[Version (since = "1.8")]
-		public void discard_buffers (ulong buffers);
-		[Version (since = "1.10")]
-		public void draw_multitextured_rectangle (Cogl.Pipeline pipeline, float x_1, float y_1, float x_2, float y_2, [CCode (array_length = false)] float[] tex_coords, int tex_coords_len);
-		[Version (since = "1.10")]
-		public void draw_rectangle (Cogl.Pipeline pipeline, float x_1, float y_1, float x_2, float y_2);
-		[Version (since = "1.10")]
-		public void draw_rectangles (Cogl.Pipeline pipeline, [CCode (array_length = false)] float[] coordinates, uint n_rectangles);
-		[Version (since = "1.10")]
-		public void draw_textured_rectangle (Cogl.Pipeline pipeline, float x_1, float y_1, float x_2, float y_2, float s_1, float t_1, float s_2, float t_2);
-		[Version (since = "1.10")]
-		public void draw_textured_rectangles (Cogl.Pipeline pipeline, [CCode (array_length = false)] float[] coordinates, uint n_rectangles);
-		public static uint32 error_quark ();
-		[Version (since = "1.10")]
-		public void finish ();
-		[Version (since = "1.10")]
-		public void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
-		[Version (since = "1.8")]
-		public int get_alpha_bits ();
-		[Version (since = "1.8")]
-		public int get_blue_bits ();
-		[Version (since = "1.8")]
-		public Cogl.ColorMask get_color_mask ();
-		[Version (since = "2.0")]
-		public int get_depth_bits ();
-		[Version (since = "1.14")]
-		public unowned Cogl.Texture get_depth_texture ();
-		[Version (since = "1.14")]
-		public Cogl.Bool get_depth_texture_enabled ();
-		[Version (since = "1.18")]
-		public Cogl.Bool get_depth_write_enabled ();
-		[Version (since = "1.8")]
-		public Cogl.Bool get_dither_enabled ();
-		[Version (since = "1.8")]
-		public int get_green_bits ();
-		[Version (since = "1.8")]
-		public int get_height ();
-		public Cogl.Bool get_is_stereo ();
-		[Version (since = "1.10")]
-		public Cogl.Matrix get_modelview_matrix ();
-		[Version (since = "1.10")]
-		public Cogl.Matrix get_projection_matrix ();
-		[Version (since = "1.8")]
-		public int get_red_bits ();
-		[Version (since = "1.10")]
-		public int get_samples_per_pixel ();
-		[Version (since = "1.20")]
-		public Cogl.StereoMode get_stereo_mode ();
-		[Version (since = "1.8")]
-		public void get_viewport4fv ([CCode (array_length = false)] out unowned float viewport[4]);
-		[Version (since = "1.8")]
-		public float get_viewport_height ();
-		[Version (since = "1.8")]
-		public float get_viewport_width ();
-		[Version (since = "1.8")]
-		public float get_viewport_x ();
-		[Version (since = "1.8")]
-		public float get_viewport_y ();
-		[Version (since = "1.8")]
-		public int get_width ();
-		[Version (since = "1.10")]
-		public void identity_matrix ();
-		[Version (since = "1.10")]
-		public void orthographic (float x_1, float y_1, float x_2, float y_2, float near, float far);
-		[Version (since = "1.10")]
-		public void perspective (float fov_y, float aspect, float z_near, float z_far);
-		[Version (since = "1.10")]
-		public void pop_clip ();
-		[Version (since = "1.10")]
-		public void pop_matrix ();
-		[Version (since = "1.10")]
-		public void push_matrix ();
-		[Version (since = "1.10")]
-		public void push_rectangle_clip (float x_1, float y_1, float x_2, float y_2);
-		[Version (since = "1.10")]
-		public void push_scissor_clip (int x, int y, int width, int height);
-		[Version (since = "1.10")]
-		public Cogl.Bool read_pixels (int x, int y, int width, int height, Cogl.PixelFormat format, uint8 pixels);
-		[Version (since = "1.10")]
-		public Cogl.Bool read_pixels_into_bitmap (int x, int y, Cogl.ReadPixelsFlags source, Cogl.Bitmap bitmap);
-		[Version (since = "1.8")]
-		public void resolve_samples ();
-		[Version (since = "1.8")]
-		public void resolve_samples_region (int x, int y, int width, int height);
-		[Version (since = "1.10")]
-		public void rotate (float angle, float x, float y, float z);
-		[Version (since = "2.0")]
-		public void rotate_euler (Cogl.Euler euler);
-		[Version (since = "2.0")]
-		public void rotate_quaternion (Cogl.Quaternion quaternion);
-		[Version (since = "1.10")]
-		public void scale (float x, float y, float z);
-		[Version (since = "1.8")]
-		public void set_color_mask (Cogl.ColorMask color_mask);
-		[Version (since = "1.14")]
-		public void set_depth_texture_enabled (Cogl.Bool enabled);
-		[Version (since = "1.18")]
-		public void set_depth_write_enabled (Cogl.Bool depth_write_enabled);
-		[Version (since = "1.8")]
-		public void set_dither_enabled (Cogl.Bool dither_enabled);
-		[Version (since = "1.10")]
-		public void set_modelview_matrix (Cogl.Matrix matrix);
-		[Version (since = "1.10")]
-		public void set_projection_matrix (Cogl.Matrix matrix);
-		[Version (since = "1.8")]
-		public void set_samples_per_pixel (int samples_per_pixel);
-		[Version (since = "1.20")]
-		public void set_stereo_mode (Cogl.StereoMode stereo_mode);
-		[Version (since = "1.8")]
-		public void set_viewport (float x, float y, float width, float height);
-		[Version (since = "1.10")]
-		public void transform (Cogl.Matrix matrix);
-		[Version (since = "1.10")]
-		public void translate (float x, float y, float z);
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_texture_get_gtype ()")]
-	public interface Texture : Cogl.Object {
-		public Cogl.Bool allocate () throws GLib.Error;
-		public static uint32 error_quark ();
-		[Version (since = "1.18")]
-		public Cogl.TextureComponents get_components ();
-		public int get_data (Cogl.PixelFormat format, uint rowstride, uint8 data);
-		public Cogl.Bool get_gl_texture (out uint out_gl_handle, out uint out_gl_target);
-		public uint get_height ();
-		public int get_max_waste ();
-		[Version (since = "1.18")]
-		public Cogl.Bool get_premultiplied ();
-		public uint get_width ();
-		public Cogl.Bool is_sliced ();
-		[Version (deprecated = true, deprecated_since = "1.18", since = "1.0")]
-		public static Cogl.Texture new_from_bitmap (Cogl.Bitmap bitmap, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
-		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-		public static Cogl.Texture new_from_data (int width, int height, Cogl.TextureFlags flags, Cogl.PixelFormat format, Cogl.PixelFormat internal_format, int rowstride, uint8 data);
-		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-		public static Cogl.Texture new_from_file (string filename, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-		public static Cogl.Texture new_from_foreign (uint gl_handle, uint gl_target, uint width, uint height, uint x_pot_waste, uint y_pot_waste, Cogl.PixelFormat format);
-		[Version (deprecated = true, deprecated_since = "1.18", since = "1.2")]
-		public Cogl.Texture new_from_sub_texture (int sub_x, int sub_y, int sub_width, int sub_height);
-		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-		public static Cogl.Texture new_with_size (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
-		[Version (since = "1.18")]
-		public void set_components (Cogl.TextureComponents components);
-		public Cogl.Bool set_data (Cogl.PixelFormat format, int rowstride, uint8 data, int level) throws GLib.Error;
-		[Version (since = "1.18")]
-		public void set_premultiplied (Cogl.Bool premultiplied);
-		public Cogl.Bool set_region (int src_x, int src_y, int dst_x, int dst_y, uint dst_width, uint dst_height, int width, int height, Cogl.PixelFormat format, uint rowstride, uint8 data);
-		[Version (since = "1.8")]
-		public Cogl.Bool set_region_from_bitmap (int src_x, int src_y, int dst_x, int dst_y, uint dst_width, uint dst_height, Cogl.Bitmap bitmap);
-	}
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[SimpleType]
-	public struct Angle : int32 {
-	}
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[SimpleType]
-	public struct Bool : int {
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_color_get_gtype ()")]
-	[Version (since = "1.0")]
-	public struct Color {
-		public Cogl.Color? copy ();
-		public static Cogl.Bool equal (void* v1, void* v2);
-		public float get_alpha ();
-		public uint8 get_alpha_byte ();
-		public float get_alpha_float ();
-		public float get_blue ();
-		public uint8 get_blue_byte ();
-		public float get_blue_float ();
-		public float get_green ();
-		public uint8 get_green_byte ();
-		public float get_green_float ();
-		public float get_red ();
-		public uint8 get_red_byte ();
-		public float get_red_float ();
-		[Version (since = "1.4")]
-		public void init_from_4f (float red, float green, float blue, float alpha);
-		[Version (since = "1.4")]
-		public void init_from_4fv (float color_array);
-		[Version (since = "1.4")]
-		public void init_from_4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
-		[Version (since = "1.16")]
-		public static void init_from_hsl (out Cogl.Color color, float hue, float saturation, float luminance);
-		public void premultiply ();
-		[Version (since = "1.4")]
-		public void set_alpha (float alpha);
-		[Version (since = "1.4")]
-		public void set_alpha_byte (uint8 alpha);
-		[Version (since = "1.4")]
-		public void set_alpha_float (float alpha);
-		[Version (since = "1.4")]
-		public void set_blue (float blue);
-		[Version (since = "1.4")]
-		public void set_blue_byte (uint8 blue);
-		[Version (since = "1.4")]
-		public void set_blue_float (float blue);
-		[Version (deprecated = true, deprecated_since = "1.4", since = "1.0")]
-		public void set_from_4f (float red, float green, float blue, float alpha);
-		[Version (deprecated = true, deprecated_since = "1.4", since = "1.0")]
-		public void set_from_4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
-		[Version (since = "1.4")]
-		public void set_green (float green);
-		[Version (since = "1.4")]
-		public void set_green_byte (uint8 green);
-		[Version (since = "1.4")]
-		public void set_green_float (float green);
-		[Version (since = "1.4")]
-		public void set_red (float red);
-		[Version (since = "1.4")]
-		public void set_red_byte (uint8 red);
-		[Version (since = "1.4")]
-		public void set_red_float (float red);
-		[Version (since = "1.16")]
-		public void to_hsl (out float hue, out float saturation, out float luminance);
-		[Version (since = "1.4")]
-		public void unpremultiply ();
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.8")]
-	public struct DebugObjectTypeInfo {
-		public weak string name;
-		public ulong instance_count;
-	}
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[SimpleType]
-	public struct Handle {
-		public static GLib.Type get_type ();
-		public Cogl.Handle @ref ();
-		public void unref ();
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_matrix_get_gtype ()")]
-	public struct Matrix {
-		public float xx;
-		public float yx;
-		public float zx;
-		public float wx;
-		public float xy;
-		public float yy;
-		public float zy;
-		public float wy;
-		public float xz;
-		public float yz;
-		public float zz;
-		public float wz;
-		public float xw;
-		public float yw;
-		public float zw;
-		public float ww;
-		[Version (since = "1.6")]
-		public Cogl.Matrix? copy ();
-		[Version (since = "1.4")]
-		public static Cogl.Bool equal (void* v1, void* v2);
-		[Version (since = "1.6")]
-		public void free ();
-		public void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
-		public unowned float[] get_array ();
-		[Version (since = "1.2")]
-		public Cogl.Bool get_inverse (out Cogl.Matrix inverse);
-		public void init_from_euler (Cogl.Euler euler);
-		public void init_from_quaternion (Cogl.Quaternion quaternion);
-		[Version (since = "2.0")]
-		public void init_translation (float tx, float ty, float tz);
-		[Version (since = "1.8")]
-		public Cogl.Bool is_identity ();
-		[Version (since = "1.8")]
-		public void look_at (float eye_position_x, float eye_position_y, float eye_position_z, float object_x, float object_y, float object_z, float world_up_x, float world_up_y, float world_up_z);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void ortho (float left, float right, float bottom, float top, float near, float far);
-		[Version (since = "1.10")]
-		public void orthographic (float x_1, float y_1, float x_2, float y_2, float near, float far);
-		public void perspective (float fov_y, float aspect, float z_near, float z_far);
-		public void project_points (int n_components, size_t stride_in, void* points_in, size_t stride_out, void* points_out, int n_points);
-		public void rotate (float angle, float x, float y, float z);
-		[Version (since = "2.0")]
-		public void rotate_euler (Cogl.Euler euler);
-		[Version (since = "2.0")]
-		public void rotate_quaternion (Cogl.Quaternion quaternion);
-		public void scale (float sx, float sy, float sz);
-		public void transform_point (ref float x, ref float y, ref float z, ref float w);
-		public void transform_points (int n_components, size_t stride_in, void* points_in, size_t stride_out, void* points_out, int n_points);
-		public void translate (float x, float y, float z);
-		[Version (since = "1.10")]
-		public void transpose ();
-		[Version (since = "1.8")]
-		public void view_2d_in_frustum (float left, float right, float bottom, float top, float z_near, float z_2d, float width_2d, float height_2d);
-		[Version (since = "1.8")]
-		public void view_2d_in_perspective (float fov_y, float aspect, float z_near, float z_2d, float width_2d, float height_2d);
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.16")]
-	public struct OnscreenDirtyInfo {
-		public int x;
-		public int y;
-		public int width;
-		public int height;
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	public struct TextureVertex {
-		public float x;
-		public float y;
-		public float z;
-		public float tx;
-		public float ty;
-		public Cogl.Color color;
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.4")]
-	public struct UserDataKey {
-		public int unused;
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "_CoglColorSizeCheck", has_type_id = false)]
-	public struct _ColorSizeCheck {
-		[CCode (array_length = false)]
-		public weak char[] compile_time_assert_CoglColor_size;
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "_CoglMatrixSizeCheck", has_type_id = false)]
-	public struct _MatrixSizeCheck {
-		[CCode (array_length = false)]
-		public weak char[] compile_time_assert_CoglMatrix_size;
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "_CoglTextureVertexSizeCheck", has_type_id = false)]
-	public struct _TextureVertexSizeCheck {
-		[CCode (array_length = false)]
-		public weak char[] compile_time_assert_CoglTextureVertex_size;
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_ATTRIBUTE_TYPE_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum AttributeType {
-		BYTE,
-		UNSIGNED_BYTE,
-		SHORT,
-		UNSIGNED_SHORT,
-		FLOAT
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BITMAP_ERROR_", has_type_id = false)]
-	[Version (since = "1.4")]
-	public enum BitmapError {
-		FAILED,
-		UNKNOWN_TYPE,
-		CORRUPT_IMAGE
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BLEND_STRING_ERROR_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum BlendStringError {
-		PARSE_ERROR,
-		ARGUMENT_PARSE_ERROR,
-		INVALID_ERROR,
-		GPU_UNSUPPORTED_ERROR;
-		public static uint32 quark ();
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BUFFER_BIT_", has_type_id = false)]
-	[Flags]
-	[Version (since = "1.0")]
-	public enum BufferBit {
-		COLOR,
-		DEPTH,
-		STENCIL
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_", has_type_id = false)]
-	[Flags]
-	[Version (since = "0.8")]
-	public enum BufferTarget {
-		WINDOW_BUFFER,
-		OFFSCREEN_BUFFER
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_COLOR_MASK_", has_type_id = false)]
-	[Flags]
-	public enum ColorMask {
-		NONE,
-		RED,
-		GREEN,
-		BLUE,
-		ALPHA,
-		ALL
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_DEPTH_TEST_FUNCTION_", has_type_id = false)]
-	public enum DepthTestFunction {
-		NEVER,
-		LESS,
-		EQUAL,
-		LEQUAL,
-		GREATER,
-		NOTEQUAL,
-		GEQUAL,
-		ALWAYS
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FEATURE_", has_type_id = false)]
-	[Flags]
-	[Version (since = "0.8")]
-	public enum FeatureFlags {
-		TEXTURE_RECTANGLE,
-		TEXTURE_NPOT,
-		TEXTURE_YUV,
-		TEXTURE_READ_PIXELS,
-		SHADERS_GLSL,
-		OFFSCREEN,
-		OFFSCREEN_MULTISAMPLE,
-		OFFSCREEN_BLIT,
-		FOUR_CLIP_PLANES,
-		STENCIL_BUFFER,
-		VBOS,
-		PBOS,
-		UNSIGNED_INT_INDICES,
-		DEPTH_RANGE,
-		TEXTURE_NPOT_BASIC,
-		TEXTURE_NPOT_MIPMAP,
-		TEXTURE_NPOT_REPEAT,
-		POINT_SPRITE,
-		TEXTURE_3D,
-		MAP_BUFFER_FOR_READ,
-		MAP_BUFFER_FOR_WRITE,
-		ONSCREEN_MULTIPLE,
-		DEPTH_TEXTURE
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FILTER_", has_type_id = false)]
-	public enum FilterReturn {
-		CONTINUE,
-		REMOVE
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FOG_MODE_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum FogMode {
-		LINEAR,
-		EXPONENTIAL,
-		EXPONENTIAL_SQUARED
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FRAME_EVENT_", has_type_id = false)]
-	[Version (since = "1.14")]
-	public enum FrameEvent {
-		SYNC,
-		COMPLETE
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FRAMEBUFFER_ERROR_", has_type_id = false)]
-	public enum FramebufferError {
-		[CCode (cname = "COGL_FRAMEBUFFER_ERROR_ALLOCATE")]
-		FRAMEBUFFER_ERROR_ALLOCATE;
-		public static uint32 quark ();
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_INDICES_TYPE_UNSIGNED_", has_type_id = false)]
-	public enum IndicesType {
-		BYTE,
-		SHORT,
-		INT
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_ALPHA_FUNC_", has_type_id = false)]
-	public enum MaterialAlphaFunc {
-		NEVER,
-		LESS,
-		EQUAL,
-		LEQUAL,
-		GREATER,
-		NOTEQUAL,
-		GEQUAL,
-		ALWAYS
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_FILTER_", has_type_id = false)]
-	public enum MaterialFilter {
-		NEAREST,
-		LINEAR,
-		NEAREST_MIPMAP_NEAREST,
-		LINEAR_MIPMAP_NEAREST,
-		NEAREST_MIPMAP_LINEAR,
-		LINEAR_MIPMAP_LINEAR
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_LAYER_TYPE_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum MaterialLayerType {
-		[CCode (cname = "COGL_MATERIAL_LAYER_TYPE_TEXTURE")]
-		MATERIAL_LAYER_TYPE_TEXTURE
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_WRAP_MODE_", has_type_id = false)]
-	[Version (since = "1.4")]
-	public enum MaterialWrapMode {
-		REPEAT,
-		CLAMP_TO_EDGE,
-		AUTOMATIC
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIPELINE_ALPHA_FUNC_", has_type_id = false)]
-	public enum PipelineAlphaFunc {
-		NEVER,
-		LESS,
-		EQUAL,
-		LEQUAL,
-		GREATER,
-		NOTEQUAL,
-		GEQUAL,
-		ALWAYS
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIPELINE_CULL_FACE_MODE_", has_type_id = false)]
-	public enum PipelineCullFaceMode {
-		NONE,
-		FRONT,
-		BACK,
-		BOTH
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIPELINE_FILTER_", has_type_id = false)]
-	public enum PipelineFilter {
-		NEAREST,
-		LINEAR,
-		NEAREST_MIPMAP_NEAREST,
-		LINEAR_MIPMAP_NEAREST,
-		NEAREST_MIPMAP_LINEAR,
-		LINEAR_MIPMAP_LINEAR
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIPELINE_WRAP_MODE_", has_type_id = false)]
-	[Version (since = "2.0")]
-	public enum PipelineWrapMode {
-		REPEAT,
-		MIRRORED_REPEAT,
-		CLAMP_TO_EDGE,
-		AUTOMATIC
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIXEL_FORMAT_", has_type_id = false)]
-	[Flags]
-	[Version (since = "0.8")]
-	public enum PixelFormat {
-		ANY,
-		A_8,
-		RGB_565,
-		RGBA_4444,
-		RGBA_5551,
-		YUV,
-		G_8,
-		RG_88,
-		RGB_888,
-		BGR_888,
-		RGBA_8888,
-		BGRA_8888,
-		ARGB_8888,
-		ABGR_8888,
-		RGBA_1010102,
-		BGRA_1010102,
-		ARGB_2101010,
-		ABGR_2101010,
-		RGBA_8888_PRE,
-		BGRA_8888_PRE,
-		ARGB_8888_PRE,
-		ABGR_8888_PRE,
-		RGBA_4444_PRE,
-		RGBA_5551_PRE,
-		RGBA_1010102_PRE,
-		BGRA_1010102_PRE,
-		ARGB_2101010_PRE,
-		ABGR_2101010_PRE,
-		DEPTH_16,
-		DEPTH_32,
-		DEPTH_24_STENCIL_8
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_READ_PIXELS_COLOR_", has_type_id = false)]
-	[Flags]
-	[Version (since = "1.0")]
-	public enum ReadPixelsFlags {
-		[CCode (cname = "COGL_READ_PIXELS_COLOR_BUFFER")]
-		READ_PIXELS_COLOR_BUFFER
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_RENDERER_ERROR_", has_type_id = false)]
-	public enum RendererError {
-		XLIB_DISPLAY_OPEN,
-		BAD_CONSTRAINT
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_SHADER_TYPE_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum ShaderType {
-		VERTEX,
-		FRAGMENT
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_STEREO_", has_type_id = false)]
-	public enum StereoMode {
-		BOTH,
-		LEFT,
-		RIGHT
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_SYSTEM_ERROR_", has_type_id = false)]
-	[Version (since = "1.4")]
-	public enum SystemError {
-		UNSUPPORTED,
-		NO_MEMORY
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_COMPONENTS_", has_type_id = false)]
-	[Version (since = "1.18")]
-	public enum TextureComponents {
-		A,
-		RG,
-		RGB,
-		RGBA,
-		DEPTH
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_ERROR_", has_type_id = false)]
-	[Version (since = "1.8")]
-	public enum TextureError {
-		SIZE,
-		FORMAT,
-		BAD_PARAMETER,
-		TYPE;
-		public static uint32 quark ();
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_", has_type_id = false)]
-	[Flags]
-	[Version (since = "1.0")]
-	public enum TextureFlags {
-		NONE,
-		NO_AUTO_MIPMAP,
-		NO_SLICING,
-		NO_ATLAS
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_TYPE_", has_type_id = false)]
-	[Version (since = "1.10")]
-	public enum TextureType {
-		@2D,
-		@3D,
-		RECTANGLE
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_VERTICES_MODE_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum VerticesMode {
-		POINTS,
-		LINES,
-		LINE_LOOP,
-		LINE_STRIP,
-		TRIANGLES,
-		TRIANGLE_STRIP,
-		TRIANGLE_FAN
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_WINDING_", has_type_id = false)]
-	public enum Winding {
-		CLOCKWISE,
-		COUNTER_CLOCKWISE
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_WINSYS_FEATURE_", has_type_id = false)]
-	public enum WinsysFeature {
-		MULTIPLE_ONSCREEN,
-		SWAP_THROTTLE,
-		VBLANK_COUNTER,
-		VBLANK_WAIT,
-		TEXTURE_FROM_PIXMAP,
-		SWAP_BUFFERS_EVENT,
-		SWAP_REGION,
-		SWAP_REGION_THROTTLE,
-		SWAP_REGION_SYNCHRONIZED,
-		BUFFER_AGE,
-		SYNC_AND_COMPLETE_EVENT,
-		N_FEATURES
-	}
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
-	[Version (since = "1.8")]
-	public delegate void DebugObjectForeachTypeCallback (Cogl.DebugObjectTypeInfo info);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-	public delegate Cogl.Bool MaterialLayerCallback (Cogl.Material material, int layer_index);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
-	[Version (since = "1.16")]
-	public delegate void OnscreenDirtyCallback (Cogl.Onscreen onscreen, Cogl.OnscreenDirtyInfo info);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 3.9)]
-	[Version (since = "2.0")]
-	public delegate void OnscreenResizeCallback (Cogl.Onscreen onscreen, int width, int height);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
-	public delegate void OnscreenX11MaskCallback (Cogl.Onscreen onscreen, uint32 event_mask);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
-	[Version (since = "2.0")]
-	public delegate Cogl.Bool PipelineLayerCallback (Cogl.Pipeline pipeline, int layer_index);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
-	public delegate void SwapBuffersNotify (Cogl.Framebuffer framebuffer);
-	[CCode (cheader_filename = "cogl/cogl.h", has_target = false)]
-	public delegate void UserDataDestroyCallback (void* data);
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_AFIRST_BIT")]
-	public const int AFIRST_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_A_BIT")]
-	public const int A_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_BGR_BIT")]
-	public const int BGR_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_DEPTH_BIT")]
-	public const int DEPTH_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_PREMULT_BIT")]
-	public const int PREMULT_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_STENCIL_BIT")]
-	public const int STENCIL_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_TEXTURE_MAX_WASTE")]
-	public const int TEXTURE_MAX_WASTE;
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void begin_gl ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.2")]
-	public static Cogl.Bool check_extension (string name, string ext);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void clear (Cogl.Color color, ulong buffers);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static Cogl.Bool clutter_check_extension_CLUTTER (string name, string ext);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static Cogl.Bool clutter_winsys_has_feature_CLUTTER (Cogl.WinsysFeature feature);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "2.0")]
-	public static void debug_matrix_print (Cogl.Matrix matrix);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.8")]
-	public static void debug_object_foreach_type (Cogl.DebugObjectForeachTypeCallback func);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.8")]
-	public static void debug_object_print_instances ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void disable_fog ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void end_gl ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static Cogl.Bool features_available (Cogl.FeatureFlags features);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void flush ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8.2")]
-	public static void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.Bool get_backface_culling_enabled ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.8")]
-	public static void get_bitmasks (out int red, out int green, out int blue, out int alpha);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.Bool get_depth_test_enabled ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.8")]
-	public static unowned Cogl.Framebuffer get_draw_framebuffer ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
-	public static Cogl.FeatureFlags get_features ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static Cogl.Matrix get_modelview_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static GLib.OptionGroup get_option_group ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static Cogl.Matrix get_projection_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-	public static void* get_source ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void get_viewport ([CCode (array_length = false)] out float v[4]);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.18")]
-	public static GLib.Type gtype_matrix_get_type ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.10")]
-	public static Cogl.Bool is_framebuffer (void* object);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.10")]
-	public static Cogl.Bool is_onscreen (void* object);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "2.0")]
-	public static Cogl.Bool is_pipeline (void* object);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-	public static Cogl.Bool is_vertex_buffer_indices (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-	public static void ortho (float left, float right, float bottom, float top, float near, float far);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void perspective (float fovy, float aspect, float z_near, float z_far);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void polygon (Cogl.TextureVertex vertices, uint n_vertices, Cogl.Bool use_color);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void pop_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-	public static void pop_source ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void push_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-	public static void push_source (void* material);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static void rectangle (float x_1, float y_1, float x_2, float y_2);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void rectangle_with_multitexture_coords (float x1, float y1, float x2, float y2, [CCode (array_length = false)] float[] tex_coords, int tex_coords_len);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void rectangle_with_texture_coords (float x1, float y1, float x2, float y2, float tx1, float ty1, float tx2, float ty2);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void rectangles ([CCode (array_length = false)] float[] verts, uint n_rects);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "0.8.6")]
-	public static void rectangles_with_texture_coords ([CCode (array_length = false)] float[] verts, uint n_rects);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void rotate (float angle, float x, float y, float z);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void scale (float x, float y, float z);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void set_backface_culling_enabled (Cogl.Bool setting);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void set_depth_test_enabled (Cogl.Bool setting);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void set_fog (Cogl.Color fog_color, Cogl.FogMode mode, float density, float z_near, float z_far);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void set_modelview_matrix (Cogl.Matrix matrix);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void set_projection_matrix (Cogl.Matrix matrix);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source (void* material);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_color (Cogl.Color color);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_color4f (float red, float green, float blue, float alpha);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_color4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_texture (Cogl.Texture texture);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.8", since = "1.2")]
-	public static void set_viewport (int x, int y, int width, int height);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void shader_compile (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static string shader_get_info_log (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.ShaderType shader_get_type (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.Bool shader_is_compiled (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.Handle shader_ref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void shader_source (Cogl.Handle shader, string source);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void shader_unref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.18", since = "1.0")]
-	public static Cogl.Texture texture_new_from_bitmap (Cogl.Bitmap bitmap, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-	public static Cogl.Texture texture_new_from_data (int width, int height, Cogl.TextureFlags flags, Cogl.PixelFormat format, Cogl.PixelFormat internal_format, int rowstride, uint8 data);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-	public static Cogl.Texture texture_new_from_file (string filename, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format) throws GLib.Error;
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-	public static Cogl.Texture texture_new_from_foreign (uint gl_handle, uint gl_target, uint width, uint height, uint x_pot_waste, uint y_pot_waste, Cogl.PixelFormat format);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-	public static Cogl.Texture texture_new_with_size (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "1.4")]
-	public static void transform (Cogl.Matrix matrix);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void translate (float x, float y, float z);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_add (Cogl.Handle handle, string attribute_name, uint8 n_components, Cogl.AttributeType type, Cogl.Bool normalized, uint16 stride, void* pointer);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_delete (Cogl.Handle handle, string attribute_name);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_disable (Cogl.Handle handle, string attribute_name);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_draw (Cogl.Handle handle, Cogl.VerticesMode mode, int first, int count);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_draw_elements (Cogl.Handle handle, Cogl.VerticesMode mode, Cogl.Handle indices, int min_index, int max_index, int indices_offset, int count);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_enable (Cogl.Handle handle, string attribute_name);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static uint vertex_buffer_get_n_vertices (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.Handle vertex_buffer_indices_get_for_quads (uint n_indices);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.IndicesType vertex_buffer_indices_get_type (Cogl.Handle indices);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.Handle vertex_buffer_new (uint n_vertices);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.2")]
-	public static Cogl.Handle vertex_buffer_ref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_submit (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.2")]
-	public static void vertex_buffer_unref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.8", since = "0.8.2")]
-	public static void viewport (uint width, uint height);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static uint32 x11_onscreen_get_visual_xid (Cogl.Onscreen onscreen);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.10")]
-	public static uint32 x11_onscreen_get_window_xid (Cogl.Onscreen onscreen);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "2.0")]
-	public static void x11_onscreen_set_foreign_window_xid (Cogl.Onscreen onscreen, uint32 xid, [CCode (scope = "async")] Cogl.OnscreenX11MaskCallback update);
-}
diff --git vapi/mutter-clutter-5-custom.vala vapi/mutter-clutter-5-custom.vala
deleted file mode 100644
index b8d838d0..00000000
--- vapi/mutter-clutter-5-custom.vala
+++ /dev/null
@@ -1,158 +0,0 @@
-namespace Clutter {
-  [CCode (type_id = "CLUTTER_TYPE_ACTOR_BOX", cheader_filename = "clutter/clutter.h")]
-  public struct ActorBox {
-    [CCode (cname = "clutter_actor_box_from_vertices")]
-    public ActorBox.from_vertices (Clutter.Vertex[] verts);
-  }
-
-  public struct Matrix : Cogl.Matrix {
-  }
-
-  public class Backend : GLib.Object {
-    [NoWrapper]
-    public virtual void add_options (GLib.OptionGroup group);
-    [NoWrapper]
-    public virtual bool create_context () throws GLib.Error;
-    [NoWrapper]
-    public virtual unowned Clutter.StageWindow create_stage (Clutter.Stage wrapper) throws GLib.Error;
-    [NoWrapper]
-    public virtual void ensure_context (Clutter.Stage stage);
-    [NoWrapper]
-    public virtual unowned Clutter.DeviceManager get_device_manager ();
-    [NoWrapper]
-    public virtual Clutter.FeatureFlags get_features ();
-    [NoWrapper]
-    public virtual void init_events ();
-    [NoWrapper]
-    public virtual void init_features ();
-    [NoWrapper]
-    public virtual bool post_parse () throws GLib.Error;
-    [NoWrapper]
-    public virtual bool pre_parse () throws GLib.Error;
-    [NoWrapper]
-    public virtual void redraw (Clutter.Stage stage);
-  }
-
-  [CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_box_get_type ()")]
-  public class Box : Clutter.Actor {
-    public Clutter.LayoutManager layout_manager { get; set; }
-  }
-
-  [CCode (type_id = "CLUTTER_TYPE_COLOR", cheader_filename = "clutter/clutter.h")]
-  public struct Color {
-    [CCode (cname = "clutter_color_from_hls")]
-    public Color.from_hls (float hue, float luminance, float saturation);
-    [CCode (cname = "clutter_color_from_pixel")]
-    public Color.from_pixel (uint32 pixel);
-    [CCode (cname = "clutter_color_from_string")]
-    public Color.from_string (string str);
-    [CCode (cname = "clutter_color_from_string")]
-    public bool parse_string (string str);
-    public static unowned Clutter.Color? get_static (Clutter.StaticColor color);
-  }
-
-  [CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_container_get_type ()")]
-  public interface Container : GLib.Object {
-    public void add (params Clutter.Actor[] actors);
-    [CCode (cname = "clutter_container_class_find_child_property")]
-    public class unowned GLib.ParamSpec find_child_property (string property_name);
-    [CCode (cname = "clutter_container_class_list_child_properties")]
-    public class unowned GLib.ParamSpec[] list_child_properties ();
-  }
-
-  [CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_event_get_type ()")]
-  [Compact]
-  public class Event {
-    public Clutter.AnyEvent any { [CCode (cname = "(ClutterAnyEvent *)")] get; }
-    public Clutter.ButtonEvent button { [CCode (cname = "(ClutterButtonEvent *)")] get; }
-    public Clutter.CrossingEvent crossing { [CCode (cname = "(ClutterCrossingEvent *)")] get; }
-    public Clutter.KeyEvent key { [CCode (cname = "(ClutterKeyEvent *)")] get; }
-    public Clutter.MotionEvent motion { [CCode (cname = "(ClutterMotionEvent *)")] get; }
-    public Clutter.ScrollEvent scroll { [CCode (cname = "(ClutterScrollEvent *)")] get; }
-    public Clutter.StageStateEvent stage_state { [CCode (cname = "(ClutterStageStateEvent *)")] get; }
-    public Clutter.TouchEvent touch { [CCode (cname = "(ClutterTouchEvent *)")] get; }
-    public Clutter.TouchpadPinchEvent touchpad_pinch { [CCode (cname = "(ClutterTouchpadPinchEvent *)")] get; }
-    public Clutter.TouchpadSwipeEvent touchpad_swipe { [CCode (cname = "(ClutterTouchpadSwipeEvent *)")] get; }
-  }
-
-  [CCode (type_id = "clutter_stage_get_type ()", cheader_filename = "clutter/clutter.h")]
-  public class Stage : Clutter.Group {
-    [CCode (cname = "clutter_redraw")]
-    public void redraw ();
-  }
-
-  [CCode (cheader_filename = "clutter/clutter.h")]
-  public interface StageWindow : GLib.Object {
-    [NoWrapper]
-    public abstract void add_redraw_clip (Clutter.Geometry stage_rectangle);
-    [NoWrapper]
-    public abstract void get_geometry (Clutter.Geometry geometry);
-    [NoWrapper]
-    public abstract int get_pending_swaps ();
-    [NoWrapper]
-    public abstract unowned Clutter.Actor get_wrapper ();
-    [NoWrapper]
-    public abstract bool has_redraw_clips ();
-    [NoWrapper]
-    public abstract void hide ();
-    [NoWrapper]
-    public abstract bool ignoring_redraw_clips ();
-    [NoWrapper]
-    public abstract bool realize ();
-    [NoWrapper]
-    public abstract void resize (int width, int height);
-    [NoWrapper]
-    public abstract void set_cursor_visible (bool cursor_visible);
-    [NoWrapper]
-    public abstract void set_fullscreen (bool is_fullscreen);
-    [NoWrapper]
-    public abstract void set_title (string title);
-    [NoWrapper]
-    public abstract void set_user_resizable (bool is_resizable);
-    [NoWrapper]
-    public abstract void show (bool do_raise);
-    [NoWrapper]
-    public abstract void unrealize ();
-  }
-
-  [CCode (type_id = "clutter_texture_get_type ()", cheader_filename = "clutter/clutter.h")]
-  public class Texture : Clutter.Actor {
-    public Cogl.Material cogl_material { get; set; }
-    public Cogl.Texture cogl_texture { get; set; }
-  }
-
-  [Compact]
-  [CCode (cheader_filename = "clutter/clutter.h")]
-  public class TimeoutPool {
-    [CCode (has_construct_function = false)]
-    public TimeoutPool (int priority);
-  }
-
-  [CCode (cprefix = "CLUTTER_FEATURE_", cheader_filename = "clutter/clutter.h")]
-  [Flags]
-  public enum FeatureFlags {
-    TEXTURE_NPOT;
-    [CCode (cname = "clutter_feature_available")]
-    public bool is_available ();
-    [CCode (cname = "clutter_feature_get_all")]
-    public static Clutter.FeatureFlags @get ();
-  }
-
-  [CCode (type_id = "CLUTTER_TYPE_UNITS", cheader_filename = "clutter/clutter.h")]
-  public struct Units {
-    [CCode (cname = "clutter_units_from_cm")]
-    public Units.from_cm (float cm);
-    [CCode (cname = "clutter_units_from_em")]
-    public Units.from_em (float em);
-    [CCode (cname = "clutter_units_from_em_for_font")]
-    public Units.from_em_for_font (string font_name, float em);
-    [CCode (cname = "clutter_units_from_mm")]
-    public Units.from_mm (float mm);
-    [CCode (cname = "clutter_units_from_pixels")]
-    public Units.from_pixels (int px);
-    [CCode (cname = "clutter_units_from_pt")]
-    public Units.from_pt (float pt);
-    [CCode (cname = "clutter_units_from_string")]
-    public Units.from_string (string str);
-  }
-}
diff --git vapi/mutter-clutter-4-custom.vala vapi/mutter-clutter-6-custom.vala
similarity index 92%
rename from vapi/mutter-clutter-4-custom.vala
rename to vapi/mutter-clutter-6-custom.vala
index b8d838d0..89224be6 100644
--- vapi/mutter-clutter-4-custom.vala
+++ vapi/mutter-clutter-6-custom.vala
@@ -1,9 +1,4 @@
 namespace Clutter {
-  [CCode (type_id = "CLUTTER_TYPE_ACTOR_BOX", cheader_filename = "clutter/clutter.h")]
-  public struct ActorBox {
-    [CCode (cname = "clutter_actor_box_from_vertices")]
-    public ActorBox.from_vertices (Clutter.Vertex[] verts);
-  }
 
   public struct Matrix : Cogl.Matrix {
   }
@@ -18,8 +13,6 @@ namespace Clutter {
     [NoWrapper]
     public virtual void ensure_context (Clutter.Stage stage);
     [NoWrapper]
-    public virtual unowned Clutter.DeviceManager get_device_manager ();
-    [NoWrapper]
     public virtual Clutter.FeatureFlags get_features ();
     [NoWrapper]
     public virtual void init_events ();
@@ -83,10 +76,6 @@ namespace Clutter {
 
   [CCode (cheader_filename = "clutter/clutter.h")]
   public interface StageWindow : GLib.Object {
-    [NoWrapper]
-    public abstract void add_redraw_clip (Clutter.Geometry stage_rectangle);
-    [NoWrapper]
-    public abstract void get_geometry (Clutter.Geometry geometry);
     [NoWrapper]
     public abstract int get_pending_swaps ();
     [NoWrapper]
diff --git vapi/mutter-clutter-5.deps vapi/mutter-clutter-6.deps
similarity index 63%
rename from vapi/mutter-clutter-5.deps
rename to vapi/mutter-clutter-6.deps
index 3f5a92a6..7a70d6df 100644
--- vapi/mutter-clutter-5.deps
+++ vapi/mutter-clutter-6.deps
@@ -1,4 +1,4 @@
 atk
 cairo
 json-glib-1.0
-mutter-cogl-5
+mutter-cogl-6
diff --git vapi/mutter-clutter-5.vapi vapi/mutter-clutter-6.vapi
similarity index 93%
rename from vapi/mutter-clutter-5.vapi
rename to vapi/mutter-clutter-6.vapi
index 24f7f6b1..0130a93c 100644
--- vapi/mutter-clutter-5.vapi
+++ vapi/mutter-clutter-6.vapi
@@ -1,6 +1,6 @@
-/* mutter-clutter-5.vapi generated by vapigen, do not modify. */
+/* mutter-clutter-6.vapi generated by vapigen, do not modify. */
 
-[CCode (cprefix = "Clutter", gir_namespace = "Clutter", gir_version = "5", lower_case_cprefix = "clutter_")]
+[CCode (cprefix = "Clutter", gir_namespace = "Clutter", gir_version = "6", lower_case_cprefix = "clutter_")]
 namespace Clutter {
 	namespace Key {
 		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_0")]
@@ -4661,22 +4661,14 @@ namespace Clutter {
 		public void allocate_preferred_size (Clutter.AllocationFlags flags);
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
 		public unowned Clutter.Animation animate (ulong mode, uint duration, ...);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public unowned Clutter.Animation animate_with_alpha (Clutter.Alpha alpha, ...);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public unowned Clutter.Animation animate_with_alphav (Clutter.Alpha alpha, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5)] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5)] GLib.Value[] values);
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
 		public unowned Clutter.Animation animate_with_timeline (ulong mode, Clutter.Timeline timeline, ...);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Clutter.Animation animate_with_timelinev (ulong mode, Clutter.Timeline timeline, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] GLib.Value[] values);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Clutter.Animation animatev (ulong mode, uint duration, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] GLib.Value[] values);
 		[Version (since = "0.6")]
-		public Clutter.Vertex apply_relative_transform_to_point (Clutter.Actor? ancestor, Clutter.Vertex point);
+		public void apply_relative_transform_to_point (Clutter.Actor? ancestor, Graphene.Point3D point, out unowned Graphene.Point3D vertex);
 		[NoWrapper]
 		public virtual void apply_transform (ref Clutter.Matrix matrix);
 		[Version (since = "0.4")]
-		public Clutter.Vertex apply_transform_to_point (Clutter.Vertex point);
+		public void apply_transform_to_point (Graphene.Point3D point, out unowned Graphene.Point3D vertex);
 		[Version (since = "1.24")]
 		public void bind_model (GLib.ListModel? model, owned Clutter.ActorCreateChildFunc create_child_func);
 		[Version (since = "1.4")]
@@ -4688,20 +4680,19 @@ namespace Clutter {
 		[Version (since = "1.4")]
 		public bool contains (Clutter.Actor descendant);
 		[Version (since = "1.8")]
-		public void continue_paint ();
+		public void continue_paint (Clutter.PaintContext paint_context);
+		public void continue_pick (Clutter.PickContext pick_context);
 		[Version (since = "1.0")]
 		public Pango.Context create_pango_context ();
 		[Version (since = "1.0")]
 		public Pango.Layout create_pango_layout (string? text);
 		[Version (since = "1.10")]
 		public void destroy_all_children ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void detach_animation ();
 		[CCode (cname = "clutter_actor_event")]
 		[Version (since = "0.6")]
 		public bool emit_event (Clutter.Event event, bool capture);
 		[Version (since = "0.4")]
-		public void get_abs_allocation_vertices ([CCode (array_length = false)] Clutter.Vertex verts[4]);
+		public void get_abs_allocation_vertices ([CCode (array_length = false)] Graphene.Point3D verts[4]);
 		public virtual unowned Atk.Object get_accessible ();
 		[Version (since = "1.4")]
 		public unowned Clutter.Action get_action (string name);
@@ -4709,16 +4700,10 @@ namespace Clutter {
 		public GLib.List<weak Clutter.Action> get_actions ();
 		[Version (since = "0.8")]
 		public Clutter.ActorBox get_allocation_box ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public Clutter.Geometry get_allocation_geometry ();
 		[Version (since = "0.6")]
-		public void get_allocation_vertices (Clutter.Actor? ancestor, [CCode (array_length = false)] Clutter.Vertex verts[4]);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public void get_anchor_point (out float anchor_x, out float anchor_y);
+		public void get_allocation_vertices (Clutter.Actor? ancestor, [CCode (array_length = false)] Graphene.Point3D verts[4]);
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
 		public Clutter.Gravity get_anchor_point_gravity ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Clutter.Animation get_animation ();
 		[Version (since = "1.10")]
 		public Clutter.Color get_background_color ();
 		[CCode (cname = "clutter_get_actor_by_gid")]
@@ -4768,8 +4753,6 @@ namespace Clutter {
 		public bool get_fixed_position_set ();
 		[Version (since = "1.0")]
 		public Clutter.ActorFlags get_flags ();
-		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
-		public uint32 get_gid ();
 		[CCode (cname = "clutter_actor_has_pointer")]
 		[Version (since = "1.2")]
 		public bool get_has_pointer ();
@@ -4848,8 +4831,6 @@ namespace Clutter {
 		public Clutter.TextDirection get_text_direction ();
 		[Version (since = "1.12")]
 		public Clutter.Matrix get_transform ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public Clutter.Matrix get_transformation_matrix ();
 		[Version (since = "1.6")]
 		public unowned Clutter.PaintVolume get_transformed_paint_volume (Clutter.Actor relative_to_ancestor);
 		[Version (since = "0.8")]
@@ -4892,7 +4873,7 @@ namespace Clutter {
 		public bool has_mapped_clones ();
 		[Version (since = "1.8")]
 		public virtual bool has_overlaps ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
+		[NoWrapper]
 		public virtual void hide_all ();
 		[Version (since = "1.10")]
 		public void insert_child_above (Clutter.Actor child, Clutter.Actor? sibling);
@@ -4912,10 +4893,6 @@ namespace Clutter {
 		public bool is_scaled ();
 		[Version (since = "1.24")]
 		public bool is_visible ();
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void lower (Clutter.Actor? above);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void lower_bottom ();
 		[Version (since = "1.0")]
 		public virtual void map ();
 		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
@@ -4928,17 +4905,12 @@ namespace Clutter {
 		public bool needs_expand (Clutter.Orientation orientation);
 		[NoWrapper]
 		public virtual void paint_node (Clutter.PaintNode root);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
+		public void pick_box (Clutter.PickContext pick_context, Clutter.ActorBox box);
 		public void pop_internal ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
 		public void push_internal ();
 		public void queue_redraw ();
 		[Version (since = "1.10")]
 		public void queue_redraw_with_clip (Cairo.RectangleInt? clip);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void raise (Clutter.Actor? below);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void raise_top ();
 		[Version (since = "1.4")]
 		public void remove_action (Clutter.Action action);
 		[Version (since = "1.4")]
@@ -4960,8 +4932,6 @@ namespace Clutter {
 		public void remove_effect_by_name (string name);
 		[Version (since = "1.10")]
 		public void remove_transition (string name);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
-		public void reparent (Clutter.Actor new_parent);
 		[Version (since = "1.10")]
 		public void replace_child (Clutter.Actor old_child, Clutter.Actor new_child);
 		[Version (since = "1.10")]
@@ -5046,8 +5016,6 @@ namespace Clutter {
 		public void set_scale (double scale_x, double scale_y);
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
 		public void set_scale_full (double scale_x, double scale_y, float center_x, float center_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_scale_with_gravity (double scale_x, double scale_y, Clutter.Gravity gravity);
 		[Version (since = "1.12")]
 		public void set_scale_z (double scale_z);
 		public void set_size (float width, float height);
@@ -5110,11 +5078,8 @@ namespace Clutter {
 		[Version (since = "1.12")]
 		public bool child_transform_set { get; }
 		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public Clutter.Geometry clip { owned get; set; }
-		[NoAccessorMethod]
 		[Version (since = "1.12")]
-		public Clutter.Rect clip_rect { owned get; set; }
+		public Graphene.Rect clip_rect { owned get; set; }
 		[Version (since = "1.0")]
 		public bool clip_to_allocation { get; set; }
 		[NoAccessorMethod]
@@ -5199,12 +5164,12 @@ namespace Clutter {
 		public uint opacity { get; set; }
 		[NoAccessorMethod]
 		[Version (since = "1.12")]
-		public Clutter.Point pivot_point { owned get; set; }
+		public Graphene.Point pivot_point { owned get; set; }
 		[Version (since = "1.12")]
 		public float pivot_point_z { get; set; }
 		[NoAccessorMethod]
 		[Version (since = "1.12")]
-		public Clutter.Point position { owned get; set; }
+		public Graphene.Point position { owned get; set; }
 		[Version (since = "0.6")]
 		public bool reactive { get; set; }
 		[NoAccessorMethod]
@@ -5225,13 +5190,13 @@ namespace Clutter {
 		public double rotation_angle_z { get; set; }
 		[NoAccessorMethod]
 		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public Clutter.Vertex rotation_center_x { owned get; set; }
+		public Graphene.Point3D rotation_center_x { owned get; set; }
 		[NoAccessorMethod]
 		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public Clutter.Vertex rotation_center_y { owned get; set; }
+		public Graphene.Point3D rotation_center_y { owned get; set; }
 		[NoAccessorMethod]
 		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public Clutter.Vertex rotation_center_z { owned get; set; }
+		public Graphene.Point3D rotation_center_z { owned get; set; }
 		[NoAccessorMethod]
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
 		public Clutter.Gravity rotation_center_z_gravity { get; set; }
@@ -5257,7 +5222,7 @@ namespace Clutter {
 		public bool show_on_set_parent { get; set; }
 		[NoAccessorMethod]
 		[Version (since = "1.12")]
-		public Clutter.Size size { owned get; set; }
+		public Graphene.Size size { owned get; set; }
 		[Version (since = "1.0")]
 		public Clutter.TextDirection text_direction { get; set; }
 		[NoAccessorMethod]
@@ -5319,11 +5284,12 @@ namespace Clutter {
 		public virtual signal bool motion_event (Clutter.MotionEvent event);
 		[HasEmitter]
 		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public virtual signal void paint ();
+		public virtual signal void paint (Clutter.PaintContext paint_context);
 		[Version (since = "0.2")]
 		public virtual signal void parent_set (Clutter.Actor? old_parent);
+		[HasEmitter]
 		[Version (since = "1.0")]
-		public virtual signal void pick (Clutter.Color color);
+		public virtual signal void pick (Clutter.PickContext pick_context);
 		[HasEmitter]
 		[Version (since = "1.2")]
 		public virtual signal void queue_relayout ();
@@ -5361,6 +5327,11 @@ namespace Clutter {
 		public bool enabled { get; set; }
 		public string name { get; set; }
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_actor_node_get_type ()")]
+	public class ActorNode : Clutter.PaintNode {
+		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+		public ActorNode (Clutter.Actor actor);
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_align_constraint_get_type ()")]
 	[Version (since = "1.4")]
 	public class AlignConstraint : Clutter.Constraint {
@@ -5388,19 +5359,12 @@ namespace Clutter {
 		[Version (since = "1.0")]
 		public ulong get_mode ();
 		public unowned Clutter.Timeline get_timeline ();
-		[Version (since = "1.0")]
-		public static ulong register_closure (GLib.Closure closure);
-		[Version (since = "1.0")]
-		public static ulong register_func (Clutter.AlphaFunc func);
 		[Version (since = "0.8")]
 		public void set_closure (GLib.Closure closure);
 		public void set_func (owned Clutter.AlphaFunc func);
 		[Version (since = "1.0")]
 		public void set_mode (ulong mode);
 		public void set_timeline (Clutter.Timeline timeline);
-		[CCode (has_construct_function = false)]
-		[Version (since = "1.0")]
-		public Alpha.with_func (Clutter.Timeline timeline, owned Clutter.AlphaFunc func);
 		public double alpha { get; }
 		[Version (since = "1.0")]
 		public ulong mode { get; set construct; }
@@ -5411,35 +5375,26 @@ namespace Clutter {
 	public class Animation : GLib.Object, Clutter.Scriptable {
 		[CCode (has_construct_function = false)]
 		public Animation ();
-		public unowned Clutter.Animation bind (string property_name, GLib.Value final);
-		public unowned Clutter.Animation bind_interval (string property_name, owned Clutter.Interval interval);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public unowned Clutter.Alpha get_alpha ();
 		public uint get_duration ();
 		public unowned Clutter.Interval get_interval (string property_name);
 		public bool get_loop ();
 		public ulong get_mode ();
-		public unowned GLib.Object get_object ();
 		public unowned Clutter.Timeline get_timeline ();
 		public bool has_property (string property_name);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public void set_alpha (Clutter.Alpha alpha);
 		public void set_duration (uint msecs);
 		public void set_loop (bool loop);
 		public void set_mode (ulong mode);
 		public void set_object (GLib.Object object);
 		public void set_timeline (Clutter.Timeline? timeline);
-		public void unbind_property (string property_name);
-		public unowned Clutter.Animation update (string property_name, GLib.Value final);
-		public void update_interval (string property_name, Clutter.Interval interval);
+		[NoAccessorMethod]
 		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public Clutter.Alpha alpha { get; set; }
+		public Clutter.Alpha alpha { owned get; set; }
 		public uint duration { get; set; }
 		public bool loop { get; set; }
 		public ulong mode { get; set; }
-		public GLib.Object object { get; set; }
+		[NoAccessorMethod]
+		public GLib.Object object { owned get; set; }
 		public Clutter.Timeline timeline { get; set; }
-		[HasEmitter]
 		public virtual signal void completed ();
 		public virtual signal void started ();
 	}
@@ -5460,21 +5415,18 @@ namespace Clutter {
 		protected Backend ();
 		[NoWrapper]
 		public virtual void add_options (GLib.OptionGroup group);
-		public void bell_notify ();
 		[NoWrapper]
 		public virtual bool create_context () throws GLib.Error;
 		[NoWrapper]
 		public virtual unowned Clutter.StageWindow create_stage (Clutter.Stage wrapper) throws GLib.Error;
 		[NoWrapper]
 		public virtual void ensure_context (Clutter.Stage stage);
-		[NoWrapper]
-		public virtual unowned Clutter.DeviceManager get_device_manager ();
+		public unowned Clutter.Seat get_default_seat ();
 		[NoWrapper]
 		public virtual Clutter.FeatureFlags get_features ();
 		[Version (since = "0.8")]
 		public unowned Cairo.FontOptions get_font_options ();
 		public unowned Clutter.InputMethod get_input_method ();
-		public unowned Clutter.Keymap get_keymap ();
 		public double get_resolution ();
 		[NoWrapper]
 		public virtual void init_events ();
@@ -5496,95 +5448,11 @@ namespace Clutter {
 		[Version (since = "1.4")]
 		public signal void settings_changed ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public abstract class Behaviour : GLib.Object, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		protected Behaviour ();
-		public void actors_foreach (Clutter.BehaviourForeachFunc func);
-		[NoWrapper]
-		public virtual void alpha_notify (double alpha_value);
-		public void apply (Clutter.Actor actor);
-		public GLib.SList<weak Clutter.Actor> get_actors ();
-		public unowned Clutter.Alpha get_alpha ();
-		public int get_n_actors ();
-		public unowned Clutter.Actor get_nth_actor (int index_);
-		[Version (since = "0.4")]
-		public bool is_applied (Clutter.Actor actor);
-		public void remove (Clutter.Actor actor);
-		[Version (since = "0.4")]
-		public void remove_all ();
-		public void set_alpha (Clutter.Alpha alpha);
-		public Clutter.Alpha alpha { get; set; }
-		[Version (since = "0.4")]
-		public virtual signal void applied (Clutter.Actor actor);
-		[Version (since = "0.4")]
-		public virtual signal void removed (Clutter.Actor actor);
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_depth_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public class BehaviourDepth : Clutter.Behaviour, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
-		[Version (since = "0.4")]
-		public BehaviourDepth (Clutter.Alpha? alpha, int depth_start, int depth_end);
-		[Version (since = "0.6")]
-		public void get_bounds (out int depth_start, out int depth_end);
-		[Version (since = "0.6")]
-		public void set_bounds (int depth_start, int depth_end);
-		[NoAccessorMethod]
-		[Version (since = "0.4")]
-		public int depth_end { get; set; }
-		[NoAccessorMethod]
-		[Version (since = "0.4")]
-		public int depth_start { get; set; }
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_opacity_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public class BehaviourOpacity : Clutter.Behaviour, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
-		public BehaviourOpacity (Clutter.Alpha? alpha, uint8 opacity_start, uint8 opacity_end);
-		[Version (since = "0.6")]
-		public void get_bounds (out uint8 opacity_start, out uint8 opacity_end);
-		[Version (since = "0.6")]
-		public void set_bounds (uint8 opacity_start, uint8 opacity_end);
-		[NoAccessorMethod]
-		public uint opacity_end { get; set; }
-		[NoAccessorMethod]
-		public uint opacity_start { get; set; }
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_scale_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public class BehaviourScale : Clutter.Behaviour, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
-		public BehaviourScale (Clutter.Alpha? alpha, double x_scale_start, double y_scale_start, double x_scale_end, double y_scale_end);
-		[Version (since = "0.4")]
-		public void get_bounds (out double x_scale_start, out double y_scale_start, out double x_scale_end, out double y_scale_end);
-		[Version (since = "0.6")]
-		public void set_bounds (double x_scale_start, double y_scale_start, double x_scale_end, double y_scale_end);
-		[NoAccessorMethod]
-		[Version (since = "0.6")]
-		public double x_scale_end { get; set; }
-		[NoAccessorMethod]
-		[Version (since = "0.6")]
-		public double x_scale_start { get; set; }
-		[NoAccessorMethod]
-		[Version (since = "0.6")]
-		public double y_scale_end { get; set; }
-		[NoAccessorMethod]
-		[Version (since = "0.6")]
-		public double y_scale_start { get; set; }
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_bin_layout_get_type ()")]
 	[Version (since = "1.2")]
 	public class BinLayout : Clutter.LayoutManager {
 		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
 		public BinLayout (Clutter.BinAlignment x_align = Clutter.BinAlignment.START, Clutter.BinAlignment y_align = Clutter.BinAlignment.START);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void add (Clutter.Actor child, Clutter.BinAlignment x_align, Clutter.BinAlignment y_align);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void get_alignment (Clutter.Actor? child, out Clutter.BinAlignment x_align, out Clutter.BinAlignment y_align);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void set_alignment (Clutter.Actor? child, Clutter.BinAlignment x_align, Clutter.BinAlignment y_align);
 		[NoAccessorMethod]
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
 		public Clutter.BinAlignment x_align { get; set; }
@@ -5758,37 +5626,6 @@ namespace Clutter {
 		public float x;
 		public float y;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_cairo_texture_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-	public class CairoTexture : Clutter.Texture, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		public CairoTexture (uint width, uint height);
-		public void clear ();
-		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
-		public Cairo.Context create ();
-		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
-		public Cairo.Context create_region (int x_offset, int y_offset, int width, int height);
-		[Version (since = "1.8")]
-		public bool get_auto_resize ();
-		public void get_surface_size (out uint width, out uint height);
-		[Version (since = "1.8")]
-		public void invalidate ();
-		[Version (since = "1.8")]
-		public void invalidate_rectangle (Cairo.RectangleInt? rect);
-		[Version (since = "1.8")]
-		public void set_auto_resize (bool value);
-		public void set_surface_size (uint width, uint height);
-		[Version (since = "1.8")]
-		public bool auto_resize { get; set; }
-		[NoAccessorMethod]
-		public uint surface_height { get; set; }
-		[NoAccessorMethod]
-		public uint surface_width { get; set; }
-		[Version (since = "1.6")]
-		public virtual signal Cairo.Surface create_surface (uint width, uint height);
-		[Version (since = "1.8")]
-		public virtual signal bool draw (Cairo.Context cr);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_canvas_get_type ()")]
 	[Version (since = "1.10")]
 	public class Canvas : GLib.Object, Clutter.Content {
@@ -5920,62 +5757,24 @@ namespace Clutter {
 		public void set_factor (double factor);
 		public double factor { get; set; }
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_device_manager_get_type ()")]
-	[Version (since = "1.2")]
-	public abstract class DeviceManager : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected DeviceManager ();
-		[NoWrapper]
-		public virtual void add_device (Clutter.InputDevice device);
-		[NoWrapper]
-		public virtual void apply_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
-		[NoWrapper]
-		public virtual void compress_motion (Clutter.Event event, Clutter.Event to_discard);
-		public virtual Clutter.VirtualInputDevice create_virtual_device (Clutter.InputDeviceType device_type);
-		public virtual unowned Clutter.InputDevice get_core_device (Clutter.InputDeviceType device_type);
-		public static unowned Clutter.DeviceManager get_default ();
-		public virtual unowned Clutter.InputDevice get_device (int device_id);
-		public void get_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
-		public void get_pointer_a11y_settings (Clutter.PointerA11ySettings settings);
-		public virtual Clutter.VirtualDeviceType get_supported_virtual_device_types ();
-		public GLib.SList<weak Clutter.InputDevice> list_devices ();
-		public unowned GLib.SList<Clutter.InputDevice> peek_devices ();
-		[NoWrapper]
-		public virtual void remove_device (Clutter.InputDevice device);
-		[NoWrapper]
-		public virtual void select_stage_events (Clutter.Stage stage);
-		public void set_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
-		public void set_pointer_a11y_dwell_click_type (Clutter.PointerA11yDwellClickType click_type);
-		public void set_pointer_a11y_settings (Clutter.PointerA11ySettings settings);
-		[NoAccessorMethod]
-		public Clutter.Backend backend { owned get; construct; }
-		public signal void device_added (Clutter.InputDevice device);
-		public signal void device_removed (Clutter.InputDevice device);
-		public signal void kbd_a11y_flags_changed (uint settings_flags, uint changed_mask);
-		public signal void kbd_a11y_mods_state_changed (uint latched_mask, uint locked_mask);
-		public signal void ptr_a11y_dwell_click_type_changed (Clutter.PointerA11yDwellClickType click_type);
-		public signal void ptr_a11y_timeout_started (Clutter.InputDevice device, Clutter.PointerA11yTimeoutType timeout_type, uint delay);
-		public signal void ptr_a11y_timeout_stopped (Clutter.InputDevice device, Clutter.PointerA11yTimeoutType timeout_type);
-		public signal void tool_changed (Clutter.InputDevice object, Clutter.InputDeviceTool p0);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_drag_action_get_type ()")]
 	[Version (since = "1.4")]
 	public class DragAction : Clutter.Action {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public DragAction ();
-		public bool get_drag_area (Clutter.Rect drag_area);
+		public bool get_drag_area (Graphene.Rect drag_area);
 		public Clutter.DragAxis get_drag_axis ();
 		public unowned Clutter.Actor get_drag_handle ();
 		public void get_drag_threshold (out uint x_threshold, out uint y_threshold);
 		public void get_motion_coords (out float motion_x, out float motion_y);
 		public void get_press_coords (out float press_x, out float press_y);
-		public void set_drag_area (Clutter.Rect? drag_area);
+		public void set_drag_area (Graphene.Rect? drag_area);
 		public void set_drag_axis (Clutter.DragAxis axis);
 		public void set_drag_handle (Clutter.Actor? handle);
 		public void set_drag_threshold (int x_threshold, int y_threshold);
 		[NoAccessorMethod]
 		[Version (since = "1.12")]
-		public Clutter.Rect drag_area { owned get; set; }
+		public Graphene.Rect drag_area { owned get; set; }
 		[NoAccessorMethod]
 		[Version (since = "1.12")]
 		public bool drag_area_set { get; }
@@ -6011,13 +5810,13 @@ namespace Clutter {
 		[NoWrapper]
 		public virtual bool modify_paint_volume (Clutter.PaintVolume volume);
 		[NoWrapper]
-		public virtual void paint (Clutter.EffectPaintFlags flags);
+		public virtual void paint (Clutter.PaintContext paint_context, Clutter.EffectPaintFlags flags);
 		[NoWrapper]
-		public virtual void pick (Clutter.EffectPaintFlags flags);
+		public virtual void pick (Clutter.PickContext pick_context);
 		[NoWrapper]
-		public virtual void post_paint ();
+		public virtual void post_paint (Clutter.PaintContext paint_context);
 		[NoWrapper]
-		public virtual bool pre_paint ();
+		public virtual bool pre_paint (Clutter.PaintContext paint_context);
 		[Version (since = "1.8")]
 		public void queue_repaint ();
 	}
@@ -6068,7 +5867,7 @@ namespace Clutter {
 		public uint get_mode_group ();
 		public bool get_pad_event_details (out uint number, out uint mode, out double value);
 		[Version (since = "1.12")]
-		public void get_position (Clutter.Point position);
+		public void get_position (Graphene.Point position);
 		[Version (since = "1.0")]
 		public unowned Clutter.Actor get_related ();
 		[Version (since = "1.10")]
@@ -6308,7 +6107,7 @@ namespace Clutter {
 		[Version (since = "1.6")]
 		public bool get_axis_value ([CCode (array_length = false)] double[] axes, Clutter.InputAxis axis, out double value);
 		[Version (since = "1.12")]
-		public bool get_coords (Clutter.EventSequence? sequence, Clutter.Point point);
+		public bool get_coords (Clutter.EventSequence? sequence, Graphene.Point point);
 		[Version (since = "1.0")]
 		public int get_device_id ();
 		[Version (since = "1.6")]
@@ -6322,7 +6121,7 @@ namespace Clutter {
 		public bool get_enabled ();
 		[Version (since = "1.10")]
 		public unowned Clutter.Actor get_grabbed_actor ();
-		public int get_group_n_modes (int group);
+		public virtual int get_group_n_modes (int group);
 		[Version (since = "1.6")]
 		public bool get_has_cursor ();
 		[Version (since = "1.6")]
@@ -6344,16 +6143,17 @@ namespace Clutter {
 		public unowned Clutter.Stage get_pointer_stage ();
 		[Version (since = "1.22")]
 		public unowned string get_product_id ();
+		public unowned Clutter.Seat get_seat ();
 		[Version (since = "1.6")]
 		public GLib.List<weak Clutter.InputDevice> get_slave_devices ();
 		[Version (since = "1.22")]
 		public unowned string get_vendor_id ();
 		[Version (since = "1.10")]
 		public void grab (Clutter.Actor actor);
-		public bool is_grouped (Clutter.InputDevice other_device);
-		public bool is_mode_switch_button (uint group, uint button);
+		public virtual bool is_grouped (Clutter.InputDevice other_device);
+		public virtual bool is_mode_switch_button (uint group, uint button);
 		[Version (since = "1.10")]
-		public bool keycode_to_evdev (uint hardware_keycode, uint evdev_keycode);
+		public virtual bool keycode_to_evdev (uint hardware_keycode, uint evdev_keycode);
 		[Version (since = "1.12")]
 		public unowned Clutter.Actor sequence_get_grabbed_actor (Clutter.EventSequence sequence);
 		[Version (since = "1.12")]
@@ -6369,12 +6169,11 @@ namespace Clutter {
 		public void ungrab ();
 		[Version (since = "1.2")]
 		public void update_from_event (Clutter.Event event, bool update_stage);
+		[NoWrapper]
+		public virtual void update_from_tool (Clutter.InputDeviceTool tool);
 		[NoAccessorMethod]
 		[Version (since = "1.6")]
 		public Clutter.Backend backend { owned get; construct; }
-		[NoAccessorMethod]
-		[Version (since = "1.6")]
-		public Clutter.DeviceManager device_manager { owned get; construct; }
 		public Clutter.InputMode device_mode { get; construct; }
 		public string device_node { get; construct; }
 		[Version (since = "1.2")]
@@ -6397,6 +6196,7 @@ namespace Clutter {
 		public string name { owned get; construct; }
 		[Version (since = "1.22")]
 		public string product_id { get; construct; }
+		public Clutter.Seat seat { get; construct; }
 		[Version (since = "1.22")]
 		public string vendor_id { get; construct; }
 	}
@@ -6434,7 +6234,7 @@ namespace Clutter {
 		public void set_can_show_preedit (bool can_show_preedit);
 		public void set_content_hints (Clutter.InputContentHintFlags hint);
 		public void set_content_purpose (Clutter.InputContentPurpose purpose);
-		public void set_cursor_location (Clutter.Rect rect);
+		public void set_cursor_location (Graphene.Rect rect);
 		public void set_input_panel_state (Clutter.InputPanelState state);
 		[NoWrapper]
 		public virtual void set_preedit_text (string preedit, uint cursor);
@@ -6453,7 +6253,7 @@ namespace Clutter {
 		[NoWrapper]
 		public virtual void reset ();
 		[NoWrapper]
-		public virtual void set_cursor_location (Clutter.Rect rect);
+		public virtual void set_cursor_location (Graphene.Rect rect);
 		public void set_input_panel_state (Clutter.InputPanelState state);
 		public void set_preedit_text (string? preedit, uint cursor);
 		[NoWrapper]
@@ -6470,7 +6270,7 @@ namespace Clutter {
 		public Clutter.InputContentPurpose content_purpose { get; set; }
 		[HasEmitter]
 		public signal void commit (string text);
-		public signal void cursor_location_changed (Clutter.Rect object);
+		public signal void cursor_location_changed (Graphene.Rect object);
 		[HasEmitter]
 		public signal void delete_surrounding (uint offset, uint len);
 		public signal void input_panel_state (Clutter.InputPanelState object);
@@ -6546,27 +6346,31 @@ namespace Clutter {
 		[CCode (has_construct_function = false)]
 		protected Keymap ();
 		public virtual bool get_caps_lock_state ();
+		public virtual Pango.Direction get_direction ();
 		public virtual bool get_num_lock_state ();
 		public signal void state_changed ();
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_layer_node_get_type ()")]
+	public class LayerNode : Clutter.PaintNode {
+		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+		public LayerNode (Cogl.Matrix projection, Cairo.Rectangle viewport, float width, float height, uint8 opacity);
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_layout_manager_get_type ()")]
 	[Version (since = "1.2")]
 	public abstract class LayoutManager : GLib.InitiallyUnowned {
 		[CCode (has_construct_function = false)]
 		protected LayoutManager ();
 		public virtual void allocate (Clutter.Container container, Clutter.ActorBox allocation, Clutter.AllocationFlags flags);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public virtual unowned Clutter.Alpha begin_animation (uint duration, ulong mode);
 		public void child_get (Clutter.Container container, Clutter.Actor actor, ...);
 		public void child_get_property (Clutter.Container container, Clutter.Actor actor, string property_name, GLib.Value value);
 		public void child_set (Clutter.Container container, Clutter.Actor actor, ...);
 		public void child_set_property (Clutter.Container container, Clutter.Actor actor, string property_name, GLib.Value value);
 		[NoWrapper]
 		public virtual unowned Clutter.LayoutMeta create_child_meta (Clutter.Container container, Clutter.Actor actor);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
+		[NoWrapper]
 		public virtual void end_animation ();
 		public unowned GLib.ParamSpec find_child_property (string name);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
+		[NoWrapper]
 		public virtual double get_animation_progress ();
 		[Version (since = "1.0")]
 		public unowned Clutter.LayoutMeta get_child_meta (Clutter.Container container, Clutter.Actor actor);
@@ -6623,12 +6427,12 @@ namespace Clutter {
 		protected OffscreenEffect ();
 		public virtual Cogl.Handle create_texture (float width, float height);
 		[Version (since = "1.14")]
-		public bool get_target_rect (out unowned Clutter.Rect rect);
+		public bool get_target_rect (out unowned Graphene.Rect rect);
 		[Version (deprecated = true, deprecated_since = "1.14", since = "1.8")]
 		public bool get_target_size (out float width, out float height);
 		[Version (since = "1.10")]
 		public unowned Cogl.Handle get_texture ();
-		public virtual void paint_target ();
+		public virtual void paint_target (Clutter.PaintContext paint_context);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_page_turn_effect_get_type ()")]
 	[Version (since = "1.4")]
@@ -6645,6 +6449,16 @@ namespace Clutter {
 		public double period { get; set; }
 		public float radius { get; set; }
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", ref_function = "clutter_paint_context_ref", type_id = "clutter_paint_context_get_type ()", unref_function = "clutter_paint_context_unref")]
+	[Compact]
+	public class PaintContext {
+		public void destroy ();
+		public unowned Cogl.Framebuffer get_framebuffer ();
+		public void pop_framebuffer ();
+		public void push_framebuffer (Cogl.Framebuffer framebuffer);
+		public unowned Clutter.PaintContext @ref ();
+		public void unref ();
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_paint_node_get_type ()")]
 	[Version (since = "1.10")]
 	public abstract class PaintNode {
@@ -6654,7 +6468,8 @@ namespace Clutter {
 		public void add_multitexture_rectangle (Clutter.ActorBox rect, float text_coords, uint text_coords_len);
 		public void add_rectangle (Clutter.ActorBox rect);
 		public void add_texture_rectangle (Clutter.ActorBox rect, float x_1, float y_1, float x_2, float y_2);
-		public void paint ();
+		public unowned Cogl.Framebuffer get_framebuffer ();
+		public void paint (Clutter.PaintContext paint_context);
 		public unowned Clutter.PaintNode @ref ();
 		public void set_name (string name);
 		public void unref ();
@@ -6672,7 +6487,7 @@ namespace Clutter {
 		[Version (since = "1.6")]
 		public float get_height ();
 		[Version (since = "1.6")]
-		public Clutter.Vertex get_origin ();
+		public void get_origin (out unowned Graphene.Point3D vertex);
 		[Version (since = "1.6")]
 		public float get_width ();
 		[Version (since = "1.6")]
@@ -6682,7 +6497,7 @@ namespace Clutter {
 		[Version (since = "1.6")]
 		public void set_height (float height);
 		[Version (since = "1.6")]
-		public void set_origin (Clutter.Vertex origin);
+		public void set_origin (Graphene.Point3D origin);
 		[Version (since = "1.6")]
 		public void set_width (float width);
 		[Version (since = "1.6")]
@@ -6769,26 +6584,19 @@ namespace Clutter {
 		public Clutter.Path path { get; set; }
 		public signal void node_reached (Clutter.Actor actor, uint index);
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", ref_function = "clutter_pick_context_ref", type_id = "clutter_pick_context_get_type ()", unref_function = "clutter_pick_context_unref")]
+	[Compact]
+	public class PickContext {
+		public void destroy ();
+		public unowned Clutter.PickContext @ref ();
+		public void unref ();
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_pipeline_node_get_type ()")]
 	[Version (since = "1.10")]
 	public class PipelineNode : Clutter.PaintNode {
 		[CCode (has_construct_function = false)]
 		protected PipelineNode ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_point_get_type ()")]
-	[Compact]
-	[Version (since = "1.12")]
-	public class Point {
-		public float x;
-		public float y;
-		public static Clutter.Point alloc ();
-		public Clutter.Point copy ();
-		public float distance (Clutter.Point b, out float x_distance, out float y_distance);
-		public bool equals (Clutter.Point b);
-		public void free ();
-		public unowned Clutter.Point init (float x, float y);
-		public static unowned Clutter.Point zero ();
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_property_transition_get_type ()")]
 	[Version (since = "1.10")]
 	public class PropertyTransition : Clutter.Transition, Clutter.Scriptable {
@@ -6798,33 +6606,6 @@ namespace Clutter {
 		public void set_property_name (string? property_name);
 		public string property_name { get; set; }
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_rect_get_type ()")]
-	[Compact]
-	[Version (since = "1.12")]
-	public class Rect {
-		public weak Clutter.Point origin;
-		public weak Clutter.Size size;
-		public static Clutter.Rect alloc ();
-		public void clamp_to_pixel ();
-		public bool contains_point (Clutter.Point point);
-		public bool contains_rect (Clutter.Rect b);
-		public Clutter.Rect copy ();
-		public bool equals (Clutter.Rect b);
-		public void free ();
-		public void get_center (Clutter.Point center);
-		public float get_height ();
-		public float get_width ();
-		public float get_x ();
-		public float get_y ();
-		public unowned Clutter.Rect init (float x, float y, float width, float height);
-		public void inset (float d_x, float d_y);
-		public bool intersection (Clutter.Rect b, Clutter.Rect? res);
-		public Clutter.Rect normalize ();
-		public void offset (float d_x, float d_y);
-		public void scale (float s_x, float s_y);
-		public void union (Clutter.Rect b, Clutter.Rect res);
-		public static unowned Clutter.Rect zero ();
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_rectangle_get_type ()")]
 	[Version (since = "0.2")]
 	public class Rectangle : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
@@ -6907,8 +6688,8 @@ namespace Clutter {
 		[CCode (has_construct_function = false, type = "ClutterActor*")]
 		public ScrollActor ();
 		public Clutter.ScrollMode get_scroll_mode ();
-		public void scroll_to_point (Clutter.Point point);
-		public void scroll_to_rect (Clutter.Rect rect);
+		public void scroll_to_point (Graphene.Point point);
+		public void scroll_to_rect (Graphene.Rect rect);
 		public void set_scroll_mode (Clutter.ScrollMode mode);
 		public Clutter.ScrollMode scroll_mode { get; set; }
 	}
@@ -6930,6 +6711,44 @@ namespace Clutter {
 		public float x;
 		public float y;
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_seat_get_type ()")]
+	public abstract class Seat : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected Seat ();
+		[NoWrapper]
+		public virtual void apply_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
+		public virtual void bell_notify ();
+		public virtual void compress_motion (Clutter.Event event, Clutter.Event to_discard);
+		[NoWrapper]
+		public virtual void copy_event_data (Clutter.Event src, Clutter.Event dest);
+		public virtual Clutter.VirtualInputDevice create_virtual_device (Clutter.InputDeviceType device_type);
+		public void ensure_a11y_state ();
+		[NoWrapper]
+		public virtual void free_event_data (Clutter.Event event);
+		public void get_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
+		public virtual unowned Clutter.InputDevice get_keyboard ();
+		public virtual unowned Clutter.Keymap get_keymap ();
+		public virtual unowned Clutter.InputDevice get_pointer ();
+		public void get_pointer_a11y_settings (Clutter.PointerA11ySettings settings);
+		public virtual Clutter.VirtualDeviceType get_supported_virtual_device_types ();
+		public bool get_touch_mode ();
+		public virtual GLib.List<weak Clutter.InputDevice> list_devices ();
+		public void set_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
+		public void set_pointer_a11y_dwell_click_type (Clutter.PointerA11yDwellClickType click_type);
+		public void set_pointer_a11y_settings (Clutter.PointerA11ySettings settings);
+		public virtual void warp_pointer (int x, int y);
+		[NoAccessorMethod]
+		public Clutter.Backend backend { owned get; construct; }
+		public bool touch_mode { get; }
+		public signal void device_added (Clutter.InputDevice object);
+		public signal void device_removed (Clutter.InputDevice object);
+		public signal void kbd_a11y_flags_changed (uint settings_flags, uint changed_mask);
+		public signal void kbd_a11y_mods_state_changed (uint latched_mask, uint locked_mask);
+		public signal void ptr_a11y_dwell_click_type_changed (Clutter.PointerA11yDwellClickType click_type);
+		public signal void ptr_a11y_timeout_started (Clutter.InputDevice device, Clutter.PointerA11yTimeoutType timeout_type, uint delay);
+		public signal void ptr_a11y_timeout_stopped (Clutter.InputDevice device, Clutter.PointerA11yTimeoutType timeout_type, bool clicked);
+		public signal void tool_changed (Clutter.InputDevice object, Clutter.InputDeviceTool p0);
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_settings_get_type ()")]
 	[Version (since = "1.4")]
 	public class Settings : GLib.Object {
@@ -7002,18 +6821,6 @@ namespace Clutter {
 		[CCode (has_construct_function = false)]
 		protected ShaderMatrix ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_size_get_type ()")]
-	[Compact]
-	[Version (since = "1.12")]
-	public class Size {
-		public float height;
-		public float width;
-		public static Clutter.Size alloc ();
-		public Clutter.Size copy ();
-		public bool equals (Clutter.Size b);
-		public void free ();
-		public unowned Clutter.Size init (float width, float height);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_snap_constraint_get_type ()")]
 	[Version (since = "1.6")]
 	public class SnapConstraint : Clutter.Constraint {
@@ -7052,14 +6859,12 @@ namespace Clutter {
 		public void freeze_updates ();
 		[Version (since = "1.6")]
 		public bool get_accept_focus ();
-		public unowned Clutter.Actor get_actor_at_pos (Clutter.PickMode pick_mode, int x, int y);
+		public unowned Clutter.Actor get_actor_at_pos (Clutter.PickMode pick_mode, float x, float y);
 		public bool get_capture_final_size (Cairo.RectangleInt rect, int width, int height, float scale);
 		[Version (deprecated = true, deprecated_since = "1.10")]
 		public Clutter.Color get_color ();
 		[Version (deprecated = true, deprecated_since = "1.10")]
 		public static unowned Clutter.Stage get_default ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public Clutter.Fog get_fog ();
 		public int64 get_frame_counter ();
 		[Version (since = "0.6")]
 		public unowned Clutter.Actor get_key_focus ();
@@ -7067,19 +6872,14 @@ namespace Clutter {
 		public void get_minimum_size (out uint width, out uint height);
 		[Version (since = "1.8")]
 		public bool get_motion_events_enabled ();
-		[Version (since = "1.4")]
-		public bool get_no_clear_hint ();
 		public Clutter.Perspective get_perspective ();
-		[Version (since = "1.8")]
-		public Cairo.RectangleInt get_redraw_clip_bounds ();
+		public Cairo.Region get_redraw_clip ();
 		[Version (since = "1.0")]
 		public bool get_throttle_motion_events ();
 		[Version (since = "0.4")]
 		public unowned string get_title ();
 		[Version (since = "1.2")]
 		public bool get_use_alpha ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public bool get_use_fog ();
 		[Version (since = "0.4")]
 		public void hide_cursor ();
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
@@ -7094,16 +6894,12 @@ namespace Clutter {
 		public void set_accept_focus (bool accept_focus);
 		[Version (deprecated = true, deprecated_since = "1.10")]
 		public void set_color (Clutter.Color color);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public void set_fog (Clutter.Fog fog);
 		[Version (since = "0.6")]
 		public void set_key_focus (Clutter.Actor? actor);
 		[Version (since = "1.2")]
 		public void set_minimum_size (uint width, uint height);
 		[Version (since = "1.8")]
 		public void set_motion_events_enabled (bool enabled);
-		[Version (since = "1.4")]
-		public void set_no_clear_hint (bool no_clear);
 		public void set_perspective (Clutter.Perspective perspective);
 		[Version (since = "1.0")]
 		public void set_throttle_motion_events (bool throttle);
@@ -7111,8 +6907,6 @@ namespace Clutter {
 		public void set_title (string title);
 		[Version (since = "1.2")]
 		public void set_use_alpha (bool use_alpha);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public void set_use_fog (bool fog);
 		public void show_cursor ();
 		public void thaw_updates ();
 		public void update_resource_scales ();
@@ -7122,20 +6916,14 @@ namespace Clutter {
 		public Clutter.Color color { get; set; }
 		[NoAccessorMethod]
 		public bool cursor_visible { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public Clutter.Fog fog { get; set; }
 		[Version (since = "1.2")]
 		public Clutter.Actor key_focus { get; set; }
-		[Version (since = "1.4")]
-		public bool no_clear_hint { get; set; }
 		[Version (since = "0.8")]
 		public Clutter.Perspective perspective { get; set; }
 		[Version (since = "0.4")]
 		public string title { get; set; }
 		[Version (since = "1.2")]
 		public bool use_alpha { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public bool use_fog { get; set; }
 		[Version (since = "0.6")]
 		public virtual signal void activate ();
 		[Version (since = "1.20")]
@@ -7158,8 +6946,6 @@ namespace Clutter {
 		[Version (since = "0.8")]
 		public GLib.SList<weak Clutter.Stage> list_stages ();
 		public unowned GLib.SList<Clutter.Stage> peek_stages ();
-		[Version (deprecated = true, deprecated_since = "1.2", since = "0.8")]
-		public void set_default_stage (Clutter.Stage stage);
 		[Version (since = "0.8")]
 		public Clutter.Stage default_stage { get; }
 		[Version (since = "0.8")]
@@ -7206,16 +6992,10 @@ namespace Clutter {
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
 		public uint get_duration (string? source_state_name, string? target_state_name);
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public GLib.List<weak Clutter.StateKey> get_keys (string? source_state_name, string? target_state_name, GLib.Object? object, string? property_name);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
 		public unowned string get_state ();
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
 		public GLib.List<weak string> get_states ();
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned Clutter.Timeline get_timeline ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void remove_key (string? source_state_name, string? target_state_name, GLib.Object? object, string? property_name);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
 		public void set_duration (string? source_state_name, string? target_state_name, uint duration);
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
 		public unowned Clutter.State set_key (string? source_state_name, string target_state_name, GLib.Object object, string property_name, uint mode, GLib.Value value, double pre_delay, double post_delay);
@@ -7236,24 +7016,8 @@ namespace Clutter {
 	[Compact]
 	[Version (since = "1.4")]
 	public class StateKey {
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public ulong get_mode ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned GLib.Object get_object ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public double get_post_delay ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public double get_pre_delay ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned string get_property_name ();
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
 		public GLib.Type get_property_type ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned string get_source_state_name ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned string get_target_state_name ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public bool get_value (GLib.Value value);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_swipe_action_get_type ()")]
 	[Version (since = "1.8")]
@@ -7265,53 +7029,6 @@ namespace Clutter {
 		[Version (since = "1.14")]
 		public virtual signal bool swipe (Clutter.Actor actor, Clutter.SwipeDirection direction);
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_table_layout_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.18", since = "1.4")]
-	public class TableLayout : Clutter.LayoutManager {
-		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
-		public TableLayout ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void get_alignment (Clutter.Actor actor, out Clutter.TableAlignment x_align, out Clutter.TableAlignment y_align);
-		public int get_column_count ();
-		public uint get_column_spacing ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public uint get_easing_duration ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public ulong get_easing_mode ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void get_expand (Clutter.Actor actor, out bool x_expand, out bool y_expand);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void get_fill (Clutter.Actor actor, out bool x_fill, out bool y_fill);
-		public int get_row_count ();
-		public uint get_row_spacing ();
-		public void get_span (Clutter.Actor actor, out int column_span, out int row_span);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public bool get_use_animations ();
-		public void pack (Clutter.Actor actor, int column, int row);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_alignment (Clutter.Actor actor, Clutter.TableAlignment x_align, Clutter.TableAlignment y_align);
-		public void set_column_spacing (uint spacing);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_easing_duration (uint msecs);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_easing_mode (ulong mode);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_expand (Clutter.Actor actor, bool x_expand, bool y_expand);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_fill (Clutter.Actor actor, bool x_fill, bool y_fill);
-		public void set_row_spacing (uint spacing);
-		public void set_span (Clutter.Actor actor, int column_span, int row_span);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_use_animations (bool animate);
-		public uint column_spacing { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public uint easing_duration { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public ulong easing_mode { get; set; }
-		public uint row_spacing { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public bool use_animations { get; set; }
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_tap_action_get_type ()")]
 	[Version (since = "1.14")]
 	public class TapAction : Clutter.GestureAction {
@@ -7339,7 +7056,7 @@ namespace Clutter {
 		public Clutter.Color get_cursor_color ();
 		public int get_cursor_position ();
 		[Version (since = "1.16")]
-		public void get_cursor_rect (out unowned Clutter.Rect rect);
+		public void get_cursor_rect (out unowned Graphene.Rect rect);
 		public uint get_cursor_size ();
 		public bool get_cursor_visible ();
 		public bool get_editable ();
@@ -7458,7 +7175,7 @@ namespace Clutter {
 		[Version (since = "1.16")]
 		public virtual signal void cursor_changed ();
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public virtual signal void cursor_event (Clutter.Geometry geometry);
+		public virtual signal void cursor_event (Graphene.Rect rect);
 		[HasEmitter]
 		[Version (since = "1.2")]
 		public signal void delete_text (int start_pos, int end_pos);
@@ -7497,92 +7214,9 @@ namespace Clutter {
 		public TextNode (Pango.Layout? layout, Clutter.Color? color);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_texture_get_type ()")]
-	[Version (since = "0.2")]
-	public class Texture : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public Texture ();
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
-		public Texture.from_actor (Clutter.Actor actor);
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public Texture.from_file (string filename) throws Clutter.TextureError;
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public void get_base_size (out int width, out int height);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Cogl.Handle get_cogl_material ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public unowned Cogl.Handle get_cogl_texture ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public Clutter.TextureQuality get_filter_quality ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool get_keep_aspect_ratio ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool get_load_async ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool get_load_data_async ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public int get_max_tile_waste ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public bool get_pick_with_alpha ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void get_repeat (out bool repeat_x, out bool repeat_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool get_sync_size ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public bool set_area_from_rgb_data ([CCode (array_length = false)] uint8[] data, bool has_alpha, int x, int y, int width, int height, int rowstride, int bpp, Clutter.TextureFlags flags) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public void set_cogl_material (Cogl.Handle cogl_material);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public void set_cogl_texture (Cogl.Handle cogl_tex);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public void set_filter_quality (Clutter.TextureQuality filter_quality);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public bool set_from_file (string filename) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.4")]
-		public bool set_from_rgb_data ([CCode (array_length = false)] uint8[] data, bool has_alpha, int width, int height, int rowstride, int bpp, Clutter.TextureFlags flags) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public bool set_from_yuv_data ([CCode (array_length = false)] uint8[] data, int width, int height, Clutter.TextureFlags flags) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_keep_aspect_ratio (bool keep_aspect);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_load_async (bool load_async);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_load_data_async (bool load_async);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_pick_with_alpha (bool pick_with_alpha);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_repeat (bool repeat_x, bool repeat_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_sync_size (bool sync_size);
+	public class Texture : Clutter.Actor {
 		public Cogl.Material cogl_material { get; set; }
 		public Cogl.Texture cogl_texture { get; set; }
-		[NoAccessorMethod]
-		public bool disable_slicing { get; construct; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public string filename { owned get; set; }
-		public Clutter.TextureQuality filter_quality { get; set construct; }
-		public bool keep_aspect_ratio { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool load_async { set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool load_data_async { set; }
-		public bool pick_with_alpha { get; set; }
-		[NoAccessorMethod]
-		public bool repeat_x { get; set; }
-		[NoAccessorMethod]
-		public bool repeat_y { get; set; }
-		public bool sync_size { get; set; }
-		[NoAccessorMethod]
-		public int tile_waste { get; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public virtual signal void load_finished (GLib.Error error);
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public virtual signal void pixbuf_change ();
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public virtual signal void size_change (int width, int height);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_texture_node_get_type ()")]
 	[Version (since = "1.10")]
@@ -7608,7 +7242,7 @@ namespace Clutter {
 		[Version (since = "1.6")]
 		public bool get_auto_reverse ();
 		[Version (since = "1.12")]
-		public bool get_cubic_bezier_progress (Clutter.Point c_1, Clutter.Point c_2);
+		public bool get_cubic_bezier_progress (Graphene.Point c_1, Graphene.Point c_2);
 		[Version (since = "1.10")]
 		public int get_current_repeat ();
 		[Version (since = "0.4")]
@@ -7645,7 +7279,7 @@ namespace Clutter {
 		[Version (since = "1.6")]
 		public void set_auto_reverse (bool reverse);
 		[Version (since = "1.12")]
-		public void set_cubic_bezier_progress (Clutter.Point c_1, Clutter.Point c_2);
+		public void set_cubic_bezier_progress (Graphene.Point c_1, Graphene.Point c_2);
 		[Version (since = "0.4")]
 		public void set_delay (uint msecs);
 		[Version (since = "0.6")]
@@ -7744,6 +7378,11 @@ namespace Clutter {
 		public float x;
 		public float y;
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_transform_node_get_type ()")]
+	public class TransformNode : Clutter.PaintNode {
+		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+		public TransformNode (Cogl.Matrix projection);
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_transition_get_type ()")]
 	[Version (since = "1.10")]
 	public abstract class Transition : Clutter.Timeline, Clutter.Scriptable {
@@ -7783,7 +7422,6 @@ namespace Clutter {
 		[CCode (has_construct_function = false)]
 		protected VirtualInputDevice ();
 		public int get_device_type ();
-		public unowned Clutter.DeviceManager get_manager ();
 		public virtual void notify_absolute_motion (uint64 time_us, double x, double y);
 		public virtual void notify_button (uint64 time_us, uint32 button, Clutter.ButtonState button_state);
 		public virtual void notify_discrete_scroll (uint64 time_us, Clutter.ScrollDirection direction, Clutter.ScrollSource scroll_source);
@@ -7794,25 +7432,25 @@ namespace Clutter {
 		public virtual void notify_touch_down (uint64 time_us, int slot, double x, double y);
 		public virtual void notify_touch_motion (uint64 time_us, int slot, double x, double y);
 		public virtual void notify_touch_up (uint64 time_us, int slot);
-		[NoAccessorMethod]
-		public Clutter.DeviceManager device_manager { owned get; construct; }
 		public Clutter.InputDeviceType device_type { get; construct; }
+		[NoAccessorMethod]
+		public Clutter.Seat seat { owned get; construct; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_zoom_action_get_type ()")]
 	[Version (since = "1.12")]
 	public class ZoomAction : Clutter.GestureAction {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public ZoomAction ();
-		public void get_focal_point (Clutter.Point point);
-		public void get_transformed_focal_point (Clutter.Point point);
+		public void get_focal_point (Graphene.Point point);
+		public void get_transformed_focal_point (Graphene.Point point);
 		public Clutter.ZoomAxis get_zoom_axis ();
 		public void set_zoom_axis (Clutter.ZoomAxis axis);
 		public Clutter.ZoomAxis zoom_axis { get; set; }
-		public virtual signal bool zoom (Clutter.Actor actor, Clutter.Point focal_point, double factor);
+		public virtual signal bool zoom (Clutter.Actor actor, Graphene.Point focal_point, double factor);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_cname = "ClutterAnimatableInterface", type_id = "clutter_animatable_get_type ()")]
 	public interface Animatable : GLib.Object {
-		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
+		[NoWrapper]
 		public abstract bool animate_property (Clutter.Animation animation, string property_name, GLib.Value initial_value, GLib.Value final_value, double progress, GLib.Value value);
 		[Version (since = "1.4")]
 		public abstract unowned GLib.ParamSpec find_property (string property_name);
@@ -7830,8 +7468,6 @@ namespace Clutter {
 		[CCode (vfunc_name = "add")]
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
 		public abstract void add_actor (Clutter.Actor actor);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public void add_valist (Clutter.Actor first_actor, va_list var_args);
 		[Version (since = "0.8")]
 		public void child_get (Clutter.Actor actor, ...);
 		[Version (since = "0.8")]
@@ -7853,10 +7489,6 @@ namespace Clutter {
 		public unowned Clutter.Actor find_child_by_name (string child_name);
 		[CCode (cname = "clutter_container_class_find_child_property")]
 		public class unowned GLib.ParamSpec find_child_property (string property_name);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public abstract void @foreach (Clutter.Callback callback);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public virtual void foreach_with_internals (Clutter.Callback callback);
 		[Version (since = "0.8")]
 		public virtual unowned Clutter.ChildMeta get_child_meta (Clutter.Actor actor);
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
@@ -7874,8 +7506,6 @@ namespace Clutter {
 		[CCode (vfunc_name = "remove")]
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
 		public abstract void remove_actor (Clutter.Actor actor);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public void remove_valist (Clutter.Actor first_actor, va_list var_args);
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
 		public abstract void sort_depth_order ();
 		public virtual signal void actor_added (Clutter.Actor actor);
@@ -7892,7 +7522,7 @@ namespace Clutter {
 		public abstract void invalidate ();
 		public abstract void invalidate_size ();
 		[NoWrapper]
-		public abstract void paint_content (Clutter.Actor actor, Clutter.PaintNode node);
+		public abstract void paint_content (Clutter.Actor actor, Clutter.PaintNode node, Clutter.PaintContext paint_context);
 		[Version (since = "1.10")]
 		public virtual signal void attached (Clutter.Actor actor);
 		[Version (since = "1.10")]
@@ -7908,10 +7538,6 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	public interface StageWindow : GLib.Object {
-		[NoWrapper]
-		public abstract void add_redraw_clip (Clutter.Geometry stage_rectangle);
-		[NoWrapper]
-		public abstract void get_geometry (Clutter.Geometry geometry);
 		[NoWrapper]
 		public abstract int get_pending_swaps ();
 		[NoWrapper]
@@ -7939,14 +7565,16 @@ namespace Clutter {
 		[NoWrapper]
 		public abstract void unrealize ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "CLUTTER_TYPE_ACTOR_BOX")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_actor_box_get_type ()")]
 	public struct ActorBox {
 		public float x1;
 		public float y1;
 		public float x2;
 		public float y2;
+		[Version (since = "1.12")]
+		public static Clutter.ActorBox? alloc ();
 		[Version (since = "1.2")]
-		public void clamp_to_pixel ();
+		public static void clamp_to_pixel (ref Clutter.ActorBox box);
 		[Version (since = "1.0")]
 		public bool contains (float x, float y);
 		[Version (since = "1.0")]
@@ -7955,8 +7583,6 @@ namespace Clutter {
 		public bool equal (Clutter.ActorBox box_b);
 		[Version (since = "1.0")]
 		public void free ();
-		[CCode (cname = "clutter_actor_box_from_vertices")]
-		public ActorBox.from_vertices (Clutter.Vertex[] verts);
 		[Version (since = "1.0")]
 		public float get_area ();
 		[Version (since = "1.0")]
@@ -8002,7 +7628,7 @@ namespace Clutter {
 		public weak Cairo.Surface image;
 		public Cairo.RectangleInt rect;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "CLUTTER_TYPE_COLOR")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "CLUTTER_TYPE_COLOR")]
 	public struct Color {
 		public uint8 red;
 		public uint8 green;
@@ -8041,24 +7667,6 @@ namespace Clutter {
 		[Version (since = "0.2")]
 		public string to_string ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_fog_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-	public struct Fog {
-		public float z_near;
-		public float z_far;
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_geometry_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public struct Geometry {
-		public int x;
-		public int y;
-		public uint width;
-		public uint height;
-		[Version (since = "1.4")]
-		public bool intersects (Clutter.Geometry geometry1);
-		[Version (since = "1.4")]
-		public Clutter.Geometry union (Clutter.Geometry geometry_b);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	public struct KbdA11ySettings {
 		public Clutter.KeyboardA11yFlags controls;
@@ -8069,7 +7677,7 @@ namespace Clutter {
 		public int mousekeys_max_speed;
 		public int mousekeys_accel_time;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_knot_get_type ()")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_knot_get_type ()")]
 	[Version (since = "0.2")]
 	public struct Knot {
 		public int x;
@@ -8121,7 +7729,7 @@ namespace Clutter {
 		public double value;
 		public uint32 mode;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_path_node_get_type ()")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_path_node_get_type ()")]
 	[Version (since = "1.0")]
 	public struct PathNode {
 		public Clutter.PathNodeType type;
@@ -8131,7 +7739,7 @@ namespace Clutter {
 		public bool equal (Clutter.PathNode node_b);
 		public void free ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_perspective_get_type ()")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_perspective_get_type ()")]
 	[Version (since = "0.4")]
 	public struct Perspective {
 		public float fovy;
@@ -8162,7 +7770,7 @@ namespace Clutter {
 		public weak Clutter.Actor source;
 		public weak Clutter.InputDevice device;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "CLUTTER_TYPE_UNITS")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "CLUTTER_TYPE_UNITS")]
 	[Version (since = "1.0")]
 	public struct Units {
 		public Clutter.Units? copy ();
@@ -8186,23 +7794,6 @@ namespace Clutter {
 		public float to_pixels ();
 		public string to_string ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_vertex_get_type ()")]
-	[Version (since = "0.4")]
-	public struct Vertex {
-		public float x;
-		public float y;
-		public float z;
-		[Version (since = "1.12")]
-		public static Clutter.Vertex? alloc ();
-		[Version (since = "1.0")]
-		public Clutter.Vertex? copy ();
-		[Version (since = "1.0")]
-		public bool equal (Clutter.Vertex vertex_b);
-		[Version (since = "1.0")]
-		public void free ();
-		[Version (since = "1.10")]
-		public unowned Clutter.Vertex? init (float x, float y, float z);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ACTOR_ALIGN_", type_id = "clutter_actor_align_get_type ()")]
 	[Version (since = "1.10")]
 	public enum ActorAlign {
@@ -8340,6 +7931,27 @@ namespace Clutter {
 		Y_AXIS,
 		BOTH
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DEBUG_", type_id = "clutter_debug_flag_get_type ()")]
+	[Flags]
+	public enum DebugFlag {
+		MISC,
+		ACTOR,
+		TEXTURE,
+		EVENT,
+		PAINT,
+		PANGO,
+		BACKEND,
+		SCHEDULER,
+		SCRIPT,
+		SHADER,
+		MULTISTAGE,
+		ANIMATION,
+		LAYOUT,
+		PICK,
+		EVENTLOOP,
+		CLIPPING,
+		OOB_TRANSFORMS
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DRAG_", type_id = "clutter_drag_axis_get_type ()")]
 	[Version (since = "1.4")]
 	public enum DragAxis {
@@ -8347,6 +7959,19 @@ namespace Clutter {
 		X_AXIS,
 		Y_AXIS
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DEBUG_", type_id = "clutter_draw_debug_flag_get_type ()")]
+	[Flags]
+	public enum DrawDebugFlag {
+		DISABLE_SWAP_EVENTS,
+		DISABLE_CLIPPED_REDRAWS,
+		REDRAWS,
+		PAINT_VOLUMES,
+		DISABLE_CULLING,
+		DISABLE_OFFSCREEN_REDIRECT,
+		CONTINUOUS_REDRAW,
+		PAINT_DEFORM_TILES,
+		PAINT_DAMAGE_REGION
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_EFFECT_PAINT_ACTOR_", type_id = "clutter_effect_paint_flags_get_type ()")]
 	[Flags]
 	public enum EffectPaintFlags {
@@ -8398,8 +8023,6 @@ namespace Clutter {
 	public enum FeatureFlags {
 		TEXTURE_NPOT,
 		SWAP_THROTTLE,
-		TEXTURE_YUV,
-		TEXTURE_READ_PIXELS,
 		STAGE_STATIC,
 		STAGE_CURSOR,
 		SHADERS_GLSL,
@@ -8657,6 +8280,11 @@ namespace Clutter {
 		REL_LINE_TO,
 		REL_CURVE_TO
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DEBUG_NOP_", type_id = "clutter_pick_debug_flag_get_type ()")]
+	[Flags]
+	public enum PickDebugFlag {
+		PICKING
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PICK_", type_id = "clutter_pick_mode_get_type ()")]
 	[Version (since = "1.0")]
 	public enum PickMode {
@@ -8851,13 +8479,6 @@ namespace Clutter {
 		LEFT,
 		RIGHT
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TABLE_ALIGNMENT_", type_id = "clutter_table_alignment_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.22", since = "1.4")]
-	public enum TableAlignment {
-		START,
-		CENTER,
-		END
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXT_DIRECTION_", type_id = "clutter_text_direction_get_type ()")]
 	[Version (since = "1.2")]
 	public enum TextDirection {
@@ -8933,28 +8554,19 @@ namespace Clutter {
 		VALUE;
 		public static GLib.Quark quark ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXTURE_ERROR_")]
-	[Version (since = "0.4")]
-	public errordomain TextureError {
-		OUT_OF_MEMORY,
-		NO_YUV,
-		BAD_FORMAT;
-		public static GLib.Quark quark ();
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
 	[Version (since = "1.24")]
 	public delegate Clutter.Actor ActorCreateChildFunc (GLib.Object item);
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
 	[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
 	public delegate double AlphaFunc (Clutter.Alpha alpha);
-	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 2.9)]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public delegate void BehaviourForeachFunc (Clutter.Behaviour behaviour, Clutter.Actor actor);
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 4.9)]
 	[Version (since = "1.0")]
 	public delegate bool BindingActionFunc (GLib.Object gobject, string action_name, uint key_val, Clutter.ModifierType modifiers);
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
 	public delegate void Callback (Clutter.Actor actor);
+	[CCode (cheader_filename = "clutter/clutter.h", has_target = false)]
+	public delegate void EmitInputDeviceEvent (Clutter.Event event, Clutter.InputDevice device);
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
 	[Version (since = "1.18")]
 	public delegate bool EventFilterFunc (Clutter.Event event);
@@ -8985,9 +8597,6 @@ namespace Clutter {
 	[Version (since = "0.8")]
 	public const int PRIORITY_REDRAW;
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.12")]
-	public static Clutter.ActorBox? actor_box_alloc ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	public static void base_init ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "1.12")]
@@ -9051,9 +8660,6 @@ namespace Clutter {
 	[Version (since = "1.0")]
 	public static unowned Pango.FontMap get_font_map ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static unowned Clutter.Actor get_keyboard_grab ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "0.2")]
 	public static GLib.OptionGroup get_option_group ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
@@ -9061,17 +8667,8 @@ namespace Clutter {
 	public static GLib.OptionGroup get_option_group_without_init ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "0.6")]
-	public static unowned Clutter.Actor get_pointer_grab ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
 	public static unowned string get_script_id (GLib.Object gobject);
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static void grab_keyboard (Clutter.Actor actor);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static void grab_pointer (Clutter.Actor actor);
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	public static Clutter.InitError init ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[]? argv);
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "0.2")]
@@ -9087,29 +8684,6 @@ namespace Clutter {
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	public static void set_custom_backend_func (void* func);
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static void test_add_data_full (string test_path, owned GLib.TestDataFunc test_func);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static bool test_check_actor_at_point (Clutter.Actor stage, Clutter.Point point, Clutter.Actor actor, out Clutter.Actor? result);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static bool test_check_color_at_point (Clutter.Actor stage, Clutter.Point point, Clutter.Color color, out Clutter.Color result);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static unowned Clutter.Actor test_get_stage ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	public static void test_init (int argc, string argv);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static int test_run ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static void ungrab_keyboard ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static void ungrab_pointer ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "1.10")]
 	public static uint unicode_to_keysym (uint32 wc);
 }
diff --git vapi/mutter-clutter-4.deps vapi/mutter-clutter-7.deps
similarity index 54%
rename from vapi/mutter-clutter-4.deps
rename to vapi/mutter-clutter-7.deps
index 95094026..6bd1ccf7 100644
--- vapi/mutter-clutter-4.deps
+++ vapi/mutter-clutter-7.deps
@@ -1,5 +1,4 @@
 atk
 cairo
 json-glib-1.0
-mutter-cogl-4
-pango
+mutter-cogl-7
diff --git vapi/mutter-clutter-4.vapi vapi/mutter-clutter-7.vapi
similarity index 86%
rename from vapi/mutter-clutter-4.vapi
rename to vapi/mutter-clutter-7.vapi
index c8a1d23b..aea6a31a 100644
--- vapi/mutter-clutter-4.vapi
+++ vapi/mutter-clutter-7.vapi
@@ -1,6 +1,6 @@
-/* mutter-clutter-4.vapi generated by vapigen, do not modify. */
+/* mutter-clutter-7.vapi generated by vapigen, do not modify. */
 
-[CCode (cprefix = "Clutter", gir_namespace = "Clutter", gir_version = "4", lower_case_cprefix = "clutter_")]
+[CCode (cprefix = "Clutter", gir_namespace = "Clutter", gir_version = "7", lower_case_cprefix = "clutter_")]
 namespace Clutter {
 	namespace Key {
 		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_0")]
@@ -4576,20 +4576,8 @@ namespace Clutter {
 		[Version (since = "1.10")]
 		public static uint add_repaint_func_full (Clutter.RepaintFlags flags, owned GLib.SourceFunc func);
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.4")]
-		public static void enter ();
-		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public static void init ();
-		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.4")]
-		public static void leave ();
-		[CCode (cheader_filename = "clutter/clutter.h")]
 		[Version (since = "1.0")]
 		public static void remove_repaint_func (uint handle_id);
-		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.4")]
-		public static void set_lock_functions (GLib.Callback enter_fn, GLib.Callback leave_fn);
 	}
 	namespace Value {
 		[CCode (cheader_filename = "clutter/clutter.h")]
@@ -4636,7 +4624,6 @@ namespace Clutter {
 		public static void take_paint_node (GLib.Value value, Clutter.PaintNode? node);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_action_get_type ()")]
-	[Version (since = "1.4")]
 	public abstract class Action : Clutter.ActorMeta {
 		[CCode (has_construct_function = false)]
 		protected Action ();
@@ -4664,33 +4651,23 @@ namespace Clutter {
 		[Version (since = "1.10")]
 		public void add_transition (string name, Clutter.Transition transition);
 		[Version (since = "0.8")]
-		public virtual void allocate (Clutter.ActorBox box, Clutter.AllocationFlags flags);
+		public virtual void allocate (Clutter.ActorBox box);
 		[Version (since = "1.4")]
-		public void allocate_align_fill (Clutter.ActorBox box, double x_align, double y_align, bool x_fill, bool y_fill, Clutter.AllocationFlags flags);
+		public void allocate_align_fill (Clutter.ActorBox box, double x_align, double y_align, bool x_fill, bool y_fill);
 		[Version (since = "1.0")]
-		public void allocate_available_size (float x, float y, float available_width, float available_height, Clutter.AllocationFlags flags);
+		public void allocate_available_size (float x, float y, float available_width, float available_height);
 		[Version (since = "0.8")]
-		public void allocate_preferred_size (Clutter.AllocationFlags flags);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Clutter.Animation animate (ulong mode, uint duration, ...);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public unowned Clutter.Animation animate_with_alpha (Clutter.Alpha alpha, ...);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public unowned Clutter.Animation animate_with_alphav (Clutter.Alpha alpha, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5)] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5)] GLib.Value[] values);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Clutter.Animation animate_with_timeline (ulong mode, Clutter.Timeline timeline, ...);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Clutter.Animation animate_with_timelinev (ulong mode, Clutter.Timeline timeline, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] GLib.Value[] values);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Clutter.Animation animatev (ulong mode, uint duration, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] GLib.Value[] values);
+		public void allocate_preferred_size (float x, float y);
 		[Version (since = "0.6")]
-		public Clutter.Vertex apply_relative_transform_to_point (Clutter.Actor? ancestor, Clutter.Vertex point);
+		public void apply_relative_transform_to_point (Clutter.Actor? ancestor, Graphene.Point3D point, out unowned Graphene.Point3D vertex);
 		[NoWrapper]
 		public virtual void apply_transform (ref Clutter.Matrix matrix);
 		[Version (since = "0.4")]
-		public Clutter.Vertex apply_transform_to_point (Clutter.Vertex point);
+		public void apply_transform_to_point (Graphene.Point3D point, out unowned Graphene.Point3D vertex);
 		[Version (since = "1.24")]
 		public void bind_model (GLib.ListModel? model, owned Clutter.ActorCreateChildFunc create_child_func);
+		[NoWrapper]
+		public virtual float calculate_resource_scale (int phase);
 		[Version (since = "1.4")]
 		public void clear_actions ();
 		[Version (since = "1.4")]
@@ -4700,20 +4677,19 @@ namespace Clutter {
 		[Version (since = "1.4")]
 		public bool contains (Clutter.Actor descendant);
 		[Version (since = "1.8")]
-		public void continue_paint ();
+		public void continue_paint (Clutter.PaintContext paint_context);
+		public void continue_pick (Clutter.PickContext pick_context);
 		[Version (since = "1.0")]
 		public Pango.Context create_pango_context ();
 		[Version (since = "1.0")]
 		public Pango.Layout create_pango_layout (string? text);
 		[Version (since = "1.10")]
 		public void destroy_all_children ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void detach_animation ();
 		[CCode (cname = "clutter_actor_event")]
 		[Version (since = "0.6")]
 		public bool emit_event (Clutter.Event event, bool capture);
 		[Version (since = "0.4")]
-		public void get_abs_allocation_vertices ([CCode (array_length = false)] Clutter.Vertex verts[4]);
+		public void get_abs_allocation_vertices ([CCode (array_length = false)] Graphene.Point3D verts[4]);
 		public virtual unowned Atk.Object get_accessible ();
 		[Version (since = "1.4")]
 		public unowned Clutter.Action get_action (string name);
@@ -4721,21 +4697,8 @@ namespace Clutter {
 		public GLib.List<weak Clutter.Action> get_actions ();
 		[Version (since = "0.8")]
 		public Clutter.ActorBox get_allocation_box ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public Clutter.Geometry get_allocation_geometry ();
-		[Version (since = "0.6")]
-		public void get_allocation_vertices (Clutter.Actor? ancestor, [CCode (array_length = false)] Clutter.Vertex verts[4]);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public void get_anchor_point (out float anchor_x, out float anchor_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public Clutter.Gravity get_anchor_point_gravity ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Clutter.Animation get_animation ();
 		[Version (since = "1.10")]
 		public Clutter.Color get_background_color ();
-		[CCode (cname = "clutter_get_actor_by_gid")]
-		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
-		public static unowned Clutter.Actor get_by_gid (uint32 id_);
 		[Version (since = "1.10")]
 		public unowned Clutter.Actor get_child_at_index (int index_);
 		[Version (since = "1.12")]
@@ -4762,8 +4725,6 @@ namespace Clutter {
 		public void get_content_scaling_filters (out Clutter.ScalingFilter min_filter, out Clutter.ScalingFilter mag_filter);
 		[Version (since = "1.10")]
 		public unowned Clutter.PaintVolume get_default_paint_volume ();
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public float get_depth ();
 		[Version (since = "1.10")]
 		public uint get_easing_delay ();
 		[Version (since = "1.10")]
@@ -4776,12 +4737,11 @@ namespace Clutter {
 		public GLib.List<weak Clutter.Effect> get_effects ();
 		[Version (since = "1.10")]
 		public unowned Clutter.Actor get_first_child ();
+		public bool get_fixed_position (out float x, out float y);
 		[Version (since = "0.8")]
 		public bool get_fixed_position_set ();
 		[Version (since = "1.0")]
 		public Clutter.ActorFlags get_flags ();
-		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
-		public uint32 get_gid ();
 		[CCode (cname = "clutter_actor_has_pointer")]
 		[Version (since = "1.2")]
 		public bool get_has_pointer ();
@@ -4839,17 +4799,11 @@ namespace Clutter {
 		public bool get_reactive ();
 		[Version (since = "1.2")]
 		public Clutter.RequestMode get_request_mode ();
-		public bool get_resource_scale (out float resource_scale);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public double get_rotation (Clutter.RotateAxis axis, out float x, out float y, out float z);
+		public float get_resource_scale ();
 		[Version (since = "1.12")]
 		public double get_rotation_angle (Clutter.RotateAxis axis);
 		[Version (since = "0.2")]
 		public void get_scale (out double scale_x, out double scale_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void get_scale_center (out float center_x, out float center_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public Clutter.Gravity get_scale_gravity ();
 		[Version (since = "1.12")]
 		public double get_scale_z ();
 		[Version (since = "0.2")]
@@ -4860,8 +4814,7 @@ namespace Clutter {
 		public Clutter.TextDirection get_text_direction ();
 		[Version (since = "1.12")]
 		public Clutter.Matrix get_transform ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public Clutter.Matrix get_transformation_matrix ();
+		public void get_transformed_extents (out unowned Graphene.Rect rect);
 		[Version (since = "1.6")]
 		public unowned Clutter.PaintVolume get_transformed_paint_volume (Clutter.Actor relative_to_ancestor);
 		[Version (since = "0.8")]
@@ -4885,10 +4838,9 @@ namespace Clutter {
 		public bool get_y_expand ();
 		[Version (since = "1.12")]
 		public float get_z_position ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public Clutter.Gravity get_z_rotation_gravity ();
 		[Version (since = "1.0")]
 		public void grab_key_focus ();
+		public virtual bool has_accessible ();
 		[Version (since = "1.10")]
 		public bool has_actions ();
 		[Version (since = "1.4")]
@@ -4900,18 +4852,20 @@ namespace Clutter {
 		public bool has_effects ();
 		[Version (since = "1.4")]
 		public bool has_key_focus ();
-		[Version (since = "1.16")]
 		public bool has_mapped_clones ();
 		[Version (since = "1.8")]
 		public virtual bool has_overlaps ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
+		[NoWrapper]
 		public virtual void hide_all ();
+		public void inhibit_culling ();
 		[Version (since = "1.10")]
 		public void insert_child_above (Clutter.Actor child, Clutter.Actor? sibling);
 		[Version (since = "1.10")]
 		public void insert_child_at_index (Clutter.Actor child, int index_);
 		[Version (since = "1.10")]
 		public void insert_child_below (Clutter.Actor child, Clutter.Actor? sibling);
+		public void invalidate_transform ();
+		public bool is_effectively_on_stage_view (Clutter.StageView view);
 		[Version (since = "1.0")]
 		public bool is_in_clone_paint ();
 		[Version (since = "1.24")]
@@ -4924,33 +4878,20 @@ namespace Clutter {
 		public bool is_scaled ();
 		[Version (since = "1.24")]
 		public bool is_visible ();
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void lower (Clutter.Actor? above);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void lower_bottom ();
 		[Version (since = "1.0")]
 		public virtual void map ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public void move_anchor_point (float anchor_x, float anchor_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public void move_anchor_point_from_gravity (Clutter.Gravity gravity);
 		[Version (since = "0.2")]
 		public void move_by (float dx, float dy);
 		[Version (since = "1.12")]
 		public bool needs_expand (Clutter.Orientation orientation);
 		[NoWrapper]
 		public virtual void paint_node (Clutter.PaintNode root);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public void pop_internal ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public void push_internal ();
+		public unowned GLib.List<Clutter.StageView> peek_stage_views ();
+		public void pick_box (Clutter.PickContext pick_context, Clutter.ActorBox box);
+		public unowned Clutter.FrameClock pick_frame_clock ();
 		public void queue_redraw ();
 		[Version (since = "1.10")]
 		public void queue_redraw_with_clip (Cairo.RectangleInt? clip);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void raise (Clutter.Actor? below);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void raise_top ();
 		[Version (since = "1.4")]
 		public void remove_action (Clutter.Action action);
 		[Version (since = "1.4")]
@@ -4972,8 +4913,6 @@ namespace Clutter {
 		public void remove_effect_by_name (string name);
 		[Version (since = "1.10")]
 		public void remove_transition (string name);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
-		public void reparent (Clutter.Actor new_parent);
 		[Version (since = "1.10")]
 		public void replace_child (Clutter.Actor old_child, Clutter.Actor new_child);
 		[Version (since = "1.10")]
@@ -4981,11 +4920,7 @@ namespace Clutter {
 		[Version (since = "1.10")]
 		public void save_easing_state ();
 		[Version (since = "1.10")]
-		public void set_allocation (Clutter.ActorBox box, Clutter.AllocationFlags flags);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public void set_anchor_point (float anchor_x, float anchor_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public void set_anchor_point_from_gravity (Clutter.Gravity gravity);
+		public void set_allocation (Clutter.ActorBox box);
 		[Version (since = "1.10")]
 		public void set_background_color (Clutter.Color? color);
 		[Version (since = "1.10")]
@@ -5008,8 +4943,6 @@ namespace Clutter {
 		public void set_content_repeat (Clutter.ContentRepeat repeat);
 		[Version (since = "1.10")]
 		public void set_content_scaling_filters (Clutter.ScalingFilter min_filter, Clutter.ScalingFilter mag_filter);
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public void set_depth (float depth);
 		[Version (since = "1.10")]
 		public void set_easing_delay (uint msecs);
 		[Version (since = "1.10")]
@@ -5039,8 +4972,6 @@ namespace Clutter {
 		public void set_offscreen_redirect (Clutter.OffscreenRedirect redirect);
 		public void set_opacity (uint8 opacity);
 		public void set_opacity_override (int opacity);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void set_parent (Clutter.Actor parent);
 		[Version (since = "1.12")]
 		public void set_pivot_point (float pivot_x, float pivot_y);
 		[Version (since = "1.12")]
@@ -5050,16 +4981,10 @@ namespace Clutter {
 		public void set_reactive (bool reactive);
 		[Version (since = "1.2")]
 		public void set_request_mode (Clutter.RequestMode mode);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public void set_rotation (Clutter.RotateAxis axis, double angle, float x, float y, float z);
 		[Version (since = "1.12")]
 		public void set_rotation_angle (Clutter.RotateAxis axis, double angle);
 		[Version (since = "0.2")]
 		public void set_scale (double scale_x, double scale_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_scale_full (double scale_x, double scale_y, float center_x, float center_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_scale_with_gravity (double scale_x, double scale_y, Clutter.Gravity gravity);
 		[Version (since = "1.12")]
 		public void set_scale_z (double scale_z);
 		public void set_size (float width, float height);
@@ -5085,17 +5010,12 @@ namespace Clutter {
 		public void set_y_expand (bool expand);
 		[Version (since = "1.12")]
 		public void set_z_position (float z_position);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_z_rotation_from_gravity (double angle, Clutter.Gravity gravity);
 		public bool should_pick_paint ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
-		public virtual void show_all ();
 		[Version (since = "0.6")]
 		public bool transform_stage_point (float x, float y, out float x_out, out float y_out);
+		public void uninhibit_culling ();
 		[Version (since = "1.0")]
 		public virtual void unmap ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
-		public void unparent ();
 		[Version (since = "1.0")]
 		public void unset_flags (Clutter.ActorFlags flags);
 		[NoAccessorMethod]
@@ -5103,16 +5023,7 @@ namespace Clutter {
 		public Clutter.Action actions { set; }
 		[NoAccessorMethod]
 		[Version (since = "0.8")]
-		public Clutter.ActorBox allocation { get; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public Clutter.Gravity anchor_gravity { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public float anchor_x { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public float anchor_y { get; set; }
+		public Clutter.ActorBox allocation { owned get; }
 		[Version (since = "1.10")]
 		public Clutter.Color background_color { get; set; }
 		[NoAccessorMethod]
@@ -5122,11 +5033,8 @@ namespace Clutter {
 		[Version (since = "1.12")]
 		public bool child_transform_set { get; }
 		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public Clutter.Geometry clip { get; set; }
-		[NoAccessorMethod]
 		[Version (since = "1.12")]
-		public Clutter.Rect clip_rect { owned get; set; }
+		public Graphene.Rect clip_rect { owned get; set; }
 		[Version (since = "1.0")]
 		public bool clip_to_allocation { get; set; }
 		[NoAccessorMethod]
@@ -5140,8 +5048,6 @@ namespace Clutter {
 		public Clutter.ContentGravity content_gravity { get; set; }
 		[Version (since = "1.12")]
 		public Clutter.ContentRepeat content_repeat { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public float depth { get; set; }
 		[NoAccessorMethod]
 		[Version (since = "1.4")]
 		public Clutter.Effect effect { set; }
@@ -5211,12 +5117,12 @@ namespace Clutter {
 		public uint opacity { get; set; }
 		[NoAccessorMethod]
 		[Version (since = "1.12")]
-		public Clutter.Point pivot_point { owned get; set; }
+		public Graphene.Point pivot_point { owned get; set; }
 		[Version (since = "1.12")]
 		public float pivot_point_z { get; set; }
 		[NoAccessorMethod]
 		[Version (since = "1.12")]
-		public Clutter.Point position { owned get; set; }
+		public Graphene.Point position { owned get; set; }
 		[Version (since = "0.6")]
 		public bool reactive { get; set; }
 		[NoAccessorMethod]
@@ -5225,8 +5131,6 @@ namespace Clutter {
 		[Version (since = "0.8")]
 		public Clutter.RequestMode request_mode { get; set; }
 		[NoAccessorMethod]
-		public float resource_scale { get; }
-		[NoAccessorMethod]
 		[Version (since = "0.6")]
 		public double rotation_angle_x { get; set; }
 		[NoAccessorMethod]
@@ -5236,27 +5140,6 @@ namespace Clutter {
 		[Version (since = "0.6")]
 		public double rotation_angle_z { get; set; }
 		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public Clutter.Vertex rotation_center_x { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public Clutter.Vertex rotation_center_y { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public Clutter.Vertex rotation_center_z { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public Clutter.Gravity rotation_center_z_gravity { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public float scale_center_x { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public float scale_center_y { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public Clutter.Gravity scale_gravity { get; set; }
-		[NoAccessorMethod]
 		[Version (since = "0.6")]
 		public double scale_x { get; set; }
 		[NoAccessorMethod]
@@ -5269,7 +5152,7 @@ namespace Clutter {
 		public bool show_on_set_parent { get; set; }
 		[NoAccessorMethod]
 		[Version (since = "1.12")]
-		public Clutter.Size size { owned get; set; }
+		public Graphene.Size size { owned get; set; }
 		[Version (since = "1.0")]
 		public Clutter.TextDirection text_direction { get; set; }
 		[NoAccessorMethod]
@@ -5299,8 +5182,6 @@ namespace Clutter {
 		public bool y_expand { get; set; }
 		[Version (since = "1.12")]
 		public float z_position { get; set; }
-		[Version (since = "1.0")]
-		public signal void allocation_changed (Clutter.ActorBox box, Clutter.AllocationFlags flags);
 		[Version (since = "0.6")]
 		public virtual signal bool button_press_event (Clutter.ButtonEvent event);
 		[Version (since = "0.6")]
@@ -5331,22 +5212,25 @@ namespace Clutter {
 		public virtual signal bool motion_event (Clutter.MotionEvent event);
 		[HasEmitter]
 		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public virtual signal void paint ();
+		public virtual signal void paint (Clutter.PaintContext paint_context);
 		[Version (since = "0.2")]
 		public virtual signal void parent_set (Clutter.Actor? old_parent);
+		[HasEmitter]
 		[Version (since = "1.0")]
-		public virtual signal void pick (Clutter.Color color);
+		public virtual signal void pick (Clutter.PickContext pick_context);
 		[HasEmitter]
 		[Version (since = "1.2")]
 		public virtual signal void queue_relayout ();
 		[HasEmitter]
 		[Version (deprecated = true, deprecated_since = "1.16", since = "0.8")]
 		public virtual signal void realize ();
+		public virtual signal void resource_scale_changed ();
 		[Version (since = "0.6")]
 		public virtual signal bool scroll_event (Clutter.ScrollEvent event);
 		[HasEmitter]
 		[Version (since = "0.2")]
 		public virtual signal void show ();
+		public signal void stage_views_changed ();
 		[Version (since = "1.12")]
 		public virtual signal bool touch_event (Clutter.Event event);
 		[Version (since = "1.12")]
@@ -5358,21 +5242,33 @@ namespace Clutter {
 		public virtual signal void unrealize ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_actor_meta_get_type ()")]
-	[Version (since = "1.4")]
 	public abstract class ActorMeta : GLib.InitiallyUnowned {
 		[CCode (has_construct_function = false)]
 		protected ActorMeta ();
+		[Version (since = "1.4")]
 		public unowned Clutter.Actor get_actor ();
+		[Version (since = "1.4")]
 		public bool get_enabled ();
+		[Version (since = "1.4")]
 		public unowned string get_name ();
 		[NoWrapper]
 		public virtual void set_actor (Clutter.Actor? actor);
-		public void set_enabled (bool is_enabled);
+		[Version (since = "1.4")]
+		public virtual void set_enabled (bool is_enabled);
+		[Version (since = "1.4")]
 		public void set_name (string name);
+		[Version (since = "1.4")]
 		public Clutter.Actor actor { get; }
+		[Version (since = "1.4")]
 		public bool enabled { get; set; }
+		[Version (since = "1.4")]
 		public string name { get; set; }
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_actor_node_get_type ()")]
+	public class ActorNode : Clutter.PaintNode {
+		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+		public ActorNode (Clutter.Actor actor);
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_align_constraint_get_type ()")]
 	[Version (since = "1.4")]
 	public class AlignConstraint : Clutter.Constraint {
@@ -5380,81 +5276,18 @@ namespace Clutter {
 		public AlignConstraint (Clutter.Actor? source, Clutter.AlignAxis axis, float factor);
 		public Clutter.AlignAxis get_align_axis ();
 		public float get_factor ();
+		public void get_pivot_point (out unowned Graphene.Point pivot_point);
 		public unowned Clutter.Actor get_source ();
 		public void set_align_axis (Clutter.AlignAxis axis);
 		public void set_factor (float factor);
+		public void set_pivot_point (Graphene.Point pivot_point);
 		public void set_source (Clutter.Actor? source);
 		public Clutter.AlignAxis align_axis { get; set construct; }
 		public float factor { get; set construct; }
+		[NoAccessorMethod]
+		public Graphene.Point pivot_point { owned get; set; }
 		public Clutter.Actor source { get; set construct; }
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_alpha_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
-	public class Alpha : GLib.InitiallyUnowned, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		public Alpha ();
-		[CCode (has_construct_function = false)]
-		[Version (since = "1.0")]
-		public Alpha.full (Clutter.Timeline timeline, ulong mode);
-		public double get_alpha ();
-		[Version (since = "1.0")]
-		public ulong get_mode ();
-		public unowned Clutter.Timeline get_timeline ();
-		[Version (since = "1.0")]
-		public static ulong register_closure (GLib.Closure closure);
-		[Version (since = "1.0")]
-		public static ulong register_func (Clutter.AlphaFunc func);
-		[Version (since = "0.8")]
-		public void set_closure (GLib.Closure closure);
-		public void set_func (owned Clutter.AlphaFunc func);
-		[Version (since = "1.0")]
-		public void set_mode (ulong mode);
-		public void set_timeline (Clutter.Timeline timeline);
-		[CCode (has_construct_function = false)]
-		[Version (since = "1.0")]
-		public Alpha.with_func (Clutter.Timeline timeline, owned Clutter.AlphaFunc func);
-		public double alpha { get; }
-		[Version (since = "1.0")]
-		public ulong mode { get; set construct; }
-		public Clutter.Timeline timeline { get; set; }
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_animation_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-	public class Animation : GLib.Object, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		public Animation ();
-		public unowned Clutter.Animation bind (string property_name, GLib.Value final);
-		public unowned Clutter.Animation bind_interval (string property_name, owned Clutter.Interval interval);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public unowned Clutter.Alpha get_alpha ();
-		public uint get_duration ();
-		public unowned Clutter.Interval get_interval (string property_name);
-		public bool get_loop ();
-		public ulong get_mode ();
-		public unowned GLib.Object get_object ();
-		public unowned Clutter.Timeline get_timeline ();
-		public bool has_property (string property_name);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public void set_alpha (Clutter.Alpha alpha);
-		public void set_duration (uint msecs);
-		public void set_loop (bool loop);
-		public void set_mode (ulong mode);
-		public void set_object (GLib.Object object);
-		public void set_timeline (Clutter.Timeline? timeline);
-		public void unbind_property (string property_name);
-		public unowned Clutter.Animation update (string property_name, GLib.Value final);
-		public void update_interval (string property_name, Clutter.Interval interval);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public Clutter.Alpha alpha { get; set; }
-		public uint duration { get; set; }
-		public bool loop { get; set; }
-		public ulong mode { get; set; }
-		public GLib.Object object { get; set; }
-		public Clutter.Timeline timeline { get; set; }
-		[HasEmitter]
-		public virtual signal void completed ();
-		public virtual signal void started ();
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
 	[Version (since = "0.2")]
@@ -5467,37 +5300,14 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_backend_get_type ()")]
 	[Version (since = "0.4")]
-	public class Backend : GLib.Object {
+	public abstract class Backend : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Backend ();
-		[NoWrapper]
-		public virtual void add_options (GLib.OptionGroup group);
-		public void bell_notify ();
-		[NoWrapper]
-		public virtual bool create_context () throws GLib.Error;
-		[NoWrapper]
-		public virtual unowned Clutter.StageWindow create_stage (Clutter.Stage wrapper) throws GLib.Error;
-		[NoWrapper]
-		public virtual void ensure_context (Clutter.Stage stage);
-		[NoWrapper]
-		public virtual unowned Clutter.DeviceManager get_device_manager ();
-		[NoWrapper]
-		public virtual Clutter.FeatureFlags get_features ();
+		public unowned Clutter.Seat get_default_seat ();
 		[Version (since = "0.8")]
 		public unowned Cairo.FontOptions get_font_options ();
 		public unowned Clutter.InputMethod get_input_method ();
-		public unowned Clutter.Keymap get_keymap ();
 		public double get_resolution ();
-		[NoWrapper]
-		public virtual void init_events ();
-		[NoWrapper]
-		public virtual void init_features ();
-		[NoWrapper]
-		public virtual bool post_parse () throws GLib.Error;
-		[NoWrapper]
-		public virtual bool pre_parse () throws GLib.Error;
-		[NoWrapper]
-		public virtual void redraw (Clutter.Stage stage);
 		[Version (since = "0.8")]
 		public void set_font_options (Cairo.FontOptions options);
 		public void set_input_method (Clutter.InputMethod method);
@@ -5508,95 +5318,11 @@ namespace Clutter {
 		[Version (since = "1.4")]
 		public signal void settings_changed ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public abstract class Behaviour : GLib.Object, Clutter.Scriptable {
-		[CCode (has_construct_function = false)]
-		protected Behaviour ();
-		public void actors_foreach (Clutter.BehaviourForeachFunc func);
-		[NoWrapper]
-		public virtual void alpha_notify (double alpha_value);
-		public void apply (Clutter.Actor actor);
-		public GLib.SList<weak Clutter.Actor> get_actors ();
-		public unowned Clutter.Alpha get_alpha ();
-		public int get_n_actors ();
-		public unowned Clutter.Actor get_nth_actor (int index_);
-		[Version (since = "0.4")]
-		public bool is_applied (Clutter.Actor actor);
-		public void remove (Clutter.Actor actor);
-		[Version (since = "0.4")]
-		public void remove_all ();
-		public void set_alpha (Clutter.Alpha alpha);
-		public Clutter.Alpha alpha { get; set; }
-		[Version (since = "0.4")]
-		public virtual signal void applied (Clutter.Actor actor);
-		[Version (since = "0.4")]
-		public virtual signal void removed (Clutter.Actor actor);
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_depth_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public class BehaviourDepth : Clutter.Behaviour, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
-		[Version (since = "0.4")]
-		public BehaviourDepth (Clutter.Alpha? alpha, int depth_start, int depth_end);
-		[Version (since = "0.6")]
-		public void get_bounds (out int depth_start, out int depth_end);
-		[Version (since = "0.6")]
-		public void set_bounds (int depth_start, int depth_end);
-		[NoAccessorMethod]
-		[Version (since = "0.4")]
-		public int depth_end { get; set; }
-		[NoAccessorMethod]
-		[Version (since = "0.4")]
-		public int depth_start { get; set; }
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_opacity_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public class BehaviourOpacity : Clutter.Behaviour, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
-		public BehaviourOpacity (Clutter.Alpha? alpha, uint8 opacity_start, uint8 opacity_end);
-		[Version (since = "0.6")]
-		public void get_bounds (out uint8 opacity_start, out uint8 opacity_end);
-		[Version (since = "0.6")]
-		public void set_bounds (uint8 opacity_start, uint8 opacity_end);
-		[NoAccessorMethod]
-		public uint opacity_end { get; set; }
-		[NoAccessorMethod]
-		public uint opacity_start { get; set; }
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_scale_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public class BehaviourScale : Clutter.Behaviour, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
-		public BehaviourScale (Clutter.Alpha? alpha, double x_scale_start, double y_scale_start, double x_scale_end, double y_scale_end);
-		[Version (since = "0.4")]
-		public void get_bounds (out double x_scale_start, out double y_scale_start, out double x_scale_end, out double y_scale_end);
-		[Version (since = "0.6")]
-		public void set_bounds (double x_scale_start, double y_scale_start, double x_scale_end, double y_scale_end);
-		[NoAccessorMethod]
-		[Version (since = "0.6")]
-		public double x_scale_end { get; set; }
-		[NoAccessorMethod]
-		[Version (since = "0.6")]
-		public double x_scale_start { get; set; }
-		[NoAccessorMethod]
-		[Version (since = "0.6")]
-		public double y_scale_end { get; set; }
-		[NoAccessorMethod]
-		[Version (since = "0.6")]
-		public double y_scale_start { get; set; }
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_bin_layout_get_type ()")]
 	[Version (since = "1.2")]
 	public class BinLayout : Clutter.LayoutManager {
 		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
 		public BinLayout (Clutter.BinAlignment x_align = Clutter.BinAlignment.START, Clutter.BinAlignment y_align = Clutter.BinAlignment.START);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void add (Clutter.Actor child, Clutter.BinAlignment x_align, Clutter.BinAlignment y_align);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void get_alignment (Clutter.Actor? child, out Clutter.BinAlignment x_align, out Clutter.BinAlignment y_align);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void set_alignment (Clutter.Actor? child, Clutter.BinAlignment x_align, Clutter.BinAlignment y_align);
 		[NoAccessorMethod]
 		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
 		public Clutter.BinAlignment x_align { get; set; }
@@ -5644,98 +5370,29 @@ namespace Clutter {
 		[CCode (has_construct_function = false, type = "ClutterEffect*")]
 		public BlurEffect ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_box_get_type ()")]
-	[Version (since = "1.2")]
-	public class Box : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public Box (Clutter.LayoutManager manager);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public Clutter.Color get_color ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public unowned Clutter.LayoutManager get_layout_manager ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public void pack (Clutter.Actor actor, ...);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public void pack_after (Clutter.Actor actor, Clutter.Actor? sibling, ...);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public void pack_at (Clutter.Actor actor, int position, ...);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public void pack_before (Clutter.Actor actor, Clutter.Actor? sibling, ...);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public void packv (Clutter.Actor actor, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5, array_length_type = "guint")] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5, array_length_type = "guint")] GLib.Value[] values);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public void set_color (Clutter.Color? color);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public void set_layout_manager (Clutter.LayoutManager manager);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public Clutter.Color color { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
-		public bool color_set { get; set; }
-		public Clutter.LayoutManager layout_manager { get; set; }
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_box_layout_get_type ()")]
 	[Version (since = "1.2")]
 	public class BoxLayout : Clutter.LayoutManager {
 		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
 		public BoxLayout ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void get_alignment (Clutter.Actor actor, out Clutter.BoxAlignment x_align, out Clutter.BoxAlignment y_align);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public uint get_easing_duration ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public ulong get_easing_mode ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public bool get_expand (Clutter.Actor actor);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void get_fill (Clutter.Actor actor, out bool x_fill, out bool y_fill);
 		[Version (since = "1.4")]
 		public bool get_homogeneous ();
 		[Version (since = "1.12")]
 		public Clutter.Orientation get_orientation ();
 		public bool get_pack_start ();
 		public uint get_spacing ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public bool get_use_animations ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public bool get_vertical ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void pack (Clutter.Actor actor, bool expand, bool x_fill, bool y_fill, Clutter.BoxAlignment x_align, Clutter.BoxAlignment y_align);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void set_alignment (Clutter.Actor actor, Clutter.BoxAlignment x_align, Clutter.BoxAlignment y_align);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void set_easing_duration (uint msecs);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void set_easing_mode (ulong mode);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void set_expand (Clutter.Actor actor, bool expand);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void set_fill (Clutter.Actor actor, bool x_fill, bool y_fill);
 		[Version (since = "1.4")]
 		public void set_homogeneous (bool homogeneous);
 		[Version (since = "1.12")]
 		public void set_orientation (Clutter.Orientation orientation);
 		public void set_pack_start (bool pack_start);
 		public void set_spacing (uint spacing);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void set_use_animations (bool animate);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public void set_vertical (bool vertical);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public uint easing_duration { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public ulong easing_mode { get; set; }
 		[Version (since = "1.4")]
 		public bool homogeneous { get; set; }
 		[Version (since = "1.12")]
 		public Clutter.Orientation orientation { get; set; }
 		public bool pack_start { get; set; }
 		public uint spacing { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public bool use_animations { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public bool vertical { get; set; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_brightness_contrast_effect_get_type ()")]
 	[Version (since = "1.10")]
@@ -5749,9 +5406,9 @@ namespace Clutter {
 		public void set_contrast (float contrast);
 		public void set_contrast_full (float red, float green, float blue);
 		[NoAccessorMethod]
-		public Clutter.Color brightness { get; set; }
+		public Clutter.Color brightness { owned get; set; }
 		[NoAccessorMethod]
-		public Clutter.Color contrast { get; set; }
+		public Clutter.Color contrast { owned get; set; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
@@ -5770,37 +5427,6 @@ namespace Clutter {
 		public float x;
 		public float y;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_cairo_texture_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-	public class CairoTexture : Clutter.Texture, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		public CairoTexture (uint width, uint height);
-		public void clear ();
-		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
-		public Cairo.Context create ();
-		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
-		public Cairo.Context create_region (int x_offset, int y_offset, int width, int height);
-		[Version (since = "1.8")]
-		public bool get_auto_resize ();
-		public void get_surface_size (out uint width, out uint height);
-		[Version (since = "1.8")]
-		public void invalidate ();
-		[Version (since = "1.8")]
-		public void invalidate_rectangle (Cairo.RectangleInt? rect);
-		[Version (since = "1.8")]
-		public void set_auto_resize (bool value);
-		public void set_surface_size (uint width, uint height);
-		[Version (since = "1.8")]
-		public bool auto_resize { get; set; }
-		[NoAccessorMethod]
-		public uint surface_height { get; set; }
-		[NoAccessorMethod]
-		public uint surface_width { get; set; }
-		[Version (since = "1.6")]
-		public virtual signal Cairo.Surface create_surface (uint width, uint height);
-		[Version (since = "1.8")]
-		public virtual signal bool draw (Cairo.Context cr);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_canvas_get_type ()")]
 	[Version (since = "1.10")]
 	public class Canvas : GLib.Object, Clutter.Content {
@@ -5827,17 +5453,20 @@ namespace Clutter {
 		public Clutter.Container container { get; construct; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_click_action_get_type ()")]
-	[Version (since = "1.4")]
 	public class ClickAction : Clutter.Action {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
+		[Version (since = "1.4")]
 		public ClickAction ();
+		[Version (since = "1.4")]
 		public uint get_button ();
 		[Version (since = "1.8")]
 		public void get_coords (out float press_x, out float press_y);
 		[Version (since = "1.6")]
 		public Clutter.ModifierType get_state ();
+		[Version (since = "1.4")]
 		public void release ();
 		[NoAccessorMethod]
+		[Version (since = "1.4")]
 		public bool held { get; }
 		[NoAccessorMethod]
 		[Version (since = "1.8")]
@@ -5846,7 +5475,9 @@ namespace Clutter {
 		[Version (since = "1.8")]
 		public int long_press_threshold { get; set; }
 		[NoAccessorMethod]
+		[Version (since = "1.4")]
 		public bool pressed { get; }
+		[Version (since = "1.4")]
 		public virtual signal void clicked (Clutter.Actor actor);
 		[Version (since = "1.8")]
 		public virtual signal bool long_press (Clutter.Actor actor, Clutter.LongPressState state);
@@ -5888,8 +5519,7 @@ namespace Clutter {
 		protected Constraint ();
 		[NoWrapper]
 		public virtual void update_allocation (Clutter.Actor actor, Clutter.ActorBox allocation);
-		[NoWrapper]
-		public virtual void update_preferred_size (Clutter.Actor actor, Clutter.Orientation direction, float for_size, float minimum_size, float natural_size);
+		public virtual void update_preferred_size (Clutter.Actor actor, Clutter.Orientation direction, float for_size, ref float minimum_size, ref float natural_size);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
@@ -5898,6 +5528,7 @@ namespace Clutter {
 		public weak Clutter.InputDevice device;
 		public Clutter.EventFlags flags;
 		public weak Clutter.Actor related;
+		public weak Clutter.EventSequence sequence;
 		public weak Clutter.Actor source;
 		public weak Clutter.Stage stage;
 		public uint32 time;
@@ -5931,98 +5562,21 @@ namespace Clutter {
 		public void set_factor (double factor);
 		public double factor { get; set; }
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_device_manager_get_type ()")]
-	[Version (since = "1.2")]
-	public abstract class DeviceManager : GLib.Object {
-		[CCode (has_construct_function = false)]
-		protected DeviceManager ();
-		[NoWrapper]
-		public virtual void add_device (Clutter.InputDevice device);
-		[NoWrapper]
-		public virtual void apply_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
-		[NoWrapper]
-		public virtual void compress_motion (Clutter.Event event, Clutter.Event to_discard);
-		public virtual Clutter.VirtualInputDevice create_virtual_device (Clutter.InputDeviceType device_type);
-		public virtual unowned Clutter.InputDevice get_core_device (Clutter.InputDeviceType device_type);
-		public static unowned Clutter.DeviceManager get_default ();
-		public virtual unowned Clutter.InputDevice get_device (int device_id);
-		public void get_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
-		public virtual Clutter.VirtualDeviceType get_supported_virtual_device_types ();
-		public GLib.SList<weak Clutter.InputDevice> list_devices ();
-		public unowned GLib.SList<Clutter.InputDevice> peek_devices ();
-		[NoWrapper]
-		public virtual void remove_device (Clutter.InputDevice device);
-		[NoWrapper]
-		public virtual void select_stage_events (Clutter.Stage stage);
-		public void set_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
-		[NoAccessorMethod]
-		public Clutter.Backend backend { owned get; construct; }
-		public signal void device_added (Clutter.InputDevice device);
-		public signal void device_removed (Clutter.InputDevice device);
-		public signal void kbd_a11y_flags_changed (uint settings_flags, uint changed_mask);
-		public signal void kbd_a11y_mods_state_changed (uint latched_mask, uint locked_mask);
-		public signal void tool_changed (Clutter.InputDevice object, Clutter.InputDeviceTool p0);
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_drag_action_get_type ()")]
-	[Version (since = "1.4")]
-	public class DragAction : Clutter.Action {
-		[CCode (has_construct_function = false, type = "ClutterAction*")]
-		public DragAction ();
-		public bool get_drag_area (Clutter.Rect drag_area);
-		public Clutter.DragAxis get_drag_axis ();
-		public unowned Clutter.Actor get_drag_handle ();
-		public void get_drag_threshold (out uint x_threshold, out uint y_threshold);
-		public void get_motion_coords (out float motion_x, out float motion_y);
-		public void get_press_coords (out float press_x, out float press_y);
-		public void set_drag_area (Clutter.Rect? drag_area);
-		public void set_drag_axis (Clutter.DragAxis axis);
-		public void set_drag_handle (Clutter.Actor? handle);
-		public void set_drag_threshold (int x_threshold, int y_threshold);
-		[NoAccessorMethod]
-		[Version (since = "1.12")]
-		public Clutter.Rect drag_area { owned get; set; }
-		[NoAccessorMethod]
-		[Version (since = "1.12")]
-		public bool drag_area_set { get; }
-		public Clutter.DragAxis drag_axis { get; set; }
-		public Clutter.Actor drag_handle { get; set; }
-		[NoAccessorMethod]
-		public int x_drag_threshold { get; set; }
-		[NoAccessorMethod]
-		public int y_drag_threshold { get; set; }
-		public virtual signal void drag_begin (Clutter.Actor actor, float event_x, float event_y, Clutter.ModifierType modifiers);
-		public virtual signal void drag_end (Clutter.Actor actor, float event_x, float event_y, Clutter.ModifierType modifiers);
-		public virtual signal void drag_motion (Clutter.Actor actor, float delta_x, float delta_y);
-		[Version (since = "1.12")]
-		public virtual signal bool drag_progress (Clutter.Actor actor, float delta_x, float delta_y);
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_drop_action_get_type ()")]
-	[Version (since = "1.8")]
-	public class DropAction : Clutter.Action {
-		[CCode (has_construct_function = false, type = "ClutterAction*")]
-		public DropAction ();
-		public virtual signal bool can_drop (Clutter.Actor actor, float event_x, float event_y);
-		public virtual signal void drop (Clutter.Actor actor, float event_x, float event_y);
-		[Version (since = "1.12")]
-		public signal void drop_cancel (Clutter.Actor actor, float event_x, float event_y);
-		public virtual signal void over_in (Clutter.Actor actor);
-		public virtual signal void over_out (Clutter.Actor actor);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_effect_get_type ()")]
 	[Version (since = "1.4")]
 	public abstract class Effect : Clutter.ActorMeta {
 		[CCode (has_construct_function = false)]
 		protected Effect ();
 		[NoWrapper]
-		public virtual bool get_paint_volume (Clutter.PaintVolume volume);
+		public virtual bool modify_paint_volume (Clutter.PaintVolume volume);
 		[NoWrapper]
-		public virtual void paint (Clutter.EffectPaintFlags flags);
+		public virtual void paint (Clutter.PaintContext paint_context, Clutter.EffectPaintFlags flags);
 		[NoWrapper]
-		public virtual void pick (Clutter.EffectPaintFlags flags);
+		public virtual void pick (Clutter.PickContext pick_context);
 		[NoWrapper]
-		public virtual void post_paint ();
+		public virtual void post_paint (Clutter.PaintContext paint_context);
 		[NoWrapper]
-		public virtual bool pre_paint ();
+		public virtual bool pre_paint (Clutter.PaintContext paint_context);
 		[Version (since = "1.8")]
 		public void queue_repaint ();
 	}
@@ -6033,8 +5587,12 @@ namespace Clutter {
 		public Clutter.EventType type;
 		[CCode (has_construct_function = false)]
 		public Event (Clutter.EventType type);
+		[Version (since = "1.18")]
+		public static uint add_filter (Clutter.Stage? stage, [CCode (delegate_target_pos = 2.2, destroy_notify_pos = 2.1)] owned Clutter.EventFilterFunc func);
 		public Clutter.Event copy ();
 		public void free ();
+		[Version (since = "0.4")]
+		public static Clutter.Event @get ();
 		[Version (since = "1.12")]
 		public double get_angle (Clutter.Event target);
 		[Version (since = "1.6")]
@@ -6073,7 +5631,7 @@ namespace Clutter {
 		public uint get_mode_group ();
 		public bool get_pad_event_details (out uint number, out uint mode, out double value);
 		[Version (since = "1.12")]
-		public void get_position (Clutter.Point position);
+		public void get_position (Graphene.Point position);
 		[Version (since = "1.0")]
 		public unowned Clutter.Actor get_related ();
 		[Version (since = "1.10")]
@@ -6106,8 +5664,12 @@ namespace Clutter {
 		public bool has_shift_modifier ();
 		[Version (since = "1.12")]
 		public bool is_pointer_emulated ();
+		[Version (since = "0.4")]
+		public static unowned Clutter.Event peek ();
 		[Version (since = "0.6")]
 		public void put ();
+		[Version (since = "1.18")]
+		public static void remove_filter (uint id);
 		[Version (since = "1.8")]
 		public void set_button (uint32 button);
 		[Version (since = "1.8")]
@@ -6140,16 +5702,6 @@ namespace Clutter {
 		public void set_state (Clutter.ModifierType state);
 		[Version (since = "1.8")]
 		public void set_time (uint32 time_);
-		public Clutter.AnyEvent any {[CCode (cname = "(ClutterAnyEvent *)")]  get; }
-		public Clutter.ButtonEvent button {[CCode (cname = "(ClutterButtonEvent *)")]  get; }
-		public Clutter.CrossingEvent crossing {[CCode (cname = "(ClutterCrossingEvent *)")]  get; }
-		public Clutter.KeyEvent key {[CCode (cname = "(ClutterKeyEvent *)")]  get; }
-		public Clutter.MotionEvent motion {[CCode (cname = "(ClutterMotionEvent *)")]  get; }
-		public Clutter.ScrollEvent scroll {[CCode (cname = "(ClutterScrollEvent *)")]  get; }
-		public Clutter.StageStateEvent stage_state {[CCode (cname = "(ClutterStageStateEvent *)")]  get; }
-		public Clutter.TouchEvent touch {[CCode (cname = "(ClutterTouchEvent *)")]  get; }
-		public Clutter.TouchpadPinchEvent touchpad_pinch {[CCode (cname = "(ClutterTouchpadPinchEvent *)")]  get; }
-		public Clutter.TouchpadSwipeEvent touchpad_swipe {[CCode (cname = "(ClutterTouchpadSwipeEvent *)")]  get; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_event_sequence_get_type ()")]
 	[Compact]
@@ -6198,10 +5750,24 @@ namespace Clutter {
 		[Version (since = "1.16")]
 		public bool snap_to_grid { get; set; }
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_frame_clock_get_type ()")]
+	public class FrameClock : GLib.Object {
+		[CCode (has_construct_function = false)]
+		public FrameClock (float refresh_rate, Clutter.FrameListenerIface iface, void* user_data);
+		public void add_timeline (Clutter.Timeline timeline);
+		public float get_refresh_rate ();
+		public void inhibit ();
+		public void remove_timeline (Clutter.Timeline timeline);
+		public void schedule_update ();
+		public void schedule_update_now ();
+		public void uninhibit ();
+		[HasEmitter]
+		public signal void destroy ();
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_gesture_action_get_type ()")]
-	[Version (since = "1.8")]
 	public class GestureAction : Clutter.Action {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
+		[Version (since = "1.8")]
 		public GestureAction ();
 		[Version (since = "1.12")]
 		public void cancel ();
@@ -6211,6 +5777,7 @@ namespace Clutter {
 		public unowned Clutter.InputDevice get_device (uint point);
 		[Version (since = "1.14")]
 		public unowned Clutter.Event get_last_event (uint point);
+		[Version (since = "1.8")]
 		public void get_motion_coords (uint point, out float motion_x, out float motion_y);
 		[Version (since = "1.12")]
 		public float get_motion_delta (uint point, out float delta_x, out float delta_y);
@@ -6218,7 +5785,9 @@ namespace Clutter {
 		public uint get_n_current_points ();
 		[Version (since = "1.12")]
 		public int get_n_touch_points ();
+		[Version (since = "1.8")]
 		public void get_press_coords (uint point, out float press_x, out float press_y);
+		[Version (since = "1.8")]
 		public void get_release_coords (uint point, out float release_x, out float release_y);
 		[Version (since = "1.12")]
 		public unowned Clutter.EventSequence get_sequence (uint point);
@@ -6246,9 +5815,13 @@ namespace Clutter {
 		public float threshold_trigger_distance_y { get; construct; }
 		[Version (since = "1.18")]
 		public Clutter.GestureTriggerEdge threshold_trigger_edge { get; construct; }
+		[Version (since = "1.8")]
 		public virtual signal bool gesture_begin (Clutter.Actor actor);
+		[Version (since = "1.8")]
 		public virtual signal void gesture_cancel (Clutter.Actor actor);
+		[Version (since = "1.8")]
 		public virtual signal void gesture_end (Clutter.Actor actor);
+		[Version (since = "1.8")]
 		public virtual signal bool gesture_progress (Clutter.Actor actor);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_grid_layout_get_type ()")]
@@ -6278,19 +5851,6 @@ namespace Clutter {
 		public bool row_homogeneous { get; set; }
 		public uint row_spacing { get; set; }
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_group_get_type ()")]
-	[Version (since = "0.2")]
-	public class Group : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public Group ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
-		public int get_n_children ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
-		public unowned Clutter.Actor get_nth_child (int index_);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void remove_all ();
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_image_get_type ()")]
 	[Version (since = "1.10")]
 	public class Image : GLib.Object, Clutter.Content {
@@ -6306,6 +5866,8 @@ namespace Clutter {
 	public class InputDevice : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected InputDevice ();
+		[Version (since = "1.2")]
+		public unowned Clutter.Actor get_actor (Clutter.EventSequence? sequence);
 		[Version (since = "1.6")]
 		public unowned Clutter.InputDevice get_associated_device ();
 		[Version (since = "1.6")]
@@ -6313,7 +5875,7 @@ namespace Clutter {
 		[Version (since = "1.6")]
 		public bool get_axis_value ([CCode (array_length = false)] double[] axes, Clutter.InputAxis axis, out double value);
 		[Version (since = "1.12")]
-		public bool get_coords (Clutter.EventSequence? sequence, Clutter.Point point);
+		public bool get_coords (Clutter.EventSequence? sequence, Graphene.Point point);
 		[Version (since = "1.0")]
 		public int get_device_id ();
 		[Version (since = "1.6")]
@@ -6325,12 +5887,9 @@ namespace Clutter {
 		public Clutter.InputDeviceType get_device_type ();
 		[Version (since = "1.6")]
 		public bool get_enabled ();
-		[CCode (cname = "clutter_get_input_device_for_id")]
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
-		public static unowned Clutter.InputDevice get_for_id (int id_);
 		[Version (since = "1.10")]
 		public unowned Clutter.Actor get_grabbed_actor ();
-		public int get_group_n_modes (int group);
+		public virtual int get_group_n_modes (int group);
 		[Version (since = "1.6")]
 		public bool get_has_cursor ();
 		[Version (since = "1.6")]
@@ -6346,23 +5905,21 @@ namespace Clutter {
 		public int get_n_mode_groups ();
 		public int get_n_rings ();
 		public int get_n_strips ();
-		public bool get_physical_size (double width, double height);
-		[Version (since = "1.2")]
-		public unowned Clutter.Actor get_pointer_actor ();
 		[Version (since = "1.2")]
 		public unowned Clutter.Stage get_pointer_stage ();
 		[Version (since = "1.22")]
 		public unowned string get_product_id ();
+		public unowned Clutter.Seat get_seat ();
 		[Version (since = "1.6")]
 		public GLib.List<weak Clutter.InputDevice> get_slave_devices ();
 		[Version (since = "1.22")]
 		public unowned string get_vendor_id ();
 		[Version (since = "1.10")]
 		public void grab (Clutter.Actor actor);
-		public bool is_grouped (Clutter.InputDevice other_device);
-		public bool is_mode_switch_button (uint group, uint button);
+		public virtual bool is_grouped (Clutter.InputDevice other_device);
+		public virtual bool is_mode_switch_button (uint group, uint button);
 		[Version (since = "1.10")]
-		public bool keycode_to_evdev (uint hardware_keycode, uint evdev_keycode);
+		public virtual bool keycode_to_evdev (uint hardware_keycode, uint evdev_keycode);
 		[Version (since = "1.12")]
 		public unowned Clutter.Actor sequence_get_grabbed_actor (Clutter.EventSequence sequence);
 		[Version (since = "1.12")]
@@ -6378,12 +5935,11 @@ namespace Clutter {
 		public void ungrab ();
 		[Version (since = "1.2")]
 		public void update_from_event (Clutter.Event event, bool update_stage);
+		[NoWrapper]
+		public virtual void update_from_tool (Clutter.InputDeviceTool tool);
 		[NoAccessorMethod]
 		[Version (since = "1.6")]
 		public Clutter.Backend backend { owned get; construct; }
-		[NoAccessorMethod]
-		[Version (since = "1.6")]
-		public Clutter.DeviceManager device_manager { owned get; construct; }
 		public Clutter.InputMode device_mode { get; construct; }
 		public string device_node { get; construct; }
 		[Version (since = "1.2")]
@@ -6406,6 +5962,7 @@ namespace Clutter {
 		public string name { owned get; construct; }
 		[Version (since = "1.22")]
 		public string product_id { get; construct; }
+		public Clutter.Seat seat { get; construct; }
 		[Version (since = "1.22")]
 		public string vendor_id { get; construct; }
 	}
@@ -6430,7 +5987,7 @@ namespace Clutter {
 		[NoWrapper]
 		public virtual void commit_text (string text);
 		[NoWrapper]
-		public virtual void delete_surrounding (uint offset, uint len);
+		public virtual void delete_surrounding (int offset, uint len);
 		public bool filter_key_event (Clutter.KeyEvent key);
 		[NoWrapper]
 		public virtual void focus_in (Clutter.InputMethod input_method);
@@ -6443,7 +6000,7 @@ namespace Clutter {
 		public void set_can_show_preedit (bool can_show_preedit);
 		public void set_content_hints (Clutter.InputContentHintFlags hint);
 		public void set_content_purpose (Clutter.InputContentPurpose purpose);
-		public void set_cursor_location (Clutter.Rect rect);
+		public void set_cursor_location (Graphene.Rect rect);
 		public void set_input_panel_state (Clutter.InputPanelState state);
 		[NoWrapper]
 		public virtual void set_preedit_text (string preedit, uint cursor);
@@ -6462,7 +6019,7 @@ namespace Clutter {
 		[NoWrapper]
 		public virtual void reset ();
 		[NoWrapper]
-		public virtual void set_cursor_location (Clutter.Rect rect);
+		public virtual void set_cursor_location (Graphene.Rect rect);
 		public void set_input_panel_state (Clutter.InputPanelState state);
 		public void set_preedit_text (string? preedit, uint cursor);
 		[NoWrapper]
@@ -6479,9 +6036,9 @@ namespace Clutter {
 		public Clutter.InputContentPurpose content_purpose { get; set; }
 		[HasEmitter]
 		public signal void commit (string text);
-		public signal void cursor_location_changed (Clutter.Rect object);
+		public signal void cursor_location_changed (Graphene.Rect object);
 		[HasEmitter]
-		public signal void delete_surrounding (uint offset, uint len);
+		public signal void delete_surrounding (int offset, uint len);
 		public signal void input_panel_state (Clutter.InputPanelState object);
 		[HasEmitter]
 		public signal void request_surrounding ();
@@ -6555,28 +6112,28 @@ namespace Clutter {
 		[CCode (has_construct_function = false)]
 		protected Keymap ();
 		public virtual bool get_caps_lock_state ();
+		public virtual Pango.Direction get_direction ();
 		public virtual bool get_num_lock_state ();
 		public signal void state_changed ();
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_layer_node_get_type ()")]
+	public class LayerNode : Clutter.PaintNode {
+		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+		public LayerNode (Cogl.Matrix projection, Cairo.Rectangle viewport, float width, float height, uint8 opacity);
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_layout_manager_get_type ()")]
 	[Version (since = "1.2")]
 	public abstract class LayoutManager : GLib.InitiallyUnowned {
 		[CCode (has_construct_function = false)]
 		protected LayoutManager ();
-		public virtual void allocate (Clutter.Container container, Clutter.ActorBox allocation, Clutter.AllocationFlags flags);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public virtual unowned Clutter.Alpha begin_animation (uint duration, ulong mode);
+		public virtual void allocate (Clutter.Container container, Clutter.ActorBox allocation);
 		public void child_get (Clutter.Container container, Clutter.Actor actor, ...);
 		public void child_get_property (Clutter.Container container, Clutter.Actor actor, string property_name, GLib.Value value);
 		public void child_set (Clutter.Container container, Clutter.Actor actor, ...);
 		public void child_set_property (Clutter.Container container, Clutter.Actor actor, string property_name, GLib.Value value);
 		[NoWrapper]
 		public virtual unowned Clutter.LayoutMeta create_child_meta (Clutter.Container container, Clutter.Actor actor);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public virtual void end_animation ();
 		public unowned GLib.ParamSpec find_child_property (string name);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
-		public virtual double get_animation_progress ();
 		[Version (since = "1.0")]
 		public unowned Clutter.LayoutMeta get_child_meta (Clutter.Container container, Clutter.Actor actor);
 		[NoWrapper]
@@ -6632,12 +6189,12 @@ namespace Clutter {
 		protected OffscreenEffect ();
 		public virtual Cogl.Handle create_texture (float width, float height);
 		[Version (since = "1.14")]
-		public bool get_target_rect (out unowned Clutter.Rect rect);
+		public bool get_target_rect (out unowned Graphene.Rect rect);
 		[Version (deprecated = true, deprecated_since = "1.14", since = "1.8")]
 		public bool get_target_size (out float width, out float height);
 		[Version (since = "1.10")]
 		public unowned Cogl.Handle get_texture ();
-		public virtual void paint_target ();
+		public virtual void paint_target (Clutter.PaintContext paint_context);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_page_turn_effect_get_type ()")]
 	[Version (since = "1.4")]
@@ -6654,6 +6211,17 @@ namespace Clutter {
 		public double period { get; set; }
 		public float radius { get; set; }
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", ref_function = "clutter_paint_context_ref", type_id = "clutter_paint_context_get_type ()", unref_function = "clutter_paint_context_unref")]
+	[Compact]
+	public class PaintContext {
+		public void destroy ();
+		public unowned Cogl.Framebuffer get_framebuffer ();
+		public unowned Cairo.Region get_redraw_clip ();
+		public void pop_framebuffer ();
+		public void push_framebuffer (Cogl.Framebuffer framebuffer);
+		public unowned Clutter.PaintContext @ref ();
+		public void unref ();
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_paint_node_get_type ()")]
 	[Version (since = "1.10")]
 	public abstract class PaintNode {
@@ -6663,7 +6231,8 @@ namespace Clutter {
 		public void add_multitexture_rectangle (Clutter.ActorBox rect, float text_coords, uint text_coords_len);
 		public void add_rectangle (Clutter.ActorBox rect);
 		public void add_texture_rectangle (Clutter.ActorBox rect, float x_1, float y_1, float x_2, float y_2);
-		public void paint ();
+		public unowned Cogl.Framebuffer get_framebuffer ();
+		public void paint (Clutter.PaintContext paint_context);
 		public unowned Clutter.PaintNode @ref ();
 		public void set_name (string name);
 		public void unref ();
@@ -6681,7 +6250,7 @@ namespace Clutter {
 		[Version (since = "1.6")]
 		public float get_height ();
 		[Version (since = "1.6")]
-		public Clutter.Vertex get_origin ();
+		public void get_origin (out unowned Graphene.Point3D vertex);
 		[Version (since = "1.6")]
 		public float get_width ();
 		[Version (since = "1.6")]
@@ -6691,7 +6260,7 @@ namespace Clutter {
 		[Version (since = "1.6")]
 		public void set_height (float height);
 		[Version (since = "1.6")]
-		public void set_origin (Clutter.Vertex origin);
+		public void set_origin (Graphene.Point3D origin);
 		[Version (since = "1.6")]
 		public void set_width (float width);
 		[Version (since = "1.6")]
@@ -6778,88 +6347,29 @@ namespace Clutter {
 		public Clutter.Path path { get; set; }
 		public signal void node_reached (Clutter.Actor actor, uint index);
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", ref_function = "clutter_pick_context_ref", type_id = "clutter_pick_context_get_type ()", unref_function = "clutter_pick_context_unref")]
+	[Compact]
+	public class PickContext {
+		public void destroy ();
+		public unowned Clutter.PickContext @ref ();
+		public void unref ();
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_pipeline_node_get_type ()")]
 	[Version (since = "1.10")]
 	public class PipelineNode : Clutter.PaintNode {
 		[CCode (has_construct_function = false)]
 		protected PipelineNode ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_point_get_type ()")]
-	[Compact]
-	[Version (since = "1.12")]
-	public class Point {
-		public float x;
-		public float y;
-		public static Clutter.Point alloc ();
-		public Clutter.Point copy ();
-		public float distance (Clutter.Point b, out float x_distance, out float y_distance);
-		public bool equals (Clutter.Point b);
-		public void free ();
-		public unowned Clutter.Point init (float x, float y);
-		public static unowned Clutter.Point zero ();
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_property_transition_get_type ()")]
 	[Version (since = "1.10")]
 	public class PropertyTransition : Clutter.Transition, Clutter.Scriptable {
 		[CCode (has_construct_function = false, type = "ClutterTransition*")]
 		public PropertyTransition (string? property_name);
+		[CCode (has_construct_function = false, type = "ClutterTransition*")]
+		public PropertyTransition.for_actor (Clutter.Actor actor, string? property_name);
 		public unowned string get_property_name ();
-		public void set_property_name (string? property_name);
-		public string property_name { get; set; }
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_rect_get_type ()")]
-	[Compact]
-	[Version (since = "1.12")]
-	public class Rect {
-		public weak Clutter.Point origin;
-		public weak Clutter.Size size;
-		public static Clutter.Rect alloc ();
-		public void clamp_to_pixel ();
-		public bool contains_point (Clutter.Point point);
-		public bool contains_rect (Clutter.Rect b);
-		public Clutter.Rect copy ();
-		public bool equals (Clutter.Rect b);
-		public void free ();
-		public void get_center (Clutter.Point center);
-		public float get_height ();
-		public float get_width ();
-		public float get_x ();
-		public float get_y ();
-		public unowned Clutter.Rect init (float x, float y, float width, float height);
-		public void inset (float d_x, float d_y);
-		public bool intersection (Clutter.Rect b, Clutter.Rect? res);
-		public Clutter.Rect normalize ();
-		public void offset (float d_x, float d_y);
-		public void scale (float s_x, float s_y);
-		public void union (Clutter.Rect b, Clutter.Rect res);
-		public static unowned Clutter.Rect zero ();
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_rectangle_get_type ()")]
-	[Version (since = "0.2")]
-	public class Rectangle : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public Rectangle ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
-		public Clutter.Color get_border_color ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
-		public uint get_border_width ();
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public Clutter.Color get_color ();
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void set_border_color (Clutter.Color color);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
-		public void set_border_width (uint width);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void set_color (Clutter.Color color);
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public Rectangle.with_color (Clutter.Color color);
-		public Clutter.Color border_color { get; set; }
-		public uint border_width { get; set; }
-		public Clutter.Color color { get; set; }
-		[NoAccessorMethod]
-		public bool has_border { get; set; }
+		public void set_property_name (string? property_name);
+		public string property_name { get; set; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_root_node_get_type ()")]
 	public class RootNode : Clutter.PaintNode {
@@ -6880,15 +6390,11 @@ namespace Clutter {
 		public Script ();
 		[Version (since = "0.8")]
 		public void add_search_paths ([CCode (array_length_cname = "n_paths", array_length_pos = 1.1, array_length_type = "gsize")] string[] paths);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.8")]
-		public void add_states (string? name, Clutter.State state);
 		public void connect_signals (void* user_data);
 		public void connect_signals_full (Clutter.ScriptConnectFunc func);
 		public void ensure_objects ();
 		public unowned GLib.Object get_object (string name);
 		public int get_objects (...);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.8")]
-		public unowned Clutter.State get_states (string? name);
 		[Version (since = "1.10")]
 		public unowned string get_translation_domain ();
 		public virtual GLib.Type get_type_from_name (string type_name);
@@ -6916,8 +6422,8 @@ namespace Clutter {
 		[CCode (has_construct_function = false, type = "ClutterActor*")]
 		public ScrollActor ();
 		public Clutter.ScrollMode get_scroll_mode ();
-		public void scroll_to_point (Clutter.Point point);
-		public void scroll_to_rect (Clutter.Rect rect);
+		public void scroll_to_point (Graphene.Point point);
+		public void scroll_to_rect (Graphene.Rect rect);
 		public void set_scroll_mode (Clutter.ScrollMode mode);
 		public Clutter.ScrollMode scroll_mode { get; set; }
 	}
@@ -6939,6 +6445,47 @@ namespace Clutter {
 		public float x;
 		public float y;
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_seat_get_type ()")]
+	public abstract class Seat : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected Seat ();
+		[NoWrapper]
+		public virtual void apply_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
+		public virtual void bell_notify ();
+		public virtual void compress_motion (Clutter.Event event, Clutter.Event to_discard);
+		[NoWrapper]
+		public virtual void copy_event_data (Clutter.Event src, Clutter.Event dest);
+		public virtual Clutter.VirtualInputDevice create_virtual_device (Clutter.InputDeviceType device_type);
+		public void ensure_a11y_state ();
+		[NoWrapper]
+		public virtual void free_event_data (Clutter.Event event);
+		public void get_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
+		public virtual unowned Clutter.InputDevice get_keyboard ();
+		public virtual unowned Clutter.Keymap get_keymap ();
+		public virtual unowned Clutter.InputDevice get_pointer ();
+		public void get_pointer_a11y_settings (Clutter.PointerA11ySettings settings);
+		public bool get_touch_mode ();
+		public void inhibit_unfocus ();
+		public bool is_unfocus_inhibited ();
+		public GLib.List<weak Clutter.InputDevice> list_devices ();
+		public void set_kbd_a11y_settings (Clutter.KbdA11ySettings settings);
+		public void set_pointer_a11y_dwell_click_type (Clutter.PointerA11yDwellClickType click_type);
+		public void set_pointer_a11y_settings (Clutter.PointerA11ySettings settings);
+		public void uninhibit_unfocus ();
+		public virtual void warp_pointer (int x, int y);
+		[NoAccessorMethod]
+		public Clutter.Backend backend { owned get; construct; }
+		public bool touch_mode { get; }
+		public signal void device_added (Clutter.InputDevice object);
+		public signal void device_removed (Clutter.InputDevice object);
+		public signal void is_unfocus_inhibited_changed ();
+		public signal void kbd_a11y_flags_changed (uint settings_flags, uint changed_mask);
+		public signal void kbd_a11y_mods_state_changed (uint latched_mask, uint locked_mask);
+		public signal void ptr_a11y_dwell_click_type_changed (Clutter.PointerA11yDwellClickType click_type);
+		public signal void ptr_a11y_timeout_started (Clutter.InputDevice device, Clutter.PointerA11yTimeoutType timeout_type, uint delay);
+		public signal void ptr_a11y_timeout_stopped (Clutter.InputDevice device, Clutter.PointerA11yTimeoutType timeout_type, bool clicked);
+		public signal void tool_changed (Clutter.InputDevice object, Clutter.InputDeviceTool p0);
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_settings_get_type ()")]
 	[Version (since = "1.4")]
 	public class Settings : GLib.Object {
@@ -7011,18 +6558,6 @@ namespace Clutter {
 		[CCode (has_construct_function = false)]
 		protected ShaderMatrix ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_size_get_type ()")]
-	[Compact]
-	[Version (since = "1.12")]
-	public class Size {
-		public float height;
-		public float width;
-		public static Clutter.Size alloc ();
-		public Clutter.Size copy ();
-		public bool equals (Clutter.Size b);
-		public void free ();
-		public unowned Clutter.Size init (float width, float height);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_snap_constraint_get_type ()")]
 	[Version (since = "1.6")]
 	public class SnapConstraint : Clutter.Constraint {
@@ -7043,135 +6578,66 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_stage_get_type ()")]
 	[Version (since = "0.2")]
-	public class Stage : Clutter.Group, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
+	public class Stage : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
 		[CCode (has_construct_function = false, type = "ClutterActor*")]
 		[Version (since = "0.8")]
 		public Stage ();
-		public bool capture (bool paint, Cairo.RectangleInt rect, Clutter.Capture captures, int n_captures);
 		public void capture_into (bool paint, Cairo.RectangleInt rect, uint8 data);
+		public void clear_stage_views ();
 		[CCode (cname = "clutter_stage_event")]
 		[Version (since = "0.4")]
 		public bool emit_event (Clutter.Event event);
-		[Version (deprecated = true, since = "0.8")]
-		public void ensure_current ();
-		[Version (since = "1.0")]
-		public void ensure_redraw ();
 		[Version (since = "1.0")]
 		public void ensure_viewport ();
-		public void freeze_updates ();
-		[Version (since = "1.6")]
-		public bool get_accept_focus ();
-		public unowned Clutter.Actor get_actor_at_pos (Clutter.PickMode pick_mode, int x, int y);
+		public unowned Clutter.Actor get_actor_at_pos (Clutter.PickMode pick_mode, float x, float y);
 		public bool get_capture_final_size (Cairo.RectangleInt rect, int width, int height, float scale);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public Clutter.Color get_color ();
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public static unowned Clutter.Stage get_default ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public Clutter.Fog get_fog ();
 		public int64 get_frame_counter ();
-		[Version (since = "1.0")]
-		public bool get_fullscreen ();
 		[Version (since = "0.6")]
 		public unowned Clutter.Actor get_key_focus ();
 		[Version (since = "1.2")]
 		public void get_minimum_size (out uint width, out uint height);
 		[Version (since = "1.8")]
 		public bool get_motion_events_enabled ();
-		[Version (since = "1.4")]
-		public bool get_no_clear_hint ();
 		public Clutter.Perspective get_perspective ();
-		[Version (since = "1.8")]
-		public Cairo.RectangleInt get_redraw_clip_bounds ();
 		[Version (since = "1.0")]
 		public bool get_throttle_motion_events ();
 		[Version (since = "0.4")]
 		public unowned string get_title ();
-		[Version (since = "1.2")]
 		public bool get_use_alpha ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public bool get_use_fog ();
-		[Version (since = "0.4")]
-		public bool get_user_resizable ();
-		[Version (since = "0.4")]
-		public void hide_cursor ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
-		public bool is_default ();
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
-		public void queue_redraw ();
+		public bool paint_to_buffer (Cairo.RectangleInt rect, float scale, uint8 data, int stride, Cogl.PixelFormat format, Clutter.PaintFlag paint_flags) throws GLib.Error;
+		public void paint_to_framebuffer (Cogl.Framebuffer framebuffer, Cairo.RectangleInt rect, float scale, Clutter.PaintFlag paint_flags);
 		[CCode (array_length = false)]
 		public uint8[] read_pixels (int x, int y, int width = -1, int height = -1);
-		[CCode (cname = "clutter_redraw")]
-		public void redraw ();
-		[Version (since = "1.6")]
-		public void set_accept_focus (bool accept_focus);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void set_color (Clutter.Color color);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public void set_fog (Clutter.Fog fog);
-		[Version (since = "1.0")]
-		public void set_fullscreen (bool fullscreen);
+		public void schedule_update ();
 		[Version (since = "0.6")]
 		public void set_key_focus (Clutter.Actor? actor);
 		[Version (since = "1.2")]
 		public void set_minimum_size (uint width, uint height);
 		[Version (since = "1.8")]
 		public void set_motion_events_enabled (bool enabled);
-		[Version (since = "1.4")]
-		public void set_no_clear_hint (bool no_clear);
-		public void set_perspective (Clutter.Perspective perspective);
 		[Version (since = "1.0")]
 		public void set_throttle_motion_events (bool throttle);
 		[Version (since = "0.4")]
 		public void set_title (string title);
-		[Version (since = "1.2")]
 		public void set_use_alpha (bool use_alpha);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public void set_use_fog (bool fog);
-		[Version (since = "0.4")]
-		public void set_user_resizable (bool resizable);
-		public void show_cursor ();
-		public void thaw_updates ();
-		public void update_resource_scales ();
-		[Version (since = "1.6")]
-		public bool accept_focus { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public Clutter.Color color { get; set; }
-		[NoAccessorMethod]
-		public bool cursor_visible { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public Clutter.Fog fog { get; set; }
-		[NoAccessorMethod]
-		public bool fullscreen_set { get; }
 		[Version (since = "1.2")]
 		public Clutter.Actor key_focus { get; set; }
-		[Version (since = "1.4")]
-		public bool no_clear_hint { get; set; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public bool offscreen { get; set; }
 		[Version (since = "0.8")]
-		public Clutter.Perspective perspective { get; set; }
+		public Clutter.Perspective perspective { get; }
 		[Version (since = "0.4")]
 		public string title { get; set; }
-		[Version (since = "1.2")]
-		public bool use_alpha { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-		public bool use_fog { get; set; }
-		[Version (since = "0.4")]
-		public bool user_resizable { get; set; }
 		[Version (since = "0.6")]
 		public virtual signal void activate ();
 		[Version (since = "1.20")]
-		public signal void after_paint ();
+		public signal void after_paint (Clutter.StageView view);
+		public signal void after_update (Clutter.StageView view);
+		public signal void before_paint (Clutter.StageView view);
+		public signal void before_update (Clutter.StageView view);
 		[Version (since = "0.6")]
 		public virtual signal void deactivate ();
 		[Version (since = "1.2")]
 		public virtual signal bool delete_event (Clutter.Event event);
-		[Version (since = "0.6")]
-		public virtual signal void fullscreen ();
-		[Version (since = "0.6")]
-		public virtual signal void unfullscreen ();
+		public virtual signal void paint_view (Clutter.StageView view, Cairo.Region redraw_clip);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_stage_manager_get_type ()")]
 	[Version (since = "1.0")]
@@ -7185,8 +6651,6 @@ namespace Clutter {
 		[Version (since = "0.8")]
 		public GLib.SList<weak Clutter.Stage> list_stages ();
 		public unowned GLib.SList<Clutter.Stage> peek_stages ();
-		[Version (deprecated = true, deprecated_since = "1.2", since = "0.8")]
-		public void set_default_stage (Clutter.Stage stage);
 		[Version (since = "0.8")]
 		public Clutter.Stage default_stage { get; }
 		[Version (since = "0.8")]
@@ -7206,63 +6670,33 @@ namespace Clutter {
 		public uint32 time;
 		public Clutter.EventType type;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_state_get_type ()")]
-	[Version (since = "1.4")]
-	public class State : GLib.Object, Clutter.Scriptable {
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_stage_view_get_type ()")]
+	public class StageView : GLib.Object {
 		[CCode (has_construct_function = false)]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public State ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public uint get_duration (string? source_state_name, string? target_state_name);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public GLib.List<weak Clutter.StateKey> get_keys (string? source_state_name, string? target_state_name, GLib.Object? object, string? property_name);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned string get_state ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public GLib.List<weak string> get_states ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned Clutter.Timeline get_timeline ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void remove_key (string? source_state_name, string? target_state_name, GLib.Object? object, string? property_name);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_duration (string? source_state_name, string? target_state_name, uint duration);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned Clutter.State set_key (string? source_state_name, string target_state_name, GLib.Object object, string property_name, uint mode, GLib.Value value, double pre_delay, double post_delay);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned Clutter.Timeline set_state (string target_state_name);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned Clutter.Timeline warp_to_state (string target_state_name);
+		protected StageView ();
+		public void assign_next_scanout (Cogl.Scanout scanout);
+		public unowned Cogl.Framebuffer get_framebuffer ();
+		public void get_layout (Cairo.RectangleInt rect);
+		public virtual void get_offscreen_transformation_matrix (Cogl.Matrix matrix);
+		public unowned Cogl.Framebuffer get_onscreen ();
+		public float get_scale ();
+		public void invalidate_offscreen_blit_pipeline ();
+		[NoWrapper]
+		public virtual void setup_offscreen_blit_pipeline (Cogl.Pipeline pipeline);
+		[NoWrapper]
+		public virtual void transform_rect_to_onscreen (Cairo.RectangleInt src_rect, int dst_width, int dst_height, Cairo.RectangleInt dst_rect);
 		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public uint duration { get; set; }
+		public Cairo.RectangleInt layout { owned get; set construct; }
 		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public string state { owned get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public virtual signal void completed ();
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_state_key_get_type ()")]
-	[Compact]
-	[Version (since = "1.4")]
-	public class StateKey {
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public ulong get_mode ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned GLib.Object get_object ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public double get_post_delay ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public double get_pre_delay ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned string get_property_name ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public GLib.Type get_property_type ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned string get_source_state_name ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public unowned string get_target_state_name ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public bool get_value (GLib.Value value);
+		public string name { owned get; construct; }
+		[NoAccessorMethod]
+		public float refresh_rate { get; set construct; }
+		[NoAccessorMethod]
+		public float scale { get; set construct; }
+		[NoAccessorMethod]
+		public Clutter.Stage stage { owned get; construct; }
+		[NoAccessorMethod]
+		public bool use_shadowfb { get; construct; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_swipe_action_get_type ()")]
 	[Version (since = "1.8")]
@@ -7274,53 +6708,6 @@ namespace Clutter {
 		[Version (since = "1.14")]
 		public virtual signal bool swipe (Clutter.Actor actor, Clutter.SwipeDirection direction);
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_table_layout_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.18", since = "1.4")]
-	public class TableLayout : Clutter.LayoutManager {
-		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
-		public TableLayout ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void get_alignment (Clutter.Actor actor, out Clutter.TableAlignment x_align, out Clutter.TableAlignment y_align);
-		public int get_column_count ();
-		public uint get_column_spacing ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public uint get_easing_duration ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public ulong get_easing_mode ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void get_expand (Clutter.Actor actor, out bool x_expand, out bool y_expand);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void get_fill (Clutter.Actor actor, out bool x_fill, out bool y_fill);
-		public int get_row_count ();
-		public uint get_row_spacing ();
-		public void get_span (Clutter.Actor actor, out int column_span, out int row_span);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public bool get_use_animations ();
-		public void pack (Clutter.Actor actor, int column, int row);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_alignment (Clutter.Actor actor, Clutter.TableAlignment x_align, Clutter.TableAlignment y_align);
-		public void set_column_spacing (uint spacing);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_easing_duration (uint msecs);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_easing_mode (ulong mode);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_expand (Clutter.Actor actor, bool x_expand, bool y_expand);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_fill (Clutter.Actor actor, bool x_fill, bool y_fill);
-		public void set_row_spacing (uint spacing);
-		public void set_span (Clutter.Actor actor, int column_span, int row_span);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_use_animations (bool animate);
-		public uint column_spacing { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public uint easing_duration { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public ulong easing_mode { get; set; }
-		public uint row_spacing { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public bool use_animations { get; set; }
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_tap_action_get_type ()")]
 	[Version (since = "1.14")]
 	public class TapAction : Clutter.GestureAction {
@@ -7348,7 +6735,7 @@ namespace Clutter {
 		public Clutter.Color get_cursor_color ();
 		public int get_cursor_position ();
 		[Version (since = "1.16")]
-		public void get_cursor_rect (out unowned Clutter.Rect rect);
+		public void get_cursor_rect (out unowned Graphene.Rect rect);
 		public uint get_cursor_size ();
 		public bool get_cursor_visible ();
 		public bool get_editable ();
@@ -7467,7 +6854,7 @@ namespace Clutter {
 		[Version (since = "1.16")]
 		public virtual signal void cursor_changed ();
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public virtual signal void cursor_event (Clutter.Geometry geometry);
+		public virtual signal void cursor_event (Graphene.Rect rect);
 		[HasEmitter]
 		[Version (since = "1.2")]
 		public signal void delete_text (int start_pos, int end_pos);
@@ -7505,94 +6892,6 @@ namespace Clutter {
 		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
 		public TextNode (Pango.Layout? layout, Clutter.Color? color);
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_texture_get_type ()")]
-	[Version (since = "0.2")]
-	public class Texture : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public Texture ();
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
-		public Texture.from_actor (Clutter.Actor actor);
-		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public Texture.from_file (string filename) throws Clutter.TextureError;
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public void get_base_size (out int width, out int height);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public unowned Cogl.Handle get_cogl_material ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public unowned Cogl.Handle get_cogl_texture ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public Clutter.TextureQuality get_filter_quality ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool get_keep_aspect_ratio ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool get_load_async ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool get_load_data_async ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public int get_max_tile_waste ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public bool get_pick_with_alpha ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void get_repeat (out bool repeat_x, out bool repeat_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool get_sync_size ();
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
-		public bool set_area_from_rgb_data ([CCode (array_length = false)] uint8[] data, bool has_alpha, int x, int y, int width, int height, int rowstride, int bpp, Clutter.TextureFlags flags) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public void set_cogl_material (Cogl.Handle cogl_material);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public void set_cogl_texture (Cogl.Handle cogl_tex);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public void set_filter_quality (Clutter.TextureQuality filter_quality);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
-		public bool set_from_file (string filename) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.12", since = "0.4")]
-		public bool set_from_rgb_data ([CCode (array_length = false)] uint8[] data, bool has_alpha, int width, int height, int rowstride, int bpp, Clutter.TextureFlags flags) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public bool set_from_yuv_data ([CCode (array_length = false)] uint8[] data, int width, int height, Clutter.TextureFlags flags) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_keep_aspect_ratio (bool keep_aspect);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_load_async (bool load_async);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_load_data_async (bool load_async);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
-		public void set_pick_with_alpha (bool pick_with_alpha);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_repeat (bool repeat_x, bool repeat_y);
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public void set_sync_size (bool sync_size);
-		public Cogl.Material cogl_material { get; set; }
-		public Cogl.Texture cogl_texture { get; set; }
-		[NoAccessorMethod]
-		public bool disable_slicing { get; construct; }
-		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public string filename { owned get; set; }
-		public Clutter.TextureQuality filter_quality { get; set construct; }
-		public bool keep_aspect_ratio { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool load_async { set; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public bool load_data_async { set; }
-		public bool pick_with_alpha { get; set; }
-		[NoAccessorMethod]
-		public bool repeat_x { get; set; }
-		[NoAccessorMethod]
-		public bool repeat_y { get; set; }
-		public bool sync_size { get; set; }
-		[NoAccessorMethod]
-		public int tile_waste { get; }
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
-		public virtual signal void load_finished (GLib.Error error);
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public virtual signal void pixbuf_change ();
-		[Version (deprecated = true, deprecated_since = "1.12")]
-		public virtual signal void size_change (int width, int height);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_texture_node_get_type ()")]
 	[Version (since = "1.10")]
 	public class TextureNode : Clutter.PipelineNode {
@@ -7604,7 +6903,7 @@ namespace Clutter {
 	public class Timeline : GLib.Object, Clutter.Scriptable {
 		[CCode (has_construct_function = false)]
 		[Version (since = "0.6")]
-		public Timeline (uint msecs);
+		public Timeline (uint duration_ms);
 		[Version (since = "1.14")]
 		public void add_marker (string marker_name, double progress);
 		[Version (since = "0.8")]
@@ -7612,12 +6911,15 @@ namespace Clutter {
 		public void advance (uint msecs);
 		[Version (since = "0.8")]
 		public void advance_to_marker (string marker_name);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public Clutter.Timeline clone ();
+		[CCode (has_construct_function = false)]
+		public Timeline.for_actor (Clutter.Actor actor, uint duration_ms);
+		[CCode (has_construct_function = false)]
+		public Timeline.for_frame_clock (Clutter.FrameClock frame_clock, uint duration_ms);
+		public unowned Clutter.Actor get_actor ();
 		[Version (since = "1.6")]
 		public bool get_auto_reverse ();
 		[Version (since = "1.12")]
-		public bool get_cubic_bezier_progress (Clutter.Point c_1, Clutter.Point c_2);
+		public bool get_cubic_bezier_progress (Graphene.Point c_1, Graphene.Point c_2);
 		[Version (since = "1.10")]
 		public int get_current_repeat ();
 		[Version (since = "0.4")]
@@ -7631,8 +6933,6 @@ namespace Clutter {
 		[Version (since = "1.10")]
 		public int64 get_duration_hint ();
 		public uint get_elapsed_time ();
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public bool get_loop ();
 		[Version (since = "0.6")]
 		public double get_progress ();
 		[Version (since = "1.10")]
@@ -7651,18 +6951,18 @@ namespace Clutter {
 		[Version (since = "0.8")]
 		public void remove_marker (string marker_name);
 		public void rewind ();
+		public void set_actor (Clutter.Actor? actor);
 		[Version (since = "1.6")]
 		public void set_auto_reverse (bool reverse);
 		[Version (since = "1.12")]
-		public void set_cubic_bezier_progress (Clutter.Point c_1, Clutter.Point c_2);
+		public void set_cubic_bezier_progress (Graphene.Point c_1, Graphene.Point c_2);
 		[Version (since = "0.4")]
 		public void set_delay (uint msecs);
 		[Version (since = "0.6")]
 		public void set_direction (Clutter.TimelineDirection direction);
 		[Version (since = "0.6")]
 		public void set_duration (uint msecs);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void set_loop (bool loop);
+		public void set_frame_clock (Clutter.FrameClock frame_clock);
 		[Version (since = "1.10")]
 		public void set_progress_func (owned Clutter.TimelineProgressFunc? func);
 		[Version (since = "1.10")]
@@ -7674,6 +6974,7 @@ namespace Clutter {
 		public void skip (uint msecs);
 		public void start ();
 		public void stop ();
+		public Clutter.Actor actor { get; set construct; }
 		[Version (since = "1.6")]
 		public bool auto_reverse { get; set; }
 		[Version (since = "0.4")]
@@ -7682,8 +6983,8 @@ namespace Clutter {
 		public Clutter.TimelineDirection direction { get; set; }
 		[Version (since = "0.6")]
 		public uint duration { get; set; }
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public bool loop { get; set; }
+		[NoAccessorMethod]
+		public Clutter.FrameClock frame_clock { owned get; set construct; }
 		[Version (since = "1.10")]
 		public Clutter.AnimationMode progress_mode { get; set; }
 		[Version (since = "1.10")]
@@ -7697,12 +6998,6 @@ namespace Clutter {
 		[Version (since = "1.12")]
 		public virtual signal void stopped (bool is_finished);
 	}
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Compact]
-	public class TimeoutPool {
-		[CCode (has_construct_function = false)]
-		public TimeoutPool (int priority);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
 	[Version (since = "1.10")]
@@ -7753,6 +7048,11 @@ namespace Clutter {
 		public float x;
 		public float y;
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_transform_node_get_type ()")]
+	public class TransformNode : Clutter.PaintNode {
+		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+		public TransformNode (Cogl.Matrix projection);
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_transition_get_type ()")]
 	[Version (since = "1.10")]
 	public abstract class Transition : Clutter.Timeline, Clutter.Scriptable {
@@ -7792,7 +7092,6 @@ namespace Clutter {
 		[CCode (has_construct_function = false)]
 		protected VirtualInputDevice ();
 		public int get_device_type ();
-		public unowned Clutter.DeviceManager get_manager ();
 		public virtual void notify_absolute_motion (uint64 time_us, double x, double y);
 		public virtual void notify_button (uint64 time_us, uint32 button, Clutter.ButtonState button_state);
 		public virtual void notify_discrete_scroll (uint64 time_us, Clutter.ScrollDirection direction, Clutter.ScrollSource scroll_source);
@@ -7803,28 +7102,27 @@ namespace Clutter {
 		public virtual void notify_touch_down (uint64 time_us, int slot, double x, double y);
 		public virtual void notify_touch_motion (uint64 time_us, int slot, double x, double y);
 		public virtual void notify_touch_up (uint64 time_us, int slot);
-		[NoAccessorMethod]
-		public Clutter.DeviceManager device_manager { owned get; construct; }
 		public Clutter.InputDeviceType device_type { get; construct; }
+		[NoAccessorMethod]
+		public Clutter.Seat seat { owned get; construct; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_zoom_action_get_type ()")]
 	[Version (since = "1.12")]
 	public class ZoomAction : Clutter.GestureAction {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public ZoomAction ();
-		public void get_focal_point (Clutter.Point point);
-		public void get_transformed_focal_point (Clutter.Point point);
+		public void get_focal_point (Graphene.Point point);
+		public void get_transformed_focal_point (Graphene.Point point);
 		public Clutter.ZoomAxis get_zoom_axis ();
 		public void set_zoom_axis (Clutter.ZoomAxis axis);
 		public Clutter.ZoomAxis zoom_axis { get; set; }
-		public virtual signal bool zoom (Clutter.Actor actor, Clutter.Point focal_point, double factor);
+		public virtual signal bool zoom (Clutter.Actor actor, Graphene.Point focal_point, double factor);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_cname = "ClutterAnimatableInterface", type_id = "clutter_animatable_get_type ()")]
 	public interface Animatable : GLib.Object {
-		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
-		public abstract bool animate_property (Clutter.Animation animation, string property_name, GLib.Value initial_value, GLib.Value final_value, double progress, GLib.Value value);
 		[Version (since = "1.4")]
 		public abstract unowned GLib.ParamSpec find_property (string property_name);
+		public abstract unowned Clutter.Actor get_actor ();
 		[Version (since = "1.4")]
 		public abstract void get_initial_state (string property_name, GLib.Value value);
 		[Version (since = "1.8")]
@@ -7835,12 +7133,9 @@ namespace Clutter {
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_container_get_type ()")]
 	[Version (since = "0.4")]
 	public interface Container : GLib.Object {
-		public void add (params Clutter.Actor[] actors);
 		[CCode (vfunc_name = "add")]
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
 		public abstract void add_actor (Clutter.Actor actor);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public void add_valist (Clutter.Actor first_actor, va_list var_args);
 		[Version (since = "0.8")]
 		public void child_get (Clutter.Actor actor, ...);
 		[Version (since = "0.8")]
@@ -7860,18 +7155,10 @@ namespace Clutter {
 		public virtual void destroy_child_meta (Clutter.Actor actor);
 		[Version (since = "0.6")]
 		public unowned Clutter.Actor find_child_by_name (string child_name);
-		[CCode (cname = "clutter_container_class_find_child_property")]
-		public class unowned GLib.ParamSpec find_child_property (string property_name);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public abstract void @foreach (Clutter.Callback callback);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-		public virtual void foreach_with_internals (Clutter.Callback callback);
 		[Version (since = "0.8")]
 		public virtual unowned Clutter.ChildMeta get_child_meta (Clutter.Actor actor);
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
 		public GLib.List<weak Clutter.Actor> get_children ();
-		[CCode (cname = "clutter_container_class_list_child_properties")]
-		public class unowned GLib.ParamSpec[] list_child_properties ();
 		[CCode (vfunc_name = "lower")]
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
 		public virtual void lower_child (Clutter.Actor actor, Clutter.Actor? sibling = null);
@@ -7883,8 +7170,6 @@ namespace Clutter {
 		[CCode (vfunc_name = "remove")]
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
 		public abstract void remove_actor (Clutter.Actor actor);
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-		public void remove_valist (Clutter.Actor first_actor, va_list var_args);
 		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
 		public abstract void sort_depth_order ();
 		public virtual signal void actor_added (Clutter.Actor actor);
@@ -7901,7 +7186,7 @@ namespace Clutter {
 		public abstract void invalidate ();
 		public abstract void invalidate_size ();
 		[NoWrapper]
-		public abstract void paint_content (Clutter.Actor actor, Clutter.PaintNode node);
+		public abstract void paint_content (Clutter.Actor actor, Clutter.PaintNode node, Clutter.PaintContext paint_context);
 		[Version (since = "1.10")]
 		public virtual signal void attached (Clutter.Actor actor);
 		[Version (since = "1.10")]
@@ -7915,47 +7200,16 @@ namespace Clutter {
 		public abstract void set_custom_property (Clutter.Script script, string name, GLib.Value value);
 		public abstract void set_id (string id_);
 	}
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	public interface StageWindow : GLib.Object {
-		[NoWrapper]
-		public abstract void add_redraw_clip (Clutter.Geometry stage_rectangle);
-		[NoWrapper]
-		public abstract void get_geometry (Clutter.Geometry geometry);
-		[NoWrapper]
-		public abstract int get_pending_swaps ();
-		[NoWrapper]
-		public abstract unowned Clutter.Actor get_wrapper ();
-		[NoWrapper]
-		public abstract bool has_redraw_clips ();
-		[NoWrapper]
-		public abstract void hide ();
-		[NoWrapper]
-		public abstract bool ignoring_redraw_clips ();
-		[NoWrapper]
-		public abstract bool realize ();
-		[NoWrapper]
-		public abstract void resize (int width, int height);
-		[NoWrapper]
-		public abstract void set_cursor_visible (bool cursor_visible);
-		[NoWrapper]
-		public abstract void set_fullscreen (bool is_fullscreen);
-		[NoWrapper]
-		public abstract void set_title (string title);
-		[NoWrapper]
-		public abstract void set_user_resizable (bool is_resizable);
-		[NoWrapper]
-		public abstract void show (bool do_raise);
-		[NoWrapper]
-		public abstract void unrealize ();
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "CLUTTER_TYPE_ACTOR_BOX")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_actor_box_get_type ()")]
 	public struct ActorBox {
 		public float x1;
 		public float y1;
 		public float x2;
 		public float y2;
+		[Version (since = "1.12")]
+		public static Clutter.ActorBox? alloc ();
 		[Version (since = "1.2")]
-		public void clamp_to_pixel ();
+		public static void clamp_to_pixel (ref Clutter.ActorBox box);
 		[Version (since = "1.0")]
 		public bool contains (float x, float y);
 		[Version (since = "1.0")]
@@ -7964,8 +7218,6 @@ namespace Clutter {
 		public bool equal (Clutter.ActorBox box_b);
 		[Version (since = "1.0")]
 		public void free ();
-		[CCode (cname = "clutter_actor_box_from_vertices")]
-		public ActorBox.from_vertices (Clutter.Vertex[] verts);
 		[Version (since = "1.0")]
 		public float get_area ();
 		[Version (since = "1.0")]
@@ -7986,6 +7238,7 @@ namespace Clutter {
 		public void init_rect (float x, float y, float width, float height);
 		[Version (since = "1.2")]
 		public Clutter.ActorBox interpolate (Clutter.ActorBox final, double progress);
+		public bool is_initialized ();
 		[Version (since = "1.6")]
 		public void scale (float scale);
 		[Version (since = "1.6")]
@@ -8011,7 +7264,7 @@ namespace Clutter {
 		public weak Cairo.Surface image;
 		public Cairo.RectangleInt rect;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "CLUTTER_TYPE_COLOR")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_color_get_type ()")]
 	public struct Color {
 		public uint8 red;
 		public uint8 green;
@@ -8027,12 +7280,11 @@ namespace Clutter {
 		public bool equal (Clutter.Color v2);
 		[Version (since = "0.2")]
 		public void free ();
-		[CCode (cname = "clutter_color_from_hls")]
-		public Color.from_hls (float hue, float luminance, float saturation);
-		[CCode (cname = "clutter_color_from_pixel")]
-		public Color.from_pixel (uint32 pixel);
-		[CCode (cname = "clutter_color_from_string")]
-		public Color.from_string (string str);
+		public static void from_hls (out Clutter.Color color, float hue, float luminance, float saturation);
+		public static void from_pixel (out Clutter.Color color, uint32 pixel);
+		[Version (since = "1.0")]
+		public static bool from_string (out Clutter.Color color, string str);
+		[Version (since = "1.6")]
 		public static unowned Clutter.Color? get_static (Clutter.StaticColor color);
 		[Version (since = "1.0")]
 		public uint hash ();
@@ -8041,8 +7293,6 @@ namespace Clutter {
 		[Version (since = "1.6")]
 		public Clutter.Color interpolate (Clutter.Color final, double progress);
 		public Clutter.Color lighten ();
-		[CCode (cname = "clutter_color_from_string")]
-		public bool parse_string (string str);
 		public Clutter.Color shade (double factor);
 		public Clutter.Color subtract (Clutter.Color b);
 		public void to_hls (out float hue, out float luminance, out float saturation);
@@ -8050,23 +7300,10 @@ namespace Clutter {
 		[Version (since = "0.2")]
 		public string to_string ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_fog_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-	public struct Fog {
-		public float z_near;
-		public float z_far;
-	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_geometry_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public struct Geometry {
-		public int x;
-		public int y;
-		public uint width;
-		public uint height;
-		[Version (since = "1.4")]
-		public bool intersects (Clutter.Geometry geometry1);
-		[Version (since = "1.4")]
-		public Clutter.Geometry union (Clutter.Geometry geometry_b);
+	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
+	public struct FrameListenerIface {
+		public weak global::before_frame before_frame;
+		public weak global::frame frame;
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	public struct KbdA11ySettings {
@@ -8078,7 +7315,7 @@ namespace Clutter {
 		public int mousekeys_max_speed;
 		public int mousekeys_accel_time;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_knot_get_type ()")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_knot_get_type ()")]
 	[Version (since = "0.2")]
 	public struct Knot {
 		public int x;
@@ -8087,8 +7324,19 @@ namespace Clutter {
 		public bool equal (Clutter.Knot knot_b);
 		public void free ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h")]
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "COGL_TYPE_MATRIX")]
 	public struct Matrix : Cogl.Matrix {
+		[Version (since = "1.12")]
+		public static Clutter.Matrix? alloc ();
+		[Version (since = "1.12")]
+		public void free ();
+		public static GLib.Type get_type ();
+		[Version (since = "1.12")]
+		public unowned Clutter.Matrix? init_from_array ([CCode (array_length = false)] float values[16]);
+		[Version (since = "1.12")]
+		public unowned Clutter.Matrix? init_from_matrix (Clutter.Matrix b);
+		[Version (since = "1.12")]
+		public unowned Clutter.Matrix? init_identity ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	public struct PadButtonEvent {
@@ -8130,7 +7378,7 @@ namespace Clutter {
 		public double value;
 		public uint32 mode;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_path_node_get_type ()")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_path_node_get_type ()")]
 	[Version (since = "1.0")]
 	public struct PathNode {
 		public Clutter.PathNodeType type;
@@ -8140,7 +7388,7 @@ namespace Clutter {
 		public bool equal (Clutter.PathNode node_b);
 		public void free ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_perspective_get_type ()")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_perspective_get_type ()")]
 	[Version (since = "0.4")]
 	public struct Perspective {
 		public float fovy;
@@ -8149,6 +7397,19 @@ namespace Clutter {
 		public float z_far;
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
+	public struct PointerA11ySettings {
+		public Clutter.PointerA11yFlags controls;
+		public Clutter.PointerA11yDwellClickType dwell_click_type;
+		public Clutter.PointerA11yDwellMode dwell_mode;
+		public Clutter.PointerA11yDwellDirection dwell_gesture_single;
+		public Clutter.PointerA11yDwellDirection dwell_gesture_double;
+		public Clutter.PointerA11yDwellDirection dwell_gesture_drag;
+		public Clutter.PointerA11yDwellDirection dwell_gesture_secondary;
+		public int secondary_click_delay;
+		public int dwell_delay;
+		public int dwell_threshold;
+	}
+	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Version (since = "1.28")]
 	public struct ProximityEvent {
 		public Clutter.EventType type;
@@ -8158,47 +7419,16 @@ namespace Clutter {
 		public weak Clutter.Actor source;
 		public weak Clutter.InputDevice device;
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "CLUTTER_TYPE_UNITS")]
+	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_units_get_type ()")]
 	[Version (since = "1.0")]
 	public struct Units {
 		public Clutter.Units? copy ();
 		public void free ();
-		[CCode (cname = "clutter_units_from_cm")]
-		public Units.from_cm (float cm);
-		[CCode (cname = "clutter_units_from_em")]
-		public Units.from_em (float em);
-		[CCode (cname = "clutter_units_from_em_for_font")]
-		public Units.from_em_for_font (string font_name, float em);
-		[CCode (cname = "clutter_units_from_mm")]
-		public Units.from_mm (float mm);
-		[CCode (cname = "clutter_units_from_pixels")]
-		public Units.from_pixels (int px);
-		[CCode (cname = "clutter_units_from_pt")]
-		public Units.from_pt (float pt);
-		[CCode (cname = "clutter_units_from_string")]
-		public Units.from_string (string str);
 		public Clutter.UnitType get_unit_type ();
 		public float get_unit_value ();
 		public float to_pixels ();
 		public string to_string ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_vertex_get_type ()")]
-	[Version (since = "0.4")]
-	public struct Vertex {
-		public float x;
-		public float y;
-		public float z;
-		[Version (since = "1.12")]
-		public static Clutter.Vertex? alloc ();
-		[Version (since = "1.0")]
-		public Clutter.Vertex? copy ();
-		[Version (since = "1.0")]
-		public bool equal (Clutter.Vertex vertex_b);
-		[Version (since = "1.0")]
-		public void free ();
-		[Version (since = "1.10")]
-		public unowned Clutter.Vertex? init (float x, float y, float z);
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ACTOR_ALIGN_", type_id = "clutter_actor_align_get_type ()")]
 	[Version (since = "1.10")]
 	public enum ActorAlign {
@@ -8223,14 +7453,6 @@ namespace Clutter {
 		Y_AXIS,
 		BOTH
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_allocation_flags_get_type ()")]
-	[Flags]
-	[Version (since = "1.0")]
-	public enum AllocationFlags {
-		ALLOCATION_NONE,
-		ABSOLUTE_ORIGIN_CHANGED,
-		DELEGATE_LAYOUT
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_animation_mode_get_type ()")]
 	[Version (since = "1.0")]
 	public enum AnimationMode {
@@ -8336,6 +7558,27 @@ namespace Clutter {
 		Y_AXIS,
 		BOTH
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DEBUG_", type_id = "clutter_debug_flag_get_type ()")]
+	[Flags]
+	public enum DebugFlag {
+		MISC,
+		ACTOR,
+		TEXTURE,
+		EVENT,
+		PAINT,
+		PANGO,
+		BACKEND,
+		SCHEDULER,
+		SCRIPT,
+		SHADER,
+		MULTISTAGE,
+		ANIMATION,
+		LAYOUT,
+		PICK,
+		EVENTLOOP,
+		CLIPPING,
+		OOB_TRANSFORMS
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DRAG_", type_id = "clutter_drag_axis_get_type ()")]
 	[Version (since = "1.4")]
 	public enum DragAxis {
@@ -8343,11 +7586,24 @@ namespace Clutter {
 		X_AXIS,
 		Y_AXIS
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_EFFECT_PAINT_ACTOR_", type_id = "clutter_effect_paint_flags_get_type ()")]
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DEBUG_", type_id = "clutter_draw_debug_flag_get_type ()")]
+	[Flags]
+	public enum DrawDebugFlag {
+		DISABLE_SWAP_EVENTS,
+		DISABLE_CLIPPED_REDRAWS,
+		REDRAWS,
+		PAINT_VOLUMES,
+		DISABLE_CULLING,
+		DISABLE_OFFSCREEN_REDIRECT,
+		CONTINUOUS_REDRAW,
+		PAINT_DEFORM_TILES,
+		PAINT_DAMAGE_REGION
+	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_EFFECT_PAINT_", type_id = "clutter_effect_paint_flags_get_type ()")]
 	[Flags]
 	public enum EffectPaintFlags {
-		[CCode (cname = "CLUTTER_EFFECT_PAINT_ACTOR_DIRTY")]
-		ACTOR_DIRTY
+		ACTOR_DIRTY,
+		BYPASS_EFFECT
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_EVENT_", type_id = "clutter_event_flags_get_type ()")]
 	[Flags]
@@ -8392,21 +7648,12 @@ namespace Clutter {
 	[Flags]
 	[Version (since = "0.4")]
 	public enum FeatureFlags {
-		TEXTURE_NPOT,
-		SWAP_THROTTLE,
-		TEXTURE_YUV,
-		TEXTURE_READ_PIXELS,
 		STAGE_STATIC,
-		STAGE_USER_RESIZE,
 		STAGE_CURSOR,
 		SHADERS_GLSL,
 		OFFSCREEN,
 		STAGE_MULTIPLE,
-		SWAP_EVENTS;
-		[CCode (cname = "clutter_feature_available")]
-		public bool is_available ();
-		[CCode (cname = "clutter_feature_get_all")]
-		public static Clutter.FeatureFlags @get ();
+		SWAP_EVENTS
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_FLOW_", type_id = "clutter_flow_orientation_get_type ()")]
 	[Version (since = "1.2")]
@@ -8414,12 +7661,10 @@ namespace Clutter {
 		HORIZONTAL,
 		VERTICAL
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_FONT_", type_id = "clutter_font_flags_get_type ()")]
-	[Flags]
-	[Version (deprecated = true, deprecated_since = "1.22", since = "1.0")]
-	public enum FontFlags {
-		MIPMAPPING,
-		HINTING
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_FRAME_RESULT_", type_id = "clutter_frame_result_get_type ()")]
+	public enum FrameResult {
+		PENDING_PRESENTED,
+		IDLE
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_GESTURE_TRIGGER_EDGE_", type_id = "clutter_gesture_trigger_edge_get_type ()")]
 	[Version (since = "1.18")]
@@ -8634,7 +7879,8 @@ namespace Clutter {
 	[Version (since = "1.8")]
 	public enum OffscreenRedirect {
 		AUTOMATIC_FOR_OPACITY,
-		ALWAYS
+		ALWAYS,
+		ON_IDLE
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ORIENTATION_", type_id = "clutter_orientation_get_type ()")]
 	[Version (since = "1.12")]
@@ -8642,6 +7888,13 @@ namespace Clutter {
 		HORIZONTAL,
 		VERTICAL
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PAINT_FLAG_", type_id = "clutter_paint_flag_get_type ()")]
+	[Flags]
+	public enum PaintFlag {
+		NONE,
+		NO_CURSORS,
+		FORCE_CURSORS
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PAN_", type_id = "clutter_pan_axis_get_type ()")]
 	[Version (since = "1.12")]
 	public enum PanAxis {
@@ -8661,6 +7914,11 @@ namespace Clutter {
 		REL_LINE_TO,
 		REL_CURVE_TO
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DEBUG_NOP_", type_id = "clutter_pick_debug_flag_get_type ()")]
+	[Flags]
+	public enum PickDebugFlag {
+		PICKING
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PICK_", type_id = "clutter_pick_mode_get_type ()")]
 	[Version (since = "1.0")]
 	public enum PickMode {
@@ -8668,13 +7926,46 @@ namespace Clutter {
 		REACTIVE,
 		ALL
 	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_A11Y_DWELL_CLICK_TYPE_", type_id = "clutter_pointer_a11y_dwell_click_type_get_type ()")]
+	public enum PointerA11yDwellClickType {
+		NONE,
+		PRIMARY,
+		SECONDARY,
+		MIDDLE,
+		DOUBLE,
+		DRAG
+	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_A11Y_DWELL_DIRECTION_", type_id = "clutter_pointer_a11y_dwell_direction_get_type ()")]
+	public enum PointerA11yDwellDirection {
+		NONE,
+		LEFT,
+		RIGHT,
+		UP,
+		DOWN
+	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_A11Y_DWELL_MODE_", type_id = "clutter_pointer_a11y_dwell_mode_get_type ()")]
+	public enum PointerA11yDwellMode {
+		WINDOW,
+		GESTURE
+	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_A11Y_", type_id = "clutter_pointer_a11y_flags_get_type ()")]
+	[Flags]
+	public enum PointerA11yFlags {
+		SECONDARY_CLICK_ENABLED,
+		DWELL_ENABLED
+	}
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_A11Y_TIMEOUT_TYPE_", type_id = "clutter_pointer_a11y_timeout_type_get_type ()")]
+	public enum PointerA11yTimeoutType {
+		SECONDARY_CLICK,
+		DWELL,
+		GESTURE
+	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_REPAINT_FLAGS_", type_id = "clutter_repaint_flags_get_type ()")]
 	[Flags]
 	[Version (since = "1.10")]
 	public enum RepaintFlags {
 		PRE_PAINT,
-		POST_PAINT,
-		QUEUE_REDRAW_ON_ADD
+		POST_PAINT
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_REQUEST_", type_id = "clutter_request_mode_get_type ()")]
 	[Version (since = "0.8")]
@@ -8755,8 +8046,6 @@ namespace Clutter {
 	[Flags]
 	[Version (since = "0.4")]
 	public enum StageState {
-		FULLSCREEN,
-		OFFSCREEN,
 		ACTIVATED
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_COLOR_", type_id = "clutter_static_color_get_type ()")]
@@ -8823,13 +8112,6 @@ namespace Clutter {
 		LEFT,
 		RIGHT
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TABLE_ALIGNMENT_", type_id = "clutter_table_alignment_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.22", since = "1.4")]
-	public enum TableAlignment {
-		START,
-		CENTER,
-		END
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXT_DIRECTION_", type_id = "clutter_text_direction_get_type ()")]
 	[Version (since = "1.2")]
 	public enum TextDirection {
@@ -8905,28 +8187,16 @@ namespace Clutter {
 		VALUE;
 		public static GLib.Quark quark ();
 	}
-	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXTURE_ERROR_")]
-	[Version (since = "0.4")]
-	public errordomain TextureError {
-		OUT_OF_MEMORY,
-		NO_YUV,
-		BAD_FORMAT;
-		public static GLib.Quark quark ();
-	}
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
 	[Version (since = "1.24")]
 	public delegate Clutter.Actor ActorCreateChildFunc (GLib.Object item);
-	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
-	[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
-	public delegate double AlphaFunc (Clutter.Alpha alpha);
-	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 2.9)]
-	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
-	public delegate void BehaviourForeachFunc (Clutter.Behaviour behaviour, Clutter.Actor actor);
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 4.9)]
 	[Version (since = "1.0")]
 	public delegate bool BindingActionFunc (GLib.Object gobject, string action_name, uint key_val, Clutter.ModifierType modifiers);
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
 	public delegate void Callback (Clutter.Actor actor);
+	[CCode (cheader_filename = "clutter/clutter.h", has_target = false)]
+	public delegate void EmitInputDeviceEvent (Clutter.Event event, Clutter.InputDevice device);
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
 	[Version (since = "1.18")]
 	public delegate bool EventFilterFunc (Clutter.Event event);
@@ -8957,9 +8227,6 @@ namespace Clutter {
 	[Version (since = "0.8")]
 	public const int PRIORITY_REDRAW;
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.12")]
-	public static Clutter.ActorBox? actor_box_alloc ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	public static void base_init ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "1.12")]
@@ -8971,37 +8238,12 @@ namespace Clutter {
 	[Version (since = "1.10")]
 	public static bool check_windowing_backend (string backend_type);
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
-	public static void clear_glyph_cache ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	public static void color_from_hls (out Clutter.Color color, float hue, float luminance, float saturation);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	public static void color_from_pixel (out Clutter.Color color, uint32 pixel);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.0")]
-	public static bool color_from_string (out Clutter.Color color, string str);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.6")]
-	public static unowned Clutter.Color? color_get_static (Clutter.StaticColor color);
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "1.14")]
 	public static void disable_accessibility ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "0.4")]
 	public static void do_event (Clutter.Event event);
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static uint event_add_filter (Clutter.Stage? stage, [CCode (delegate_target_pos = 2.2, destroy_notify_pos = 2.1)] owned Clutter.EventFilterFunc func);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.4")]
-	public static Clutter.Event event_get ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.4")]
-	public static unowned Clutter.Event event_peek ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static void event_remove_filter (uint id);
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "0.4")]
 	public static bool events_pending ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
@@ -9014,9 +8256,6 @@ namespace Clutter {
 	[Version (since = "1.0")]
 	public static uint32 get_current_event_time ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static bool get_debug_enabled ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "0.4")]
 	public static unowned Clutter.Backend get_default_backend ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
@@ -9026,18 +8265,9 @@ namespace Clutter {
 	[Version (since = "1.2")]
 	public static Clutter.TextDirection get_default_text_direction ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-	public static Clutter.FontFlags get_font_flags ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "1.0")]
 	public static unowned Pango.FontMap get_font_map ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static unowned Clutter.Actor get_keyboard_grab ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
-	public static bool get_motion_events_enabled ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "0.2")]
 	public static GLib.OptionGroup get_option_group ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
@@ -9045,26 +8275,8 @@ namespace Clutter {
 	public static GLib.OptionGroup get_option_group_without_init ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "0.6")]
-	public static unowned Clutter.Actor get_pointer_grab ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
 	public static unowned string get_script_id (GLib.Object gobject);
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
-	public static bool get_show_fps ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static ulong get_timestamp ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static void grab_keyboard (Clutter.Actor actor);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static void grab_pointer (Clutter.Actor actor);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
-	public static void grab_pointer_for_device (Clutter.Actor actor, int id_);
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	public static Clutter.InitError init ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[]? argv);
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "0.2")]
@@ -9080,41 +8292,6 @@ namespace Clutter {
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	public static void set_custom_backend_func (void* func);
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
-	public static void set_default_frame_rate (uint frames_per_sec);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-	public static void set_font_flags (Clutter.FontFlags flags);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
-	public static void set_motion_events_enabled (bool enable);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static void test_add_data_full (string test_path, owned GLib.TestDataFunc test_func);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static bool test_check_actor_at_point (Clutter.Actor stage, Clutter.Point point, Clutter.Actor actor, out Clutter.Actor? result);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static bool test_check_color_at_point (Clutter.Actor stage, Clutter.Point point, Clutter.Color color, out Clutter.Color result);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static unowned Clutter.Actor test_get_stage ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	public static void test_init (int argc, string argv);
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.18")]
-	public static int test_run ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static void ungrab_keyboard ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
-	public static void ungrab_pointer ();
-	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
-	public static void ungrab_pointer_for_device (int id_);
-	[CCode (cheader_filename = "clutter/clutter.h")]
 	[Version (since = "1.10")]
 	public static uint unicode_to_keysym (uint32 wc);
 }
diff --git vapi/mutter-cogl-5-custom.vala vapi/mutter-cogl-6-custom.vala
similarity index 100%
rename from vapi/mutter-cogl-5-custom.vala
rename to vapi/mutter-cogl-6-custom.vala
diff --git vapi/mutter-cogl-4.deps vapi/mutter-cogl-6.deps
similarity index 100%
rename from vapi/mutter-cogl-4.deps
rename to vapi/mutter-cogl-6.deps
diff --git vapi/mutter-cogl-5.vapi vapi/mutter-cogl-6.vapi
similarity index 68%
rename from vapi/mutter-cogl-5.vapi
rename to vapi/mutter-cogl-6.vapi
index a8961224..195e3b17 100644
--- vapi/mutter-cogl-5.vapi
+++ vapi/mutter-cogl-6.vapi
@@ -1,6 +1,6 @@
-/* mutter-cogl-5.vapi generated by vapigen, do not modify. */
+/* mutter-cogl-6.vapi generated by vapigen, do not modify. */
 
-[CCode (cprefix = "Cogl", gir_namespace = "Cogl", gir_version = "5", lower_case_cprefix = "cogl_")]
+[CCode (cprefix = "Cogl", gir_namespace = "Cogl", gir_version = "6", lower_case_cprefix = "cogl_")]
 namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "CoglHandle", type_id = "cogl_bitmap_get_gtype ()")]
 	[Compact]
@@ -28,9 +28,10 @@ namespace Cogl {
 		public bool set_data (size_t offset, [CCode (array_length_type = "size_t")] uint8[] data);
 		public void unmap ();
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Compact]
-	public class Euler {
+	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_context_get_gtype ()")]
+	public class Context : Cogl.Object {
+		[CCode (has_construct_function = false)]
+		protected Context ();
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_frame_closure_get_gtype ()")]
 	[Compact]
@@ -65,62 +66,17 @@ namespace Cogl {
 		[CCode (has_construct_function = false)]
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public Material ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.2")]
-		public Cogl.Material copy ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void foreach_layer (Cogl.MaterialLayerCallback callback);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_ambient (Cogl.Color ambient);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public Cogl.Color get_color ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_diffuse (Cogl.Color diffuse);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_emission (Cogl.Color emission);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public bool get_layer_point_sprite_coords_enabled (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-		public Cogl.MaterialWrapMode get_layer_wrap_mode_p (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-		public Cogl.MaterialWrapMode get_layer_wrap_mode_s (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-		public Cogl.MaterialWrapMode get_layer_wrap_mode_t (int layer_index);
-		public unowned GLib.List<Cogl.MaterialLayer> get_layers ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public int get_n_layers ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public float get_point_size ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public float get_shininess ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_specular (Cogl.Color specular);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public unowned Cogl.Handle get_user_program ();
-		[Version (deprecated = true, deprecated_since = "1.2", since = "1.0")]
-		public static unowned Cogl.Handle @ref (Cogl.Handle material);
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public void remove_layer (int layer_index);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_alpha_test_function (Cogl.MaterialAlphaFunc alpha_func, float alpha_reference);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_ambient (Cogl.Color ambient);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_ambient_and_diffuse (Cogl.Color color);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public bool set_blend (string blend_string) throws GLib.Error;
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_blend_constant (Cogl.Color constant_color);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_color (Cogl.Color color);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_color4f (float red, float green, float blue, float alpha);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_color4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_diffuse (Cogl.Color diffuse);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_emission (Cogl.Color emission);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_layer (int layer_index, Cogl.Handle texture);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public bool set_layer_combine (int layer_index, string blend_string) throws GLib.Error;
@@ -133,41 +89,13 @@ namespace Cogl {
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
 		public bool set_layer_point_sprite_coords_enabled (int layer_index, bool enable) throws GLib.Error;
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode_p (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode_s (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode_t (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
 		public void set_point_size (float point_size);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_shininess (float shininess);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_specular (Cogl.Color specular);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
 		public void set_user_program (Cogl.Handle program);
-		[Version (deprecated = true, deprecated_since = "1.2", since = "1.0")]
-		public static void unref (Cogl.Handle material);
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
 	[Compact]
 	public class MaterialLayer {
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.MaterialFilter get_mag_filter ();
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.MaterialFilter get_min_filter ();
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public unowned Cogl.Handle get_texture ();
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.MaterialLayerType get_type ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.MaterialWrapMode get_wrap_mode_p ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.MaterialWrapMode get_wrap_mode_s ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.MaterialWrapMode get_wrap_mode_t ();
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_object_get_gtype ()")]
 	public abstract class Object {
@@ -178,13 +106,9 @@ namespace Cogl {
 	public class Offscreen : Cogl.Object, Cogl.Framebuffer {
 		[CCode (has_construct_function = false)]
 		protected Offscreen ();
-		[Version (deprecated = true, deprecated_since = "1.2")]
-		public static void* @ref (void* offscreen);
 		[CCode (has_construct_function = false)]
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public Offscreen.to_texture (Cogl.Texture texture);
-		[Version (deprecated = true, deprecated_since = "1.2")]
-		public static void unref (void* offscreen);
 		[CCode (has_construct_function = false)]
 		public Offscreen.with_texture (Cogl.Texture texture);
 	}
@@ -196,9 +120,6 @@ namespace Cogl {
 		public Cogl.OnscreenDirtyClosure add_dirty_callback ([CCode (delegate_target_pos = 1.5)] Cogl.OnscreenDirtyCallback callback, Cogl.UserDataDestroyCallback? destroy);
 		[Version (since = "2.0")]
 		public Cogl.OnscreenResizeClosure add_resize_callback ([CCode (delegate_target_pos = 1.5)] Cogl.OnscreenResizeCallback callback, Cogl.UserDataDestroyCallback? destroy);
-		[Version (deprecated = true, deprecated_since = "1.14", since = "1.10")]
-		public uint add_swap_buffers_callback (Cogl.SwapBuffersNotify callback);
-		public static void clutter_backend_set_size_CLUTTER (int width, int height);
 		[Version (since = "1.14")]
 		public int get_buffer_age ();
 		[Version (since = "1.14")]
@@ -213,8 +134,6 @@ namespace Cogl {
 		public void remove_frame_callback (Cogl.FrameClosure closure);
 		[Version (since = "2.0")]
 		public void remove_resize_callback (Cogl.OnscreenResizeClosure closure);
-		[Version (deprecated = true, deprecated_since = "1.14", since = "1.10")]
-		public void remove_swap_buffers_callback (uint id);
 		[Version (since = "2.0")]
 		public void set_resizable (bool resizable);
 		[Version (since = "2.0")]
@@ -244,7 +163,8 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_pipeline_get_gtype ()")]
 	public class Pipeline : Cogl.Object {
 		[CCode (has_construct_function = false)]
-		protected Pipeline ();
+		[Version (since = "2.0")]
+		public Pipeline (Cogl.Context context);
 		[Version (since = "2.0")]
 		public Cogl.Pipeline copy ();
 		[Version (since = "2.0")]
@@ -254,16 +174,10 @@ namespace Cogl {
 		[Version (since = "2.0")]
 		public float get_alpha_test_reference ();
 		[Version (since = "2.0")]
-		public void get_ambient (Cogl.Color ambient);
-		[Version (since = "2.0")]
 		public Cogl.Color get_color ();
 		[Version (since = "2.0")]
 		public Cogl.PipelineCullFaceMode get_cull_face_mode ();
 		[Version (since = "2.0")]
-		public void get_diffuse (Cogl.Color diffuse);
-		[Version (since = "2.0")]
-		public void get_emission (Cogl.Color emission);
-		[Version (since = "2.0")]
 		public Cogl.Winding get_front_face_winding ();
 		[Version (since = "1.10")]
 		public Cogl.PipelineFilter get_layer_mag_filter (int layer_index);
@@ -274,8 +188,6 @@ namespace Cogl {
 		[Version (since = "1.10")]
 		public unowned Cogl.Texture get_layer_texture (int layer_index);
 		[Version (since = "1.6")]
-		public Cogl.PipelineWrapMode get_layer_wrap_mode_p (int layer_index);
-		[Version (since = "1.6")]
 		public Cogl.PipelineWrapMode get_layer_wrap_mode_s (int layer_index);
 		[Version (since = "1.6")]
 		public Cogl.PipelineWrapMode get_layer_wrap_mode_t (int layer_index);
@@ -286,10 +198,6 @@ namespace Cogl {
 		[Version (since = "2.0")]
 		public float get_point_size ();
 		[Version (since = "2.0")]
-		public float get_shininess ();
-		[Version (since = "2.0")]
-		public void get_specular (Cogl.Color specular);
-		[Version (since = "2.0")]
 		public int get_uniform_location (string uniform_name);
 		[Version (since = "2.0")]
 		public unowned Cogl.Handle get_user_program ();
@@ -298,10 +206,6 @@ namespace Cogl {
 		[Version (since = "2.0")]
 		public void set_alpha_test_function (Cogl.PipelineAlphaFunc alpha_func, float alpha_reference);
 		[Version (since = "2.0")]
-		public void set_ambient (Cogl.Color ambient);
-		[Version (since = "2.0")]
-		public void set_ambient_and_diffuse (Cogl.Color color);
-		[Version (since = "2.0")]
 		public bool set_blend (string blend_string) throws GLib.Error;
 		[Version (since = "2.0")]
 		public void set_blend_constant (Cogl.Color constant_color);
@@ -314,10 +218,6 @@ namespace Cogl {
 		[Version (since = "2.0")]
 		public void set_cull_face_mode (Cogl.PipelineCullFaceMode cull_face_mode);
 		[Version (since = "2.0")]
-		public void set_diffuse (Cogl.Color diffuse);
-		[Version (since = "2.0")]
-		public void set_emission (Cogl.Color emission);
-		[Version (since = "2.0")]
 		public void set_front_face_winding (Cogl.Winding front_winding);
 		[Version (since = "2.0")]
 		public bool set_layer_combine (int layer_index, string blend_string) throws GLib.Error;
@@ -335,8 +235,6 @@ namespace Cogl {
 		[Version (since = "2.0")]
 		public void set_layer_wrap_mode (int layer_index, Cogl.PipelineWrapMode mode);
 		[Version (since = "2.0")]
-		public void set_layer_wrap_mode_p (int layer_index, Cogl.PipelineWrapMode mode);
-		[Version (since = "2.0")]
 		public void set_layer_wrap_mode_s (int layer_index, Cogl.PipelineWrapMode mode);
 		[Version (since = "2.0")]
 		public void set_layer_wrap_mode_t (int layer_index, Cogl.PipelineWrapMode mode);
@@ -345,10 +243,6 @@ namespace Cogl {
 		[Version (since = "2.0")]
 		public void set_point_size (float point_size);
 		[Version (since = "2.0")]
-		public void set_shininess (float shininess);
-		[Version (since = "2.0")]
-		public void set_specular (Cogl.Color specular);
-		[Version (since = "2.0")]
 		public void set_uniform_1f (int uniform_location, float value);
 		[Version (since = "2.0")]
 		public void set_uniform_1i (int uniform_location, int value);
@@ -382,10 +276,6 @@ namespace Cogl {
 		public static void uniform_matrix (int uniform_no, int size, bool transpose, [CCode (array_length_pos = 2.9)] float[] value);
 		public void use ();
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Compact]
-	public class Quaternion {
-	}
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "CoglHandle", ref_function = "cogl_shader_ref", unref_function = "cogl_shader_unref")]
 	[Compact]
 	public class Shader : Cogl.Handle {
@@ -465,12 +355,10 @@ namespace Cogl {
 		public int get_alpha_bits ();
 		[Version (since = "1.8")]
 		public int get_blue_bits ();
+		[Version (since = "1.8")]
+		public unowned Cogl.Context get_context ();
 		[Version (since = "2.0")]
 		public int get_depth_bits ();
-		[Version (since = "1.14")]
-		public unowned Cogl.Texture get_depth_texture ();
-		[Version (since = "1.14")]
-		public bool get_depth_texture_enabled ();
 		[Version (since = "1.18")]
 		public bool get_depth_write_enabled ();
 		[Version (since = "1.8")]
@@ -516,6 +404,7 @@ namespace Cogl {
 		public void push_matrix ();
 		[Version (since = "1.10")]
 		public void push_rectangle_clip (float x_1, float y_1, float x_2, float y_2);
+		public void push_region_clip (Cairo.Region region);
 		[Version (since = "1.10")]
 		public void push_scissor_clip (int x, int y, int width, int height);
 		[Version (since = "1.10")]
@@ -529,13 +418,9 @@ namespace Cogl {
 		[Version (since = "1.10")]
 		public void rotate (float angle, float x, float y, float z);
 		[Version (since = "2.0")]
-		public void rotate_euler (Cogl.Euler euler);
-		[Version (since = "2.0")]
-		public void rotate_quaternion (Cogl.Quaternion quaternion);
+		public void rotate_euler (Graphene.Euler euler);
 		[Version (since = "1.10")]
 		public void scale (float x, float y, float z);
-		[Version (since = "1.14")]
-		public void set_depth_texture_enabled (bool enabled);
 		[Version (since = "1.18")]
 		public void set_depth_write_enabled (bool depth_write_enabled);
 		[Version (since = "1.8")]
@@ -635,10 +520,6 @@ namespace Cogl {
 		public void set_blue_byte (uint8 blue);
 		[Version (since = "1.4")]
 		public void set_blue_float (float blue);
-		[Version (deprecated = true, deprecated_since = "1.4", since = "1.0")]
-		public void set_from_4f (float red, float green, float blue, float alpha);
-		[Version (deprecated = true, deprecated_since = "1.4", since = "1.0")]
-		public void set_from_4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
 		[Version (since = "1.4")]
 		public void set_green (float green);
 		[Version (since = "1.4")]
@@ -662,7 +543,7 @@ namespace Cogl {
 		public weak string name;
 		public ulong instance_count;
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "COGL_TYPE_MATRIX")]
+	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "COGL_TYPE_MATRIX")]
 	public struct Matrix {
 		public float xx;
 		public float yx;
@@ -692,8 +573,7 @@ namespace Cogl {
 		public bool get_inverse (out Cogl.Matrix inverse);
 		[CCode (cname = "cogl_matrix_init_identity")]
 		public Matrix.identity ();
-		public void init_from_euler (Cogl.Euler euler);
-		public void init_from_quaternion (Cogl.Quaternion quaternion);
+		public void init_from_euler (Graphene.Euler euler);
 		[Version (since = "2.0")]
 		public void init_translation (float tx, float ty, float tz);
 		[Version (since = "1.8")]
@@ -702,19 +582,15 @@ namespace Cogl {
 		public void look_at (float eye_position_x, float eye_position_y, float eye_position_z, float object_x, float object_y, float object_z, float world_up_x, float world_up_y, float world_up_z);
 		[CCode (cname = "cogl_matrix_multiply")]
 		public Matrix.multiply (Cogl.Matrix a, Cogl.Matrix b);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void ortho (float left, float right, float bottom, float top, float near, float far);
 		[Version (since = "1.10")]
 		public void orthographic (float x_1, float y_1, float x_2, float y_2, float near, float far);
 		public void perspective (float fov_y, float aspect, float z_near, float z_far);
 		public void project_points (int n_components, size_t stride_in, void* points_in, size_t stride_out, void* points_out, int n_points);
 		public void rotate (float angle, float x, float y, float z);
 		[Version (since = "2.0")]
-		public void rotate_euler (Cogl.Euler euler);
-		[Version (since = "2.0")]
-		public void rotate_quaternion (Cogl.Quaternion quaternion);
+		public void rotate_euler (Graphene.Euler euler);
 		public void scale (float sx, float sy, float sz);
-		public void transform_point (ref float x, ref float y, ref float z, ref float w);
+		public static void transform_point (ref Cogl.Matrix matrix, ref float x, ref float y, ref float z, ref float w);
 		public void transform_points (int n_components, size_t stride_in, void* points_in, size_t stride_out, void* points_out, int n_points);
 		public void translate (float x, float y, float z);
 		[Version (since = "1.10")]
@@ -818,38 +694,33 @@ namespace Cogl {
 		NONE,
 		NO_GET_DATA
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FEATURE_", has_type_id = false)]
-	[Flags]
-	[Version (since = "0.8")]
-	public enum FeatureFlags {
-		TEXTURE_YUV,
-		TEXTURE_READ_PIXELS,
-		OFFSCREEN,
-		OFFSCREEN_MULTISAMPLE,
-		FOUR_CLIP_PLANES,
-		STENCIL_BUFFER,
-		VBOS,
-		PBOS,
-		UNSIGNED_INT_INDICES,
-		DEPTH_RANGE,
-		POINT_SPRITE,
-		MAP_BUFFER_FOR_READ,
-		MAP_BUFFER_FOR_WRITE,
-		ONSCREEN_MULTIPLE,
-		DEPTH_TEXTURE
+	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FEATURE_ID_", has_type_id = false)]
+	[Version (since = "1.10")]
+	public enum FeatureID {
+		[CCode (cname = "COGL_FEATURE_ID_UNSIGNED_INT_INDICES")]
+		OGL_FEATURE_ID_UNSIGNED_INT_INDICES,
+		[CCode (cname = "COGL_FEATURE_ID_MAP_BUFFER_FOR_READ")]
+		OGL_FEATURE_ID_MAP_BUFFER_FOR_READ,
+		[CCode (cname = "COGL_FEATURE_ID_MAP_BUFFER_FOR_WRITE")]
+		OGL_FEATURE_ID_MAP_BUFFER_FOR_WRITE,
+		[CCode (cname = "COGL_FEATURE_ID_SWAP_BUFFERS_EVENT")]
+		OGL_FEATURE_ID_SWAP_BUFFERS_EVENT,
+		[CCode (cname = "COGL_FEATURE_ID_PRESENTATION_TIME")]
+		OGL_FEATURE_ID_PRESENTATION_TIME,
+		[CCode (cname = "COGL_FEATURE_ID_FENCE")]
+		OGL_FEATURE_ID_FENCE,
+		[CCode (cname = "COGL_FEATURE_ID_TEXTURE_RG")]
+		OGL_FEATURE_ID_TEXTURE_RG,
+		[CCode (cname = "COGL_FEATURE_ID_BUFFER_AGE")]
+		OGL_FEATURE_ID_BUFFER_AGE,
+		[CCode (cname = "COGL_FEATURE_ID_TEXTURE_EGL_IMAGE_EXTERNAL")]
+		OGL_FEATURE_ID_TEXTURE_EGL_IMAGE_EXTERNAL
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FILTER_", has_type_id = false)]
 	public enum FilterReturn {
 		CONTINUE,
 		REMOVE
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FOG_MODE_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum FogMode {
-		LINEAR,
-		EXPONENTIAL,
-		EXPONENTIAL_SQUARED
-	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FRAME_EVENT_", has_type_id = false)]
 	[Version (since = "1.14")]
 	public enum FrameEvent {
@@ -862,6 +733,14 @@ namespace Cogl {
 		FRAMEBUFFER_ERROR_ALLOCATE;
 		public static uint32 quark ();
 	}
+	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_GRAPHICS_RESET_STATUS_", has_type_id = false)]
+	public enum GraphicsResetStatus {
+		NO_ERROR,
+		GUILTY_CONTEXT_RESET,
+		INNOCENT_CONTEXT_RESET,
+		UNKNOWN_CONTEXT_RESET,
+		PURGED_CONTEXT_RESET
+	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_INDICES_TYPE_UNSIGNED_", has_type_id = false)]
 	public enum IndicesType {
 		BYTE,
@@ -888,12 +767,6 @@ namespace Cogl {
 		NEAREST_MIPMAP_LINEAR,
 		LINEAR_MIPMAP_LINEAR
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_LAYER_TYPE_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum MaterialLayerType {
-		[CCode (cname = "COGL_MATERIAL_LAYER_TYPE_TEXTURE")]
-		MATERIAL_LAYER_TYPE_TEXTURE
-	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_WRAP_MODE_", has_type_id = false)]
 	[Version (since = "1.4")]
 	public enum MaterialWrapMode {
@@ -971,6 +844,8 @@ namespace Cogl {
 		DEPTH_16,
 		DEPTH_32,
 		DEPTH_24_STENCIL_8;
+		public int get_bytes_per_pixel (int plane);
+		public int get_n_planes ();
 		public unowned string to_string ();
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_READ_PIXELS_COLOR_", has_type_id = false)]
@@ -1064,9 +939,9 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
 	[Version (since = "1.8")]
 	public delegate void DebugObjectForeachTypeCallback (Cogl.DebugObjectTypeInfo info);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-	public delegate bool MaterialLayerCallback (Cogl.Material material, int layer_index);
+	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
+	[Version (since = "0.10")]
+	public delegate void FeatureCallback (Cogl.FeatureID feature);
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
 	[Version (since = "1.16")]
 	public delegate void OnscreenDirtyCallback (Cogl.Onscreen onscreen, Cogl.OnscreenDirtyInfo info);
@@ -1074,13 +949,9 @@ namespace Cogl {
 	[Version (since = "2.0")]
 	public delegate void OnscreenResizeCallback (Cogl.Onscreen onscreen, int width, int height);
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
-	public delegate void OnscreenX11MaskCallback (Cogl.Onscreen onscreen, uint32 event_mask);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
 	[Version (since = "2.0")]
 	public delegate bool PipelineLayerCallback (Cogl.Pipeline pipeline, int layer_index);
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
-	public delegate void SwapBuffersNotify (Cogl.Framebuffer framebuffer);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
 	public delegate bool Texture2DEGLImageExternalAlloc (Cogl.Texture2D tex_2d) throws GLib.Error;
 	[CCode (cheader_filename = "cogl/cogl.h", has_target = false)]
 	public delegate void UserDataDestroyCallback (void* data);
@@ -1092,6 +963,8 @@ namespace Cogl {
 	public const int BGR_BIT;
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_DEPTH_BIT")]
 	public const int DEPTH_BIT;
+	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_PIXEL_FORMAT_MAX_PLANES")]
+	public const int PIXEL_FORMAT_MAX_PLANES;
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_PREMULT_BIT")]
 	public const int PREMULT_BIT;
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_STENCIL_BIT")]
@@ -1099,19 +972,8 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_TEXTURE_MAX_WASTE")]
 	public const int TEXTURE_MAX_WASTE;
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void begin_gl ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static bool blit_framebuffer (Cogl.Framebuffer src, Cogl.Framebuffer dest, int src_x, int src_y, int dst_x, int dst_y, int width, int height) throws GLib.Error;
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.2")]
-	public static bool check_extension (string name, string ext);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void clear (Cogl.Color color, ulong buffers);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static bool clutter_check_extension_CLUTTER (string name, string ext);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static bool clutter_winsys_has_feature_CLUTTER (Cogl.WinsysFeature feature);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.0")]
@@ -1129,57 +991,38 @@ namespace Cogl {
 	[Version (since = "1.8")]
 	public static void debug_object_print_instances ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void disable_fog ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void end_gl ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static bool features_available (Cogl.FeatureFlags features);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.0")]
 	public static void flush ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8.2")]
-	public static void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
+	[Version (since = "1.10")]
+	public static void foreach_feature (Cogl.Context context, Cogl.FeatureCallback callback);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
 	public static bool get_backface_culling_enabled ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.8")]
-	public static void get_bitmasks (out int red, out int green, out int blue, out int alpha);
+	[Version (since = "1.14")]
+	public static int64 get_clock_time (Cogl.Context context);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
 	public static bool get_depth_test_enabled ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.8")]
-	public static unowned Cogl.Framebuffer get_draw_framebuffer ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
-	public static Cogl.FeatureFlags get_features ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static Cogl.Matrix get_modelview_matrix ();
+	public static Cogl.GraphicsResetStatus get_graphics_reset_status (Cogl.Context context);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 	public static GLib.OptionGroup get_option_group ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static GLib.Callback get_proc_address (string s);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static Cogl.Matrix get_projection_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-	public static void* get_source ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void get_viewport ([CCode (array_length = false)] out float v[4]);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.18")]
 	public static GLib.Type gtype_matrix_get_type ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.10")]
+	public static bool has_feature (Cogl.Context context, Cogl.FeatureID feature);
+	[CCode (cheader_filename = "cogl/cogl.h")]
+	[Version (since = "1.10")]
+	public static bool is_context (void* object);
+	[CCode (cheader_filename = "cogl/cogl.h")]
+	[Version (since = "1.10")]
 	public static bool is_framebuffer (void* object);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.10")]
@@ -1193,53 +1036,9 @@ namespace Cogl {
 	[Version (since = "1.10")]
 	public static bool is_texture_2d_sliced (void* object);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-	public static bool is_vertex_buffer_indices (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.4")]
 	public static bool matrix_equal (void* v1, void* v2);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-	public static void ortho (float left, float right, float bottom, float top, float near, float far);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void perspective (float fovy, float aspect, float z_near, float z_far);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void polygon (Cogl.TextureVertex vertices, uint n_vertices, bool use_color);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void pop_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-	public static void pop_source ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void push_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-	public static void push_source (void* material);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static void rectangle (float x_1, float y_1, float x_2, float y_2);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void rectangle_with_multitexture_coords (float x1, float y1, float x2, float y2, [CCode (array_length = false)] float[] tex_coords, int tex_coords_len);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void rectangle_with_texture_coords (float x1, float y1, float x2, float y2, float tx1, float ty1, float tx2, float ty2);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void rectangles ([CCode (array_length = false)] float[] verts, uint n_rects);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "0.8.6")]
-	public static void rectangles_with_texture_coords ([CCode (array_length = false)] float[] verts, uint n_rects);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void rotate (float angle, float x, float y, float z);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void scale (float x, float y, float z);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
 	public static void set_backface_culling_enabled (bool setting);
 	[CCode (cheader_filename = "cogl/cogl.h")]
@@ -1247,53 +1046,11 @@ namespace Cogl {
 	public static void set_depth_test_enabled (bool setting);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void set_fog (Cogl.Color fog_color, Cogl.FogMode mode, float density, float z_near, float z_far);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void set_modelview_matrix (Cogl.Matrix matrix);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void set_projection_matrix (Cogl.Matrix matrix);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source (void* material);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_color (Cogl.Color color);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_color4f (float red, float green, float blue, float alpha);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_color4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_texture (Cogl.Texture texture);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.8", since = "1.2")]
-	public static void set_viewport (int x, int y, int width, int height);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void shader_compile (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static string shader_get_info_log (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
 	public static Cogl.ShaderType shader_get_type (Cogl.Handle handle);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static bool shader_is_compiled (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static unowned Cogl.Handle shader_ref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
 	public static void shader_source (Cogl.Handle shader, string source);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void shader_unref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.18", since = "1.0")]
 	public static Cogl.Texture texture_new_from_bitmap (Cogl.Bitmap bitmap, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
 	[CCode (cheader_filename = "cogl/cogl.h")]
@@ -1306,59 +1063,6 @@ namespace Cogl {
 	[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
 	public static Cogl.Texture texture_new_with_size (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "1.4")]
-	public static void transform (Cogl.Matrix matrix);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void translate (float x, float y, float z);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_add (Cogl.Handle handle, string attribute_name, uint8 n_components, Cogl.AttributeType type, bool normalized, uint16 stride, void* pointer);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_delete (Cogl.Handle handle, string attribute_name);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_disable (Cogl.Handle handle, string attribute_name);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_draw (Cogl.Handle handle, Cogl.VerticesMode mode, int first, int count);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_draw_elements (Cogl.Handle handle, Cogl.VerticesMode mode, Cogl.Handle indices, int min_index, int max_index, int indices_offset, int count);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_enable (Cogl.Handle handle, string attribute_name);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static uint vertex_buffer_get_n_vertices (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static unowned Cogl.Handle vertex_buffer_indices_get_for_quads (uint n_indices);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.IndicesType vertex_buffer_indices_get_type (Cogl.Handle indices);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static unowned Cogl.Handle vertex_buffer_new (uint n_vertices);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.2")]
-	public static unowned Cogl.Handle vertex_buffer_ref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_submit (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.2")]
-	public static void vertex_buffer_unref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.8", since = "0.8.2")]
-	public static void viewport (uint width, uint height);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static uint32 x11_onscreen_get_visual_xid (Cogl.Onscreen onscreen);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.10")]
 	public static uint32 x11_onscreen_get_window_xid (Cogl.Onscreen onscreen);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "2.0")]
-	public static void x11_onscreen_set_foreign_window_xid (Cogl.Onscreen onscreen, uint32 xid, [CCode (scope = "async")] Cogl.OnscreenX11MaskCallback update);
 }
diff --git vapi/mutter-cogl-4-custom.vala vapi/mutter-cogl-7-custom.vala
similarity index 81%
rename from vapi/mutter-cogl-4-custom.vala
rename to vapi/mutter-cogl-7-custom.vala
index 2551885a..c4d4b93a 100644
--- vapi/mutter-cogl-4-custom.vala
+++ vapi/mutter-cogl-7-custom.vala
@@ -1,10 +1,4 @@
 namespace Cogl {
-	[Compact]
-	[CCode (cname = "CoglHandle")]
-	public class Bitmap: Handle {
-		public static Bitmap new_from_file (string filename) throws GLib.Error;
-	}
-
 	[Compact]
 	[CCode (cname = "CoglHandle")]
 	public class Buffer: Handle {
@@ -42,7 +36,7 @@ namespace Cogl {
 		public bool is_vertex_buffer ();
 	}
 
-	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "cogl_path_copy")] 
+	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "cogl_path_copy")]
 	[Compact]
 	public class Path {
 		public static void @new ();
@@ -82,18 +76,6 @@ namespace Cogl {
 		public void source (string source);
 	}
 
-	[Compact]
-	[CCode (cname = "CoglHandle", ref_function = "cogl_texture_ref", unref_function = "cogl_texture_unref")]
-	public class Texture: Handle {
-		public Cogl.PixelFormat get_format ();
-		public uint get_rowstride ();
-		public Texture.from_bitmap (Cogl.Bitmap bmp_handle, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
-		public Texture.from_data (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat format, Cogl.PixelFormat internal_format, uint rowstride, [CCode (array_length = false)] uchar[] data);
-		public Texture.from_file (string filename, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format) throws GLib.Error;
-		public Texture.from_sub_texture (Cogl.Texture full_texture, int sub_x, int sub_y, int sub_width, int sub_height);
-		public Texture.with_size (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
-	}
-
 	[Compact]
 	[CCode (cname = "CoglHandle", ref_function = "cogl_vertex_buffer_ref", unref_function = "cogl_vertex_buffer_unref")]
 	public class VertexBuffer: Handle {
diff --git vapi/mutter-cogl-5.deps vapi/mutter-cogl-7.deps
similarity index 100%
rename from vapi/mutter-cogl-5.deps
rename to vapi/mutter-cogl-7.deps
diff --git vapi/mutter-cogl-4.vapi vapi/mutter-cogl-7.vapi
similarity index 59%
rename from vapi/mutter-cogl-4.vapi
rename to vapi/mutter-cogl-7.vapi
index 5de8f447..620c2317 100644
--- vapi/mutter-cogl-4.vapi
+++ vapi/mutter-cogl-7.vapi
@@ -1,12 +1,13 @@
-/* mutter-cogl-4.vapi generated by vapigen, do not modify. */
+/* mutter-cogl-7.vapi generated by vapigen, do not modify. */
 
-[CCode (cprefix = "Cogl", gir_namespace = "Cogl", gir_version = "4", lower_case_cprefix = "cogl_")]
+[CCode (cprefix = "Cogl", gir_namespace = "Cogl", gir_version = "7", lower_case_cprefix = "cogl_")]
 namespace Cogl {
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "CoglHandle", type_id = "cogl_bitmap_get_gtype ()")]
-	[Compact]
-	public class Bitmap : Cogl.Handle {
+	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_bitmap_get_gtype ()")]
+	public class Bitmap : Cogl.Object {
+		[CCode (has_construct_function = false)]
+		protected Bitmap ();
 		public static uint32 error_quark ();
-		[CCode (has_construct_function = false, type = "CoglBitmap*")]
+		[CCode (has_construct_function = false)]
 		[Version (since = "1.0")]
 		public Bitmap.from_file (string filename) throws GLib.Error;
 		[Version (since = "1.10")]
@@ -16,10 +17,9 @@ namespace Cogl {
 		[Version (since = "1.10")]
 		public int get_rowstride ();
 		[Version (since = "1.0")]
-		public static Cogl.Bool get_size_from_file (string filename, out int width, out int height);
+		public static bool get_size_from_file (string filename, out int width, out int height);
 		[Version (since = "1.10")]
 		public int get_width ();
-		public static Cogl.Bitmap new_from_file (string filename) throws GLib.Error;
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "CoglHandle")]
 	[Compact]
@@ -28,15 +28,28 @@ namespace Cogl {
 		public bool set_data (size_t offset, [CCode (array_length_type = "size_t")] uint8[] data);
 		public void unmap ();
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Compact]
-	public class Euler {
+	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_context_get_gtype ()")]
+	public class Context : Cogl.Object {
+		[CCode (has_construct_function = false)]
+		protected Context ();
+		public bool is_hardware_accelerated ();
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_frame_closure_get_gtype ()")]
 	[Compact]
 	[Version (since = "1.14")]
 	public class FrameClosure {
 	}
+	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_frame_info_get_gtype ()")]
+	public class FrameInfo : Cogl.Object {
+		[CCode (has_construct_function = false)]
+		protected FrameInfo ();
+		[Version (since = "1.14")]
+		public int64 get_frame_counter ();
+		[Version (since = "1.14")]
+		public int64 get_presentation_time ();
+		[Version (since = "1.14")]
+		public float get_refresh_rate ();
+	}
 	[CCode (cheader_filename = "cogl/cogl.h", ref_function = "cogl_handle_ref", unref_function = "cogl_handle_unref")]
 	[Compact]
 	public class Handle {
@@ -65,65 +78,20 @@ namespace Cogl {
 		[CCode (has_construct_function = false)]
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public Material ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.2")]
-		public Cogl.Material copy ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void foreach_layer (Cogl.MaterialLayerCallback callback);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_ambient (Cogl.Color ambient);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public Cogl.Color get_color ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_diffuse (Cogl.Color diffuse);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_emission (Cogl.Color emission);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.Bool get_layer_point_sprite_coords_enabled (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-		public Cogl.MaterialWrapMode get_layer_wrap_mode_p (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-		public Cogl.MaterialWrapMode get_layer_wrap_mode_s (int layer_index);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-		public Cogl.MaterialWrapMode get_layer_wrap_mode_t (int layer_index);
-		public unowned GLib.List<Cogl.MaterialLayer> get_layers ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public int get_n_layers ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public float get_point_size ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public float get_shininess ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void get_specular (Cogl.Color specular);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public unowned Cogl.Handle get_user_program ();
-		[Version (deprecated = true, deprecated_since = "1.2", since = "1.0")]
-		public static unowned Cogl.Handle @ref (Cogl.Handle material);
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public void remove_layer (int layer_index);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_alpha_test_function (Cogl.MaterialAlphaFunc alpha_func, float alpha_reference);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_ambient (Cogl.Color ambient);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_ambient_and_diffuse (Cogl.Color color);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public Cogl.Bool set_blend (string blend_string) throws GLib.Error;
+		public bool set_blend (string blend_string) throws GLib.Error;
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_blend_constant (Cogl.Color constant_color);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_color (Cogl.Color color);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_color4f (float red, float green, float blue, float alpha);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_color4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_diffuse (Cogl.Color diffuse);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_emission (Cogl.Color emission);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_layer (int layer_index, Cogl.Handle texture);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public Cogl.Bool set_layer_combine (int layer_index, string blend_string) throws GLib.Error;
+		public bool set_layer_combine (int layer_index, string blend_string) throws GLib.Error;
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 		public void set_layer_combine_constant (int layer_index, Cogl.Color constant);
 		[Version (deprecated = true, deprecated_since = "1.16")]
@@ -131,43 +99,15 @@ namespace Cogl {
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public void set_layer_matrix (int layer_index, Cogl.Matrix matrix);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.Bool set_layer_point_sprite_coords_enabled (int layer_index, Cogl.Bool enable) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode_p (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode_s (int layer_index, Cogl.MaterialWrapMode mode);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public void set_layer_wrap_mode_t (int layer_index, Cogl.MaterialWrapMode mode);
+		public bool set_layer_point_sprite_coords_enabled (int layer_index, bool enable) throws GLib.Error;
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
 		public void set_point_size (float point_size);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_shininess (float shininess);
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-		public void set_specular (Cogl.Color specular);
 		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
 		public void set_user_program (Cogl.Handle program);
-		[Version (deprecated = true, deprecated_since = "1.2", since = "1.0")]
-		public static void unref (Cogl.Handle material);
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
 	[Compact]
 	public class MaterialLayer {
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.MaterialFilter get_mag_filter ();
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.MaterialFilter get_min_filter ();
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public unowned Cogl.Handle get_texture ();
-		[Version (deprecated = true, deprecated_since = "1.16")]
-		public Cogl.MaterialLayerType get_type ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.MaterialWrapMode get_wrap_mode_p ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.MaterialWrapMode get_wrap_mode_s ();
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-		public Cogl.MaterialWrapMode get_wrap_mode_t ();
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_object_get_gtype ()")]
 	public abstract class Object {
@@ -178,13 +118,9 @@ namespace Cogl {
 	public class Offscreen : Cogl.Object, Cogl.Framebuffer {
 		[CCode (has_construct_function = false)]
 		protected Offscreen ();
-		[Version (deprecated = true, deprecated_since = "1.2")]
-		public static void* @ref (void* offscreen);
 		[CCode (has_construct_function = false)]
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public Offscreen.to_texture (Cogl.Texture texture);
-		[Version (deprecated = true, deprecated_since = "1.2")]
-		public static void unref (void* offscreen);
 		[CCode (has_construct_function = false)]
 		public Offscreen.with_texture (Cogl.Texture texture);
 	}
@@ -194,17 +130,16 @@ namespace Cogl {
 		protected Onscreen ();
 		[Version (since = "1.16")]
 		public Cogl.OnscreenDirtyClosure add_dirty_callback ([CCode (delegate_target_pos = 1.5)] Cogl.OnscreenDirtyCallback callback, Cogl.UserDataDestroyCallback? destroy);
+		[Version (since = "1.14")]
+		public Cogl.FrameClosure add_frame_callback ([CCode (delegate_target_pos = 1.5)] Cogl.FrameCallback callback, Cogl.UserDataDestroyCallback? destroy);
 		[Version (since = "2.0")]
 		public Cogl.OnscreenResizeClosure add_resize_callback ([CCode (delegate_target_pos = 1.5)] Cogl.OnscreenResizeCallback callback, Cogl.UserDataDestroyCallback? destroy);
-		[Version (deprecated = true, deprecated_since = "1.14", since = "1.10")]
-		public uint add_swap_buffers_callback (Cogl.SwapBuffersNotify callback);
-		public static void clutter_backend_set_size_CLUTTER (int width, int height);
 		[Version (since = "1.14")]
 		public int get_buffer_age ();
 		[Version (since = "1.14")]
 		public int64 get_frame_counter ();
 		[Version (since = "2.0")]
-		public Cogl.Bool get_resizable ();
+		public bool get_resizable ();
 		[Version (since = "2.0")]
 		public void hide ();
 		[Version (since = "1.16")]
@@ -213,18 +148,16 @@ namespace Cogl {
 		public void remove_frame_callback (Cogl.FrameClosure closure);
 		[Version (since = "2.0")]
 		public void remove_resize_callback (Cogl.OnscreenResizeClosure closure);
-		[Version (deprecated = true, deprecated_since = "1.14", since = "1.10")]
-		public void remove_swap_buffers_callback (uint id);
 		[Version (since = "2.0")]
-		public void set_resizable (Cogl.Bool resizable);
+		public void set_resizable (bool resizable);
 		[Version (since = "2.0")]
 		public void show ();
 		[Version (since = "1.10")]
-		public void swap_buffers ();
+		public void swap_buffers (Cogl.FrameInfo frame_info);
 		[Version (since = "1.16")]
-		public void swap_buffers_with_damage (int rectangles, int n_rectangles);
+		public void swap_buffers_with_damage (int rectangles, int n_rectangles, Cogl.FrameInfo info);
 		[Version (since = "1.10")]
-		public void swap_region (int rectangles, int n_rectangles);
+		public void swap_region (int rectangles, int n_rectangles, Cogl.FrameInfo info);
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_onscreen_dirty_closure_get_gtype ()")]
 	[Compact]
@@ -244,7 +177,8 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_pipeline_get_gtype ()")]
 	public class Pipeline : Cogl.Object {
 		[CCode (has_construct_function = false)]
-		protected Pipeline ();
+		[Version (since = "2.0")]
+		public Pipeline (Cogl.Context context);
 		[Version (since = "2.0")]
 		public Cogl.Pipeline copy ();
 		[Version (since = "2.0")]
@@ -254,44 +188,30 @@ namespace Cogl {
 		[Version (since = "2.0")]
 		public float get_alpha_test_reference ();
 		[Version (since = "2.0")]
-		public void get_ambient (Cogl.Color ambient);
-		[Version (since = "2.0")]
 		public Cogl.Color get_color ();
-		[Version (since = "1.8")]
-		public Cogl.ColorMask get_color_mask ();
 		[Version (since = "2.0")]
 		public Cogl.PipelineCullFaceMode get_cull_face_mode ();
 		[Version (since = "2.0")]
-		public void get_diffuse (Cogl.Color diffuse);
-		[Version (since = "2.0")]
-		public void get_emission (Cogl.Color emission);
-		[Version (since = "2.0")]
 		public Cogl.Winding get_front_face_winding ();
 		[Version (since = "1.10")]
 		public Cogl.PipelineFilter get_layer_mag_filter (int layer_index);
 		[Version (since = "1.10")]
 		public Cogl.PipelineFilter get_layer_min_filter (int layer_index);
 		[Version (since = "2.0")]
-		public Cogl.Bool get_layer_point_sprite_coords_enabled (int layer_index);
+		public bool get_layer_point_sprite_coords_enabled (int layer_index);
 		[Version (since = "1.10")]
 		public unowned Cogl.Texture get_layer_texture (int layer_index);
 		[Version (since = "1.6")]
-		public Cogl.PipelineWrapMode get_layer_wrap_mode_p (int layer_index);
-		[Version (since = "1.6")]
 		public Cogl.PipelineWrapMode get_layer_wrap_mode_s (int layer_index);
 		[Version (since = "1.6")]
 		public Cogl.PipelineWrapMode get_layer_wrap_mode_t (int layer_index);
 		[Version (since = "2.0")]
 		public int get_n_layers ();
 		[Version (since = "2.0")]
-		public Cogl.Bool get_per_vertex_point_size ();
+		public bool get_per_vertex_point_size ();
 		[Version (since = "2.0")]
 		public float get_point_size ();
 		[Version (since = "2.0")]
-		public float get_shininess ();
-		[Version (since = "2.0")]
-		public void get_specular (Cogl.Color specular);
-		[Version (since = "2.0")]
 		public int get_uniform_location (string uniform_name);
 		[Version (since = "2.0")]
 		public unowned Cogl.Handle get_user_program ();
@@ -300,11 +220,7 @@ namespace Cogl {
 		[Version (since = "2.0")]
 		public void set_alpha_test_function (Cogl.PipelineAlphaFunc alpha_func, float alpha_reference);
 		[Version (since = "2.0")]
-		public void set_ambient (Cogl.Color ambient);
-		[Version (since = "2.0")]
-		public void set_ambient_and_diffuse (Cogl.Color color);
-		[Version (since = "2.0")]
-		public Cogl.Bool set_blend (string blend_string) throws GLib.Error;
+		public bool set_blend (string blend_string) throws GLib.Error;
 		[Version (since = "2.0")]
 		public void set_blend_constant (Cogl.Color constant_color);
 		[Version (since = "2.0")]
@@ -313,46 +229,35 @@ namespace Cogl {
 		public void set_color4f (float red, float green, float blue, float alpha);
 		[Version (since = "2.0")]
 		public void set_color4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
-		[Version (since = "1.8")]
-		public void set_color_mask (Cogl.ColorMask color_mask);
 		[Version (since = "2.0")]
 		public void set_cull_face_mode (Cogl.PipelineCullFaceMode cull_face_mode);
 		[Version (since = "2.0")]
-		public void set_diffuse (Cogl.Color diffuse);
-		[Version (since = "2.0")]
-		public void set_emission (Cogl.Color emission);
-		[Version (since = "2.0")]
 		public void set_front_face_winding (Cogl.Winding front_winding);
 		[Version (since = "2.0")]
-		public Cogl.Bool set_layer_combine (int layer_index, string blend_string) throws GLib.Error;
+		public bool set_layer_combine (int layer_index, string blend_string) throws GLib.Error;
 		[Version (since = "2.0")]
 		public void set_layer_combine_constant (int layer_index, Cogl.Color constant);
 		[Version (since = "1.10")]
 		public void set_layer_filters (int layer_index, Cogl.PipelineFilter min_filter, Cogl.PipelineFilter mag_filter);
 		[Version (since = "1.10")]
 		public void set_layer_matrix (int layer_index, Cogl.Matrix matrix);
+		public void set_layer_max_mipmap_level (int layer, int max_level);
 		[Version (since = "1.10")]
-		public void set_layer_null_texture (int layer_index, Cogl.TextureType texture_type);
+		public void set_layer_null_texture (int layer_index);
 		[Version (since = "2.0")]
-		public Cogl.Bool set_layer_point_sprite_coords_enabled (int layer_index, Cogl.Bool enable) throws GLib.Error;
+		public bool set_layer_point_sprite_coords_enabled (int layer_index, bool enable) throws GLib.Error;
 		public void set_layer_texture (int layer_index, Cogl.Texture texture);
 		[Version (since = "2.0")]
 		public void set_layer_wrap_mode (int layer_index, Cogl.PipelineWrapMode mode);
 		[Version (since = "2.0")]
-		public void set_layer_wrap_mode_p (int layer_index, Cogl.PipelineWrapMode mode);
-		[Version (since = "2.0")]
 		public void set_layer_wrap_mode_s (int layer_index, Cogl.PipelineWrapMode mode);
 		[Version (since = "2.0")]
 		public void set_layer_wrap_mode_t (int layer_index, Cogl.PipelineWrapMode mode);
 		[Version (since = "2.0")]
-		public Cogl.Bool set_per_vertex_point_size (Cogl.Bool enable) throws GLib.Error;
+		public bool set_per_vertex_point_size (bool enable) throws GLib.Error;
 		[Version (since = "2.0")]
 		public void set_point_size (float point_size);
 		[Version (since = "2.0")]
-		public void set_shininess (float shininess);
-		[Version (since = "2.0")]
-		public void set_specular (Cogl.Color specular);
-		[Version (since = "2.0")]
 		public void set_uniform_1f (int uniform_location, float value);
 		[Version (since = "2.0")]
 		public void set_uniform_1i (int uniform_location, int value);
@@ -361,7 +266,7 @@ namespace Cogl {
 		[Version (since = "2.0")]
 		public void set_uniform_int (int uniform_location, int n_components, int count, int value);
 		[Version (since = "2.0")]
-		public void set_uniform_matrix (int uniform_location, int dimensions, int count, Cogl.Bool transpose, float value);
+		public void set_uniform_matrix (int uniform_location, int dimensions, int count, bool transpose, float value);
 		[Version (since = "2.0")]
 		public void set_user_program (Cogl.Handle program);
 	}
@@ -388,7 +293,7 @@ namespace Cogl {
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
 	[Compact]
-	public class Quaternion {
+	public class Scanout {
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "CoglHandle", ref_function = "cogl_shader_ref", unref_function = "cogl_shader_unref")]
 	[Compact]
@@ -401,48 +306,23 @@ namespace Cogl {
 		public bool is_compiled ();
 		public void source (string source);
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "CoglHandle", ref_function = "cogl_texture_ref", type_id = "cogl_texture_get_gtype ()", unref_function = "cogl_texture_unref")]
-	[Compact]
-	public class Texture : Cogl.Handle {
-		public Cogl.Bool allocate () throws GLib.Error;
-		public static uint32 error_quark ();
-		public Texture.from_bitmap (Cogl.Bitmap bmp_handle, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
-		public Texture.from_data (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat format, Cogl.PixelFormat internal_format, uint rowstride, [CCode (array_length = false)] uchar[] data);
-		public Texture.from_file (string filename, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format) throws GLib.Error;
-		public Texture.from_sub_texture (Cogl.Texture full_texture, int sub_x, int sub_y, int sub_width, int sub_height);
-		[Version (since = "1.18")]
-		public Cogl.TextureComponents get_components ();
-		public int get_data (Cogl.PixelFormat format, uint rowstride, uint8 data);
-		public Cogl.PixelFormat get_format ();
-		public Cogl.Bool get_gl_texture (out uint out_gl_handle, out uint out_gl_target);
-		public uint get_height ();
-		public int get_max_waste ();
-		[Version (since = "1.18")]
-		public Cogl.Bool get_premultiplied ();
-		public uint get_rowstride ();
-		public uint get_width ();
-		public Cogl.Bool is_sliced ();
-		[Version (deprecated = true, deprecated_since = "1.18", since = "1.0")]
-		public static Cogl.Texture new_from_bitmap (Cogl.Bitmap bitmap, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
-		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-		public static Cogl.Texture new_from_data (int width, int height, Cogl.TextureFlags flags, Cogl.PixelFormat format, Cogl.PixelFormat internal_format, int rowstride, uint8 data);
-		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-		public static Cogl.Texture new_from_file (string filename, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format) throws GLib.Error;
-		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-		public static Cogl.Texture new_from_foreign (uint gl_handle, uint gl_target, uint width, uint height, uint x_pot_waste, uint y_pot_waste, Cogl.PixelFormat format);
-		[Version (deprecated = true, deprecated_since = "1.18", since = "1.2")]
-		public Cogl.Texture new_from_sub_texture (int sub_x, int sub_y, int sub_width, int sub_height);
-		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-		public static Cogl.Texture new_with_size (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
-		[Version (since = "1.18")]
-		public void set_components (Cogl.TextureComponents components);
-		public Cogl.Bool set_data (Cogl.PixelFormat format, int rowstride, uint8 data, int level) throws GLib.Error;
-		[Version (since = "1.18")]
-		public void set_premultiplied (Cogl.Bool premultiplied);
-		public Cogl.Bool set_region (int src_x, int src_y, int dst_x, int dst_y, uint dst_width, uint dst_height, int width, int height, Cogl.PixelFormat format, uint rowstride, uint8 data);
-		[Version (since = "1.8")]
-		public Cogl.Bool set_region_from_bitmap (int src_x, int src_y, int dst_x, int dst_y, uint dst_width, uint dst_height, Cogl.Bitmap bitmap);
-		public Texture.with_size (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
+	[CCode (cheader_filename = "cogl/cogl.h", lower_case_csuffix = "texture_2d", type_id = "cogl_texture_2d_get_gtype ()")]
+	public class Texture2D : Cogl.Object, Cogl.Texture {
+		[CCode (has_construct_function = false)]
+		protected Texture2D ();
+		public void egl_image_external_alloc_finish (void* user_data, GLib.DestroyNotify destroy);
+		public void egl_image_external_bind ();
+		[CCode (has_construct_function = false)]
+		[Version (since = "2.0")]
+		public Texture2D.from_bitmap (Cogl.Bitmap bitmap);
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", lower_case_csuffix = "texture_2d_sliced", type_id = "cogl_texture_2d_sliced_get_gtype ()")]
+	public class Texture2DSliced : Cogl.Object, Cogl.Texture {
+		[CCode (has_construct_function = false)]
+		protected Texture2DSliced ();
+		[CCode (has_construct_function = false)]
+		[Version (since = "1.16")]
+		public Texture2DSliced.from_bitmap (Cogl.Bitmap bmp, int max_waste);
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "CoglHandle", ref_function = "cogl_vertex_buffer_ref", unref_function = "cogl_vertex_buffer_unref")]
 	[Compact]
@@ -468,7 +348,7 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_framebuffer_get_gtype ()")]
 	public interface Framebuffer : Cogl.Object {
 		[Version (since = "1.8")]
-		public Cogl.Bool allocate () throws GLib.Error;
+		public bool allocate () throws GLib.Error;
 		[Version (since = "1.8")]
 		public void clear (ulong buffers, Cogl.Color color);
 		[Version (since = "1.8")]
@@ -488,6 +368,7 @@ namespace Cogl {
 		public static uint32 error_quark ();
 		[Version (since = "1.10")]
 		public void finish ();
+		public void flush ();
 		[Version (since = "1.10")]
 		public void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
 		[Version (since = "1.8")]
@@ -495,22 +376,18 @@ namespace Cogl {
 		[Version (since = "1.8")]
 		public int get_blue_bits ();
 		[Version (since = "1.8")]
-		public Cogl.ColorMask get_color_mask ();
+		public unowned Cogl.Context get_context ();
 		[Version (since = "2.0")]
 		public int get_depth_bits ();
-		[Version (since = "1.14")]
-		public unowned Cogl.Texture get_depth_texture ();
-		[Version (since = "1.14")]
-		public Cogl.Bool get_depth_texture_enabled ();
 		[Version (since = "1.18")]
-		public Cogl.Bool get_depth_write_enabled ();
+		public bool get_depth_write_enabled ();
 		[Version (since = "1.8")]
-		public Cogl.Bool get_dither_enabled ();
+		public bool get_dither_enabled ();
 		[Version (since = "1.8")]
 		public int get_green_bits ();
 		[Version (since = "1.8")]
 		public int get_height ();
-		public Cogl.Bool get_is_stereo ();
+		public bool get_is_stereo ();
 		[Version (since = "1.10")]
 		public Cogl.Matrix get_modelview_matrix ();
 		[Version (since = "1.10")]
@@ -547,12 +424,13 @@ namespace Cogl {
 		public void push_matrix ();
 		[Version (since = "1.10")]
 		public void push_rectangle_clip (float x_1, float y_1, float x_2, float y_2);
+		public void push_region_clip (Cairo.Region region);
 		[Version (since = "1.10")]
 		public void push_scissor_clip (int x, int y, int width, int height);
 		[Version (since = "1.10")]
-		public Cogl.Bool read_pixels (int x, int y, int width, int height, Cogl.PixelFormat format, uint8 pixels);
+		public bool read_pixels (int x, int y, int width, int height, Cogl.PixelFormat format, uint8 pixels);
 		[Version (since = "1.10")]
-		public Cogl.Bool read_pixels_into_bitmap (int x, int y, Cogl.ReadPixelsFlags source, Cogl.Bitmap bitmap);
+		public bool read_pixels_into_bitmap (int x, int y, Cogl.ReadPixelsFlags source, Cogl.Bitmap bitmap);
 		[Version (since = "1.8")]
 		public void resolve_samples ();
 		[Version (since = "1.8")]
@@ -560,19 +438,13 @@ namespace Cogl {
 		[Version (since = "1.10")]
 		public void rotate (float angle, float x, float y, float z);
 		[Version (since = "2.0")]
-		public void rotate_euler (Cogl.Euler euler);
-		[Version (since = "2.0")]
-		public void rotate_quaternion (Cogl.Quaternion quaternion);
+		public void rotate_euler (Graphene.Euler euler);
 		[Version (since = "1.10")]
 		public void scale (float x, float y, float z);
-		[Version (since = "1.8")]
-		public void set_color_mask (Cogl.ColorMask color_mask);
-		[Version (since = "1.14")]
-		public void set_depth_texture_enabled (Cogl.Bool enabled);
 		[Version (since = "1.18")]
-		public void set_depth_write_enabled (Cogl.Bool depth_write_enabled);
+		public void set_depth_write_enabled (bool depth_write_enabled);
 		[Version (since = "1.8")]
-		public void set_dither_enabled (Cogl.Bool dither_enabled);
+		public void set_dither_enabled (bool dither_enabled);
 		[Version (since = "1.10")]
 		public void set_modelview_matrix (Cogl.Matrix matrix);
 		[Version (since = "1.10")]
@@ -588,6 +460,39 @@ namespace Cogl {
 		[Version (since = "1.10")]
 		public void translate (float x, float y, float z);
 	}
+	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_texture_get_gtype ()")]
+	public interface Texture : Cogl.Object {
+		public bool allocate () throws GLib.Error;
+		public static uint32 error_quark ();
+		[Version (since = "1.18")]
+		public Cogl.TextureComponents get_components ();
+		public int get_data (Cogl.PixelFormat format, uint rowstride, [CCode (array_length = false)] uint8[]? data);
+		public bool get_gl_texture (out uint out_gl_handle, out uint out_gl_target);
+		public uint get_height ();
+		public int get_max_waste ();
+		[Version (since = "1.18")]
+		public bool get_premultiplied ();
+		public uint get_width ();
+		public bool is_sliced ();
+		[Version (deprecated = true, deprecated_since = "1.18", since = "1.0")]
+		public static Cogl.Texture new_from_bitmap (Cogl.Bitmap bitmap, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
+		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
+		public static Cogl.Texture new_from_data (int width, int height, Cogl.TextureFlags flags, Cogl.PixelFormat format, Cogl.PixelFormat internal_format, int rowstride, [CCode (array_length = false)] uint8[] data);
+		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
+		public static Cogl.Texture new_from_file (string filename, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format) throws GLib.Error;
+		[Version (deprecated = true, deprecated_since = "1.18", since = "1.2")]
+		public Cogl.Texture new_from_sub_texture (int sub_x, int sub_y, int sub_width, int sub_height);
+		[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
+		public static Cogl.Texture new_with_size (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
+		[Version (since = "1.18")]
+		public void set_components (Cogl.TextureComponents components);
+		public bool set_data (Cogl.PixelFormat format, int rowstride, [CCode (array_length = false)] uint8[] data, int level) throws GLib.Error;
+		[Version (since = "1.18")]
+		public void set_premultiplied (bool premultiplied);
+		public bool set_region (int src_x, int src_y, int dst_x, int dst_y, uint dst_width, uint dst_height, int width, int height, Cogl.PixelFormat format, uint rowstride, [CCode (array_length = false)] uint8[] data);
+		[Version (since = "1.8")]
+		public bool set_region_from_bitmap (int src_x, int src_y, int dst_x, int dst_y, uint dst_width, uint dst_height, Cogl.Bitmap bitmap);
+	}
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[SimpleType]
 	public struct Angle : int32 {
@@ -635,10 +540,6 @@ namespace Cogl {
 		public void set_blue_byte (uint8 blue);
 		[Version (since = "1.4")]
 		public void set_blue_float (float blue);
-		[Version (deprecated = true, deprecated_since = "1.4", since = "1.0")]
-		public void set_from_4f (float red, float green, float blue, float alpha);
-		[Version (deprecated = true, deprecated_since = "1.4", since = "1.0")]
-		public void set_from_4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
 		[Version (since = "1.4")]
 		public void set_green (float green);
 		[Version (since = "1.4")]
@@ -662,7 +563,7 @@ namespace Cogl {
 		public weak string name;
 		public ulong instance_count;
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", type_id = "COGL_TYPE_MATRIX")]
+	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "COGL_TYPE_MATRIX")]
 	public struct Matrix {
 		public float xx;
 		public float yx;
@@ -689,32 +590,27 @@ namespace Cogl {
 		public void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
 		public unowned float[] get_array ();
 		[Version (since = "1.2")]
-		public Cogl.Bool get_inverse (out Cogl.Matrix inverse);
+		public bool get_inverse (out Cogl.Matrix inverse);
 		[CCode (cname = "cogl_matrix_init_identity")]
 		public Matrix.identity ();
-		public void init_from_euler (Cogl.Euler euler);
-		public void init_from_quaternion (Cogl.Quaternion quaternion);
+		public void init_from_euler (Graphene.Euler euler);
 		[Version (since = "2.0")]
 		public void init_translation (float tx, float ty, float tz);
 		[Version (since = "1.8")]
-		public Cogl.Bool is_identity ();
+		public bool is_identity ();
 		[Version (since = "1.8")]
 		public void look_at (float eye_position_x, float eye_position_y, float eye_position_z, float object_x, float object_y, float object_z, float world_up_x, float world_up_y, float world_up_z);
 		[CCode (cname = "cogl_matrix_multiply")]
 		public Matrix.multiply (Cogl.Matrix a, Cogl.Matrix b);
-		[Version (deprecated = true, deprecated_since = "1.10")]
-		public void ortho (float left, float right, float bottom, float top, float near, float far);
 		[Version (since = "1.10")]
 		public void orthographic (float x_1, float y_1, float x_2, float y_2, float near, float far);
 		public void perspective (float fov_y, float aspect, float z_near, float z_far);
 		public void project_points (int n_components, size_t stride_in, void* points_in, size_t stride_out, void* points_out, int n_points);
 		public void rotate (float angle, float x, float y, float z);
 		[Version (since = "2.0")]
-		public void rotate_euler (Cogl.Euler euler);
-		[Version (since = "2.0")]
-		public void rotate_quaternion (Cogl.Quaternion quaternion);
+		public void rotate_euler (Graphene.Euler euler);
 		public void scale (float sx, float sy, float sz);
-		public void transform_point (ref float x, ref float y, ref float z, ref float w);
+		public static void transform_point (ref Cogl.Matrix matrix, ref float x, ref float y, ref float z, ref float w);
 		public void transform_points (int n_components, size_t stride_in, void* points_in, size_t stride_out, void* points_out, int n_points);
 		public void translate (float x, float y, float z);
 		[Version (since = "1.10")]
@@ -801,16 +697,6 @@ namespace Cogl {
 		WINDOW_BUFFER,
 		OFFSCREEN_BUFFER
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_COLOR_MASK_", has_type_id = false)]
-	[Flags]
-	public enum ColorMask {
-		NONE,
-		RED,
-		GREEN,
-		BLUE,
-		ALPHA,
-		ALL
-	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_DEPTH_TEST_FUNCTION_", has_type_id = false)]
 	public enum DepthTestFunction {
 		NEVER,
@@ -822,46 +708,41 @@ namespace Cogl {
 		GEQUAL,
 		ALWAYS
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FEATURE_", has_type_id = false)]
+	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_EGL_IMAGE_FLAG_", has_type_id = false)]
 	[Flags]
-	[Version (since = "0.8")]
-	public enum FeatureFlags {
-		TEXTURE_RECTANGLE,
-		TEXTURE_NPOT,
-		TEXTURE_YUV,
-		TEXTURE_READ_PIXELS,
-		SHADERS_GLSL,
-		OFFSCREEN,
-		OFFSCREEN_MULTISAMPLE,
-		OFFSCREEN_BLIT,
-		FOUR_CLIP_PLANES,
-		STENCIL_BUFFER,
-		VBOS,
-		PBOS,
-		UNSIGNED_INT_INDICES,
-		DEPTH_RANGE,
-		TEXTURE_NPOT_BASIC,
-		TEXTURE_NPOT_MIPMAP,
-		TEXTURE_NPOT_REPEAT,
-		POINT_SPRITE,
-		TEXTURE_3D,
-		MAP_BUFFER_FOR_READ,
-		MAP_BUFFER_FOR_WRITE,
-		ONSCREEN_MULTIPLE,
-		DEPTH_TEXTURE
+	public enum EglImageFlags {
+		NONE,
+		NO_GET_DATA
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FEATURE_ID_", has_type_id = false)]
+	[Version (since = "1.10")]
+	public enum FeatureID {
+		[CCode (cname = "COGL_FEATURE_ID_UNSIGNED_INT_INDICES")]
+		OGL_FEATURE_ID_UNSIGNED_INT_INDICES,
+		[CCode (cname = "COGL_FEATURE_ID_MAP_BUFFER_FOR_READ")]
+		OGL_FEATURE_ID_MAP_BUFFER_FOR_READ,
+		[CCode (cname = "COGL_FEATURE_ID_MAP_BUFFER_FOR_WRITE")]
+		OGL_FEATURE_ID_MAP_BUFFER_FOR_WRITE,
+		[CCode (cname = "COGL_FEATURE_ID_SWAP_BUFFERS_EVENT")]
+		OGL_FEATURE_ID_SWAP_BUFFERS_EVENT,
+		[CCode (cname = "COGL_FEATURE_ID_PRESENTATION_TIME")]
+		OGL_FEATURE_ID_PRESENTATION_TIME,
+		[CCode (cname = "COGL_FEATURE_ID_FENCE")]
+		OGL_FEATURE_ID_FENCE,
+		[CCode (cname = "COGL_FEATURE_ID_TEXTURE_RG")]
+		OGL_FEATURE_ID_TEXTURE_RG,
+		[CCode (cname = "COGL_FEATURE_ID_BUFFER_AGE")]
+		OGL_FEATURE_ID_BUFFER_AGE,
+		[CCode (cname = "COGL_FEATURE_ID_TEXTURE_EGL_IMAGE_EXTERNAL")]
+		OGL_FEATURE_ID_TEXTURE_EGL_IMAGE_EXTERNAL,
+		[CCode (cname = "COGL_FEATURE_ID_BLIT_FRAMEBUFFER")]
+		OGL_FEATURE_ID_BLIT_FRAMEBUFFER
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FILTER_", has_type_id = false)]
 	public enum FilterReturn {
 		CONTINUE,
 		REMOVE
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FOG_MODE_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum FogMode {
-		LINEAR,
-		EXPONENTIAL,
-		EXPONENTIAL_SQUARED
-	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FRAME_EVENT_", has_type_id = false)]
 	[Version (since = "1.14")]
 	public enum FrameEvent {
@@ -874,6 +755,14 @@ namespace Cogl {
 		FRAMEBUFFER_ERROR_ALLOCATE;
 		public static uint32 quark ();
 	}
+	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_GRAPHICS_RESET_STATUS_", has_type_id = false)]
+	public enum GraphicsResetStatus {
+		NO_ERROR,
+		GUILTY_CONTEXT_RESET,
+		INNOCENT_CONTEXT_RESET,
+		UNKNOWN_CONTEXT_RESET,
+		PURGED_CONTEXT_RESET
+	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_INDICES_TYPE_UNSIGNED_", has_type_id = false)]
 	public enum IndicesType {
 		BYTE,
@@ -900,12 +789,6 @@ namespace Cogl {
 		NEAREST_MIPMAP_LINEAR,
 		LINEAR_MIPMAP_LINEAR
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_LAYER_TYPE_", has_type_id = false)]
-	[Version (since = "1.0")]
-	public enum MaterialLayerType {
-		[CCode (cname = "COGL_MATERIAL_LAYER_TYPE_TEXTURE")]
-		MATERIAL_LAYER_TYPE_TEXTURE
-	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_WRAP_MODE_", has_type_id = false)]
 	[Version (since = "1.4")]
 	public enum MaterialWrapMode {
@@ -970,6 +853,10 @@ namespace Cogl {
 		BGRA_1010102,
 		ARGB_2101010,
 		ABGR_2101010,
+		RGBA_FP_16161616,
+		BGRA_FP_16161616,
+		ARGB_FP_16161616,
+		ABGR_FP_16161616,
 		RGBA_8888_PRE,
 		BGRA_8888_PRE,
 		ARGB_8888_PRE,
@@ -980,9 +867,16 @@ namespace Cogl {
 		BGRA_1010102_PRE,
 		ARGB_2101010_PRE,
 		ABGR_2101010_PRE,
+		RGBA_FP_16161616_PRE,
+		BGRA_FP_16161616_PRE,
+		ARGB_FP_16161616_PRE,
+		ABGR_FP_16161616_PRE,
 		DEPTH_16,
 		DEPTH_32,
-		DEPTH_24_STENCIL_8
+		DEPTH_24_STENCIL_8;
+		public int get_bytes_per_pixel (int plane);
+		public int get_n_planes ();
+		public unowned string to_string ();
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_READ_PIXELS_COLOR_", has_type_id = false)]
 	[Flags]
@@ -1041,13 +935,6 @@ namespace Cogl {
 		NO_SLICING,
 		NO_ATLAS
 	}
-	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_TYPE_", has_type_id = false)]
-	[Version (since = "1.10")]
-	public enum TextureType {
-		@2D,
-		@3D,
-		RECTANGLE
-	}
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_VERTICES_MODE_", has_type_id = false)]
 	[Version (since = "1.0")]
 	public enum VerticesMode {
@@ -1067,7 +954,6 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_WINSYS_FEATURE_", has_type_id = false)]
 	public enum WinsysFeature {
 		MULTIPLE_ONSCREEN,
-		SWAP_THROTTLE,
 		VBLANK_COUNTER,
 		VBLANK_WAIT,
 		TEXTURE_FROM_PIXMAP,
@@ -1082,9 +968,12 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
 	[Version (since = "1.8")]
 	public delegate void DebugObjectForeachTypeCallback (Cogl.DebugObjectTypeInfo info);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-	public delegate Cogl.Bool MaterialLayerCallback (Cogl.Material material, int layer_index);
+	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
+	[Version (since = "0.10")]
+	public delegate void FeatureCallback (Cogl.FeatureID feature);
+	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 3.9)]
+	[Version (since = "1.14")]
+	public delegate void FrameCallback (Cogl.Onscreen onscreen, Cogl.FrameEvent event, Cogl.FrameInfo info);
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
 	[Version (since = "1.16")]
 	public delegate void OnscreenDirtyCallback (Cogl.Onscreen onscreen, Cogl.OnscreenDirtyInfo info);
@@ -1092,12 +981,10 @@ namespace Cogl {
 	[Version (since = "2.0")]
 	public delegate void OnscreenResizeCallback (Cogl.Onscreen onscreen, int width, int height);
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
-	public delegate void OnscreenX11MaskCallback (Cogl.Onscreen onscreen, uint32 event_mask);
-	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
 	[Version (since = "2.0")]
-	public delegate Cogl.Bool PipelineLayerCallback (Cogl.Pipeline pipeline, int layer_index);
+	public delegate bool PipelineLayerCallback (Cogl.Pipeline pipeline, int layer_index);
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
-	public delegate void SwapBuffersNotify (Cogl.Framebuffer framebuffer);
+	public delegate bool Texture2DEGLImageExternalAlloc (Cogl.Texture2D tex_2d) throws GLib.Error;
 	[CCode (cheader_filename = "cogl/cogl.h", has_target = false)]
 	public delegate void UserDataDestroyCallback (void* data);
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_AFIRST_BIT")]
@@ -1108,6 +995,8 @@ namespace Cogl {
 	public const int BGR_BIT;
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_DEPTH_BIT")]
 	public const int DEPTH_BIT;
+	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_PIXEL_FORMAT_MAX_PLANES")]
+	public const int PIXEL_FORMAT_MAX_PLANES;
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_PREMULT_BIT")]
 	public const int PREMULT_BIT;
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_STENCIL_BIT")]
@@ -1115,21 +1004,12 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_TEXTURE_MAX_WASTE")]
 	public const int TEXTURE_MAX_WASTE;
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void begin_gl ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.2")]
-	public static Cogl.Bool check_extension (string name, string ext);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void clear (Cogl.Color color, ulong buffers);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static Cogl.Bool clutter_check_extension_CLUTTER (string name, string ext);
+	public static bool blit_framebuffer (Cogl.Framebuffer src, Cogl.Framebuffer dest, int src_x, int src_y, int dst_x, int dst_y, int width, int height) throws GLib.Error;
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static Cogl.Bool clutter_winsys_has_feature_CLUTTER (Cogl.WinsysFeature feature);
+	public static bool clutter_winsys_has_feature_CLUTTER (Cogl.WinsysFeature feature);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.0")]
-	public static Cogl.Bool color_equal (void* v1, void* v2);
+	public static bool color_equal (void* v1, void* v2);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.16")]
 	public static void color_init_from_hsl (out Cogl.Color color, float hue, float saturation, float luminance);
@@ -1143,234 +1023,87 @@ namespace Cogl {
 	[Version (since = "1.8")]
 	public static void debug_object_print_instances ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void disable_fog ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void end_gl ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static Cogl.Bool features_available (Cogl.FeatureFlags features);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.0")]
 	public static void flush ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8.2")]
-	public static void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
+	[Version (since = "1.10")]
+	public static void foreach_feature (Cogl.Context context, Cogl.FeatureCallback callback);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.Bool get_backface_culling_enabled ();
+	public static bool get_backface_culling_enabled ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.8")]
-	public static void get_bitmasks (out int red, out int green, out int blue, out int alpha);
+	[Version (since = "1.14")]
+	public static int64 get_clock_time (Cogl.Context context);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.Bool get_depth_test_enabled ();
+	public static bool get_depth_test_enabled ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.8")]
-	public static unowned Cogl.Framebuffer get_draw_framebuffer ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
-	public static Cogl.FeatureFlags get_features ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static Cogl.Matrix get_modelview_matrix ();
+	public static Cogl.GraphicsResetStatus get_graphics_reset_status (Cogl.Context context);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
 	public static GLib.OptionGroup get_option_group ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static GLib.Callback get_proc_address (string s);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static Cogl.Matrix get_projection_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-	public static void* get_source ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void get_viewport ([CCode (array_length = false)] out float v[4]);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.18")]
 	public static GLib.Type gtype_matrix_get_type ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.10")]
-	public static Cogl.Bool is_framebuffer (void* object);
+	public static bool has_feature (Cogl.Context context, Cogl.FeatureID feature);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.10")]
-	public static Cogl.Bool is_onscreen (void* object);
+	public static bool is_context (void* object);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "2.0")]
-	public static Cogl.Bool is_pipeline (void* object);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.4")]
-	public static Cogl.Bool is_vertex_buffer_indices (Cogl.Handle handle);
+	public static bool is_frame_info (void* object);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.4")]
-	public static Cogl.Bool matrix_equal (void* v1, void* v2);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
-	public static void ortho (float left, float right, float bottom, float top, float near, float far);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void perspective (float fovy, float aspect, float z_near, float z_far);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void polygon (Cogl.TextureVertex vertices, uint n_vertices, Cogl.Bool use_color);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void pop_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-	public static void pop_source ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void push_matrix ();
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.6")]
-	public static void push_source (void* material);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static void rectangle (float x_1, float y_1, float x_2, float y_2);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void rectangle_with_multitexture_coords (float x1, float y1, float x2, float y2, [CCode (array_length = false)] float[] tex_coords, int tex_coords_len);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void rectangle_with_texture_coords (float x1, float y1, float x2, float y2, float tx1, float ty1, float tx2, float ty2);
+	[Version (since = "1.10")]
+	public static bool is_framebuffer (void* object);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "1.0")]
-	public static void rectangles ([CCode (array_length = false)] float[] verts, uint n_rects);
+	[Version (since = "1.10")]
+	public static bool is_onscreen (void* object);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "0.8.6")]
-	public static void rectangles_with_texture_coords ([CCode (array_length = false)] float[] verts, uint n_rects);
+	[Version (since = "2.0")]
+	public static bool is_pipeline (void* object);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void rotate (float angle, float x, float y, float z);
+	public static bool is_texture_2d (void* object);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void scale (float x, float y, float z);
+	[Version (since = "1.10")]
+	public static bool is_texture_2d_sliced (void* object);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void set_backface_culling_enabled (Cogl.Bool setting);
+	[Version (since = "1.4")]
+	public static bool matrix_equal (void* v1, void* v2);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void set_depth_test_enabled (Cogl.Bool setting);
+	public static void set_backface_culling_enabled (bool setting);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void set_fog (Cogl.Color fog_color, Cogl.FogMode mode, float density, float z_near, float z_far);
+	public static void set_depth_test_enabled (bool setting);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void set_modelview_matrix (Cogl.Matrix matrix);
+	public static void set_tracing_disabled_on_thread (void* data);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void set_projection_matrix (Cogl.Matrix matrix);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source (void* material);
+	public static void set_tracing_enabled_on_thread (void* data, string group, string filename);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_color (Cogl.Color color);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_color4f (float red, float green, float blue, float alpha);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_color4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
-	public static void set_source_texture (Cogl.Texture texture);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.8", since = "1.2")]
-	public static void set_viewport (int x, int y, int width, int height);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void shader_compile (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static string shader_get_info_log (Cogl.Handle handle);
+	public static void set_tracing_enabled_on_thread_with_fd (void* data, string group, int fd);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
 	public static Cogl.ShaderType shader_get_type (Cogl.Handle handle);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.Bool shader_is_compiled (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static unowned Cogl.Handle shader_ref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
 	public static void shader_source (Cogl.Handle shader, string source);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void shader_unref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.18", since = "1.0")]
 	public static Cogl.Texture texture_new_from_bitmap (Cogl.Bitmap bitmap, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-	public static Cogl.Texture texture_new_from_data (int width, int height, Cogl.TextureFlags flags, Cogl.PixelFormat format, Cogl.PixelFormat internal_format, int rowstride, uint8 data);
+	public static Cogl.Texture texture_new_from_data (int width, int height, Cogl.TextureFlags flags, Cogl.PixelFormat format, Cogl.PixelFormat internal_format, int rowstride, [CCode (array_length = false)] uint8[] data);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
 	public static Cogl.Texture texture_new_from_file (string filename, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format) throws GLib.Error;
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
-	public static Cogl.Texture texture_new_from_foreign (uint gl_handle, uint gl_target, uint width, uint height, uint x_pot_waste, uint y_pot_waste, Cogl.PixelFormat format);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.18", since = "0.8")]
 	public static Cogl.Texture texture_new_with_size (uint width, uint height, Cogl.TextureFlags flags, Cogl.PixelFormat internal_format);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "1.4")]
-	public static void transform (Cogl.Matrix matrix);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.10")]
-	public static void translate (float x, float y, float z);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_add (Cogl.Handle handle, string attribute_name, uint8 n_components, Cogl.AttributeType type, Cogl.Bool normalized, uint16 stride, void* pointer);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_delete (Cogl.Handle handle, string attribute_name);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_disable (Cogl.Handle handle, string attribute_name);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_draw (Cogl.Handle handle, Cogl.VerticesMode mode, int first, int count);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_draw_elements (Cogl.Handle handle, Cogl.VerticesMode mode, Cogl.Handle indices, int min_index, int max_index, int indices_offset, int count);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_enable (Cogl.Handle handle, string attribute_name);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static uint vertex_buffer_get_n_vertices (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static unowned Cogl.Handle vertex_buffer_indices_get_for_quads (uint n_indices);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static Cogl.IndicesType vertex_buffer_indices_get_type (Cogl.Handle indices);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static unowned Cogl.Handle vertex_buffer_new (uint n_vertices);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.2")]
-	public static unowned Cogl.Handle vertex_buffer_ref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.16")]
-	public static void vertex_buffer_submit (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.2")]
-	public static void vertex_buffer_unref (Cogl.Handle handle);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (deprecated = true, deprecated_since = "1.8", since = "0.8.2")]
-	public static void viewport (uint width, uint height);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static uint32 x11_onscreen_get_visual_xid (Cogl.Onscreen onscreen);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (since = "1.10")]
 	public static uint32 x11_onscreen_get_window_xid (Cogl.Onscreen onscreen);
-	[CCode (cheader_filename = "cogl/cogl.h")]
-	[Version (since = "2.0")]
-	public static void x11_onscreen_set_foreign_window_xid (Cogl.Onscreen onscreen, uint32 xid, [CCode (scope = "async")] Cogl.OnscreenX11MaskCallback update);
 }
diff --git vapi/polkit-gobject-1.vapi vapi/polkit-gobject-1.vapi
index 93eff8a5..fedc6a4a 100644
--- vapi/polkit-gobject-1.vapi
+++ vapi/polkit-gobject-1.vapi
@@ -7,7 +7,7 @@ namespace Polkit {
 		[CCode (has_construct_function = false)]
 		protected ActionDescription ();
 		public unowned string get_action_id ();
-		public unowned string get_annotation (string key);
+		public unowned string? get_annotation (string key);
 		[CCode (array_length = false, array_null_terminated = true)]
 		public unowned string[] get_annotation_keys ();
 		public unowned string get_description ();
@@ -34,7 +34,7 @@ namespace Polkit {
 		public Polkit.AuthorityFeatures get_backend_features ();
 		public unowned string get_backend_name ();
 		public unowned string get_backend_version ();
-		public string get_owner ();
+		public string? get_owner ();
 		public static Polkit.Authority get_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
 		public async bool register_authentication_agent (Polkit.Subject subject, string locale, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
 		public bool register_authentication_agent_sync (Polkit.Subject subject, string locale, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
@@ -56,21 +56,22 @@ namespace Polkit {
 	public class AuthorizationResult : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public AuthorizationResult (bool is_authorized, bool is_challenge, Polkit.Details? details);
-		public unowned Polkit.Details get_details ();
+		public unowned Polkit.Details? get_details ();
+		[Version (since = "0.101")]
 		public bool get_dismissed ();
 		public bool get_is_authorized ();
 		public bool get_is_challenge ();
 		public bool get_retains_authorization ();
-		public unowned string get_temporary_authorization_id ();
+		public unowned string? get_temporary_authorization_id ();
 	}
 	[CCode (cheader_filename = "polkit/polkit.h", type_id = "polkit_details_get_type ()")]
 	public class Details : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Details ();
 		[CCode (array_length = false, array_null_terminated = true)]
-		public string[] get_keys ();
+		public string[]? get_keys ();
 		public void insert (string key, string? value);
-		public unowned string lookup (string key);
+		public unowned string? lookup (string key);
 	}
 	[CCode (cheader_filename = "polkit/polkit.h", type_id = "polkit_permission_get_type ()")]
 	public class Permission : GLib.Permission, GLib.AsyncInitable, GLib.Initable {
@@ -88,7 +89,8 @@ namespace Polkit {
 		[CCode (has_construct_function = false)]
 		protected SystemBusName ();
 		public unowned string get_name ();
-		public Polkit.Subject get_process_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
+		public Polkit.Subject? get_process_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
+		public Polkit.UnixUser? get_user_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
 		public static Polkit.Subject @new (string name);
 		public void set_name (string name);
 		public string name { get; set construct; }
@@ -146,9 +148,10 @@ namespace Polkit {
 		protected UnixSession ();
 		public unowned string get_session_id ();
 		public static Polkit.Subject @new (string session_id);
-		public static async Polkit.Subject new_for_process (int pid, GLib.Cancellable? cancellable) throws GLib.Error;
-		public static Polkit.Subject new_for_process_sync (int pid, GLib.Cancellable? cancellable = null) throws GLib.Error;
+		public static async Polkit.Subject? new_for_process (int pid, GLib.Cancellable? cancellable) throws GLib.Error;
+		public static Polkit.Subject? new_for_process_sync (int pid, GLib.Cancellable? cancellable = null) throws GLib.Error;
 		public void set_session_id (string session_id);
+		[NoAccessorMethod]
 		public int pid { construct; }
 		public string session_id { get; set construct; }
 	}
@@ -156,17 +159,17 @@ namespace Polkit {
 	public class UnixUser : GLib.Object, Polkit.Identity {
 		[CCode (has_construct_function = false)]
 		protected UnixUser ();
-		public unowned string get_name ();
+		public unowned string? get_name ();
 		public int get_uid ();
 		public static Polkit.Identity @new (int uid);
-		public static Polkit.Identity new_for_name (string name) throws GLib.Error;
+		public static Polkit.Identity? new_for_name (string name) throws GLib.Error;
 		public void set_uid (int uid);
 		public int uid { get; set construct; }
 	}
 	[CCode (cheader_filename = "polkit/polkit.h", type_id = "polkit_identity_get_type ()")]
 	public interface Identity : GLib.Object {
 		public abstract bool equal (Polkit.Identity b);
-		public static Polkit.Identity from_string (string str) throws GLib.Error;
+		public static Polkit.Identity? from_string (string str) throws GLib.Error;
 		public abstract uint hash ();
 		public abstract string to_string ();
 	}
@@ -201,7 +204,7 @@ namespace Polkit {
 		ADMINISTRATOR_AUTHENTICATION_REQUIRED_RETAINED,
 		AUTHORIZED;
 		public static bool from_string (string string, Polkit.ImplicitAuthorization out_implicit_authorization);
-		public static unowned string to_string (Polkit.ImplicitAuthorization implicit_authorization);
+		public unowned string to_string ();
 	}
 	[CCode (cheader_filename = "polkit/polkit.h", cprefix = "POLKIT_ERROR_")]
 	public errordomain Error {
@@ -212,7 +215,7 @@ namespace Polkit {
 		public static GLib.Quark quark ();
 	}
 	[CCode (cheader_filename = "polkit/polkit.h")]
-	public static Polkit.Identity identity_from_string (string str) throws GLib.Error;
+	public static Polkit.Identity? identity_from_string (string str) throws GLib.Error;
 	[CCode (cheader_filename = "polkit/polkit.h")]
 	public static Polkit.Subject subject_from_string (string str) throws GLib.Error;
 }
-- 
2.28.0

