--- a/cmake/Util.cmake
+++ b/cmake/Util.cmake
@@ -162,7 +162,7 @@ endfunction()
 # Passing CMAKE_BUILD_TYPE for multi-config generators will now not only
 # not be used, but also generate a warning for the user.
 function(set_default_buildtype)
-  set(allowableBuildTypes Debug Release MinSizeRel RelWithDebInfo)
+  set(allowableBuildTypes Debug Release MinSizeRel RelWithDebInfo None)
 
   get_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
   if(isMultiConfig)
@@ -177,7 +177,7 @@ function(set_default_buildtype)
       message(STATUS "CMAKE_BUILD_TYPE not specified, default is 'Debug'")
       set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build" FORCE)
     elseif(NOT CMAKE_BUILD_TYPE IN_LIST allowableBuildTypes)
-      message(FATAL_ERROR "Invalid build type: ${CMAKE_BUILD_TYPE}")
+      message(WARNING "Invalid build type: ${CMAKE_BUILD_TYPE}")
     else()
       message(STATUS "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
     endif()
--- a/runtime/autoload/health/nvim.vim
+++ b/runtime/autoload/health/nvim.vim
@@ -135,7 +135,7 @@ function! s:check_performance() abort
   let buildtype = matchstr(execute('version'), '\v\cbuild type:?\s*[^\n\r\t ]+')
   if empty(buildtype)
     call health#report_error('failed to get build type from :version')
-  elseif buildtype =~# '\v(MinSizeRel|Release|RelWithDebInfo)'
+  elseif buildtype =~# '\v(MinSizeRel|Release|RelWithDebInfo|None)'
     call health#report_ok(buildtype)
   else
     call health#report_info(buildtype)
