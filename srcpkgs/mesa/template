# Template file for 'mesa'
pkgname=mesa
version=25.1.9
revision=1
build_style=meson
_llvmver=19
_syn_version=2.0.68
_proc_macro_version=1.0.86
_quote_version=1.0.33
_unicode_ident_version=1.0.12
_paste_version=1.0.14
#Disable LTO flag should be present, see https://gitlab.freedesktop.org/mesa/mesa/-/issues/6911
configure_args="-Dglvnd=true -Dgbm=enabled -Degl=enabled
 -Dgles1=enabled -Dgles2=enabled -Dglx=dri
 -Dlmsensors=enabled -Dplatforms=x11$(vopt_if wayland ,wayland)
 -Dllvm=enabled -Db_lto=false -Dcpp_std=gnu++17"
hostmakedepends="gettext flex pkg-config python3-Mako glslang llvm${_llvmver}
 $(vopt_if wayland 'wayland-protocols wayland-devel') python3-pycparser python3-yaml"
makedepends="elfutils-devel expat-devel libXdamage-devel
 libXxf86vm-devel libdrm-devel libffi-devel libva-devel
 libvdpau-devel libxshmfence-devel ncurses-devel zlib-devel
 $(vopt_if wayland 'wayland-devel wayland-protocols') llvm${_llvmver}-devel libsensors-devel
 libXrandr-devel libglvnd-devel libzstd-devel libxml2-devel lua53-devel
 libarchive-devel"
depends="libglvnd"
short_desc="Open source implementation of OpenGL and Vulkan"
maintainer="Orphaned <orphan@voidlinux.org>"
license="MIT, LGPL-2.1-or-later"
homepage="https://www.mesa3d.org/"
changelog="https://docs.mesa3d.org/relnotes.html"
distfiles="https://mesa3d.org/archive/mesa-${version}.tar.xz
 https://crates.io/api/v1/crates/syn/${_syn_version}/download>syn-${_syn_version}.tar.gz
 https://crates.io/api/v1/crates/proc-macro2/${_proc_macro_version}/download>proc-macro2-${_proc_macro_version}.tar.gz
 https://crates.io/api/v1/crates/quote/${_quote_version}/download>quote-${_quote_version}.tar.gz
 https://crates.io/api/v1/crates/unicode-ident/${_unicode_ident_version}/download>unicode-ident-${_unicode_ident_version}.tar.gz
 https://crates.io/api/v1/crates/paste/${_paste_version}/download>paste-${_paste_version}.tar.gz"
checksum="412df33a1bb3c785ed698555a3972118a37c458e7accf6ae53f4bb87b3db454a
 901fa70d88b9d6c98022e23b4136f9f3e54e4662c3bc1bd1d84a42a9a0f0c1e9
 5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77
 5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae
 3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b
 de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c"
skip_extraction="syn-${_syn_version}.tar.gz
 proc-macro2-${_proc_macro_version}.tar.gz
 quote-${_quote_version}.tar.gz
 unicode-ident-${_unicode_ident_version}.tar.gz
 paste-${_paste_version}.tar.gz"

build_helper="qemu"
build_options="wayland"
build_options_default="wayland"

# only use llvmpipe on targets where it's supported and reliable
# especially on big endian it's all kinds of broken, and e.g. on
# 32-bit powerpc it does not work at all, so fall back to softpipe
case "$XBPS_TARGET_MACHINE" in
	i686*|x86_64*|aarch64*|ppc64le*|arm*|riscv64*)
		_have_llvmpipe=yes
		;;
esac

# Set subpackages manually to set proper rdeps in 32bit pkgs.
subpackages="mesa-libgallium libgbm libgbm-devel"

# Replace old mesa pkgs, superseded by libglvnd.
replaces="libGL>=10_1<19.2.5_2 libEGL>=10_1<19.2.5_2 libGLES>=10_1<19.2.5_2"

# Driver configuration
# Check for correctness on major mesa version updates
# Particularly, check if any new worthwhile drivers were added

# softpipe always present
_gallium_drivers=" -Dgallium-drivers=softpipe"
_vulkan_drivers=" -Dvulkan-drivers="

# amd and nvidia drivers on all platforms except where it makes no sense
# amd implicitly enables clover opencl, also enable hwdec and virgl too
case "$XBPS_TARGET_MACHINE" in
	armv5*|mips*) ;;
	*)
		_have_nv=yes
		_have_amd=yes
		_have_hwdec=yes
		_have_virgl=yes
		;;
esac

# x86 additionally gets intel, vmware and gallium nine
# arm gets its own drivers (for mali, tegra etc.)
case "$XBPS_TARGET_MACHINE" in
	i686*|x86_64*)
		_have_intel=yes
		_have_vmware=yes
		_have_nine=yes
		;;
	armv[67]*|aarch64*)
		_have_arm=yes
		;;
esac

# Direct3D 12 for Hyper-V GPU-P / WSLg. This relies on additional
# closed-source drivers which are only available on 64-bit glibc.
case "$XBPS_TARGET_MACHINE" in
	aarch64|x86_64)
		_have_d3d12=yes
		;;
esac

if [ "$_have_llvmpipe" ]; then
	subpackages+=" mesa-vulkan-lavapipe"
	_vulkan_drivers+=",swrast"
	# note: swrast IS valid for vulkan drivers still, not gallium
else
	configure_args+=" -Ddraw-use-llvm=false"
fi

if [ "$_have_amd" ]; then
	# amd cards can use clover
	_have_opencl=yes
	_have_vulkan=yes
	_gallium_drivers+=",r300,r600,radeonsi"
	_vulkan_drivers+=",amd"
	subpackages+=" mesa-vulkan-radeon"
	# transitional dummy packages
	subpackages+=" mesa-ati-dri"
	configure_args+=" -Dvideo-codecs=all"
fi

if [ "$_have_intel" ]; then
	_have_vulkan=yes
	_gallium_drivers+=",crocus,iris,i915"
	_vulkan_drivers+=",intel,intel_hasvk"
	subpackages+=" mesa-vulkan-intel"
	# transitional dummy packages
	subpackages+=" mesa-intel-dri"
fi

if [ "$_have_nv" ]; then
	_gallium_drivers+=",nouveau"
	if [ "$_have_arm" ]; then
		_gallium_drivers+=",tegra"
		# transitional dummy packages
		subpackages+=" mesa-tegra-dri"
	fi
	_vulkan_drivers+=",nouveau"
	hostmakedepends+=" cbindgen"
	subpackages+=" mesa-vulkan-nouveau"
	# transitional dummy packages
	subpackages+=" mesa-nouveau-dri"
fi

if [ "$_have_arm" ]; then
	_have_vulkan=yes
	_have_opencl=yes
	_gallium_drivers+=",v3d,vc4,freedreno,etnaviv,lima,panfrost,asahi"
	_vulkan_drivers+=",broadcom,freedreno,panfrost,asahi"
	subpackages+=" mesa-vulkan-broadcom mesa-vulkan-freedreno mesa-vulkan-panfrost"
	# transitional dummy packages
	subpackages+=" mesa-kmsro-dri mesa-v3d-dri mesa-vc4-dri"
	subpackages+=" mesa-etnaviv-dri mesa-freedreno-dri"
	subpackages+=" mesa-lima-dri mesa-panfrost-dri"
fi

if [ "$_have_virgl" ]; then
	_gallium_drivers+=",virgl"
	_vulkan_drivers+=",virtio"
fi

if [ "$_have_nine" ]; then
	configure_args+=" -Dgallium-nine=true"
fi

if [ "$_have_vmware" ]; then
	_gallium_drivers+=",svga"
	configure_args+=" -Dgallium-xa=enabled"
	subpackages+=" libxatracker"
	# transitional dummy packages
	subpackages+=" mesa-vmwgfx-dri"
else
	configure_args+=" -Dgallium-xa=disabled"
fi

# enabled currently by amd drivers
if [ "$_have_opencl" ]; then
	hostmakedepends+=" clang${_llvmver} rust rust-bindgen"
	makedepends+=" clang${_llvmver} libclc${_llvmver} rust
	 SPIRV-LLVM-Translator${_llvmver}-devel SPIRV-Tools-devel"
	subpackages+=" mesa-opencl"
	configure_args+=" -Dgallium-opencl=icd -Dgallium-rusticl=true -Drust_std=2021"
fi

if [ "$_have_hwdec" ]; then
	configure_args+=" -Dgallium-vdpau=enabled -Dgallium-va=enabled"
	subpackages+=" mesa-vaapi mesa-vdpau"
else
	configure_args+=" -Dgallium-vdpau=disabled -Dgallium-va=disabled"
fi

if [ "$_have_d3d12" ]; then
	_gallium_drivers+=",d3d12"
	makedepends+=" DirectX-Headers"
fi

# empty values introduced by leading comma are not allowed; the whole enumeration can be empty
# _gallium_drivers is not affected by this problem
_vulkan_drivers=${_vulkan_drivers/=,/=}

configure_args+=" ${_vulkan_drivers}"

if [ "$_have_vulkan" ]; then
	_have_zink=yes
	configure_args+=" -Dvulkan-layers=device-select,overlay"
	if [ "$_have_intel" ]; then
		configure_args+=",intel-nullhw"
	fi
	subpackages+=" mesa-vulkan-overlay-layer"
fi

if [ "$_have_zink" ]; then
	_gallium_drivers+=",zink"
	makedepends+=" vulkan-loader-devel"
fi

configure_args+=" ${_gallium_drivers}"

# must be the last one for proper order
subpackages+=" mesa-dri MesaLib-devel"

case "$XBPS_TARGET_MACHINE" in
	ppc64le*) configure_args+=" -Dpower8=true" ;;
	ppc*) configure_args+=" -Dpower8=false" ;;
esac

_prepare_subproject() {
	local subname=$1
	local subversion=$2
	vsrcextract -C subprojects/${subname}-${subversion} ${subname}-${subversion}.tar.gz
	cp subprojects/packagefiles/${subname}/meson.build subprojects/${subname}-${subversion}
}

post_extract() {
	_prepare_subproject syn ${_syn_version}
	_prepare_subproject proc-macro2 ${_proc_macro_version}
	_prepare_subproject quote ${_quote_version}
	_prepare_subproject unicode-ident ${_unicode_ident_version}
	_prepare_subproject paste ${_paste_version}
}

post_configure() {
	if [ "$CROSS_BUILD" ]; then
		find -iname "*.ninja" -exec sed -i "{}" \
			-e "/rustc/s; --sysroot ${XBPS_CROSS_BASE}/usr;;g" \
			-e "s|-isystem/usr/include||g" \
		\;
	fi
}

post_install() {
	vlicense docs/license.rst

	# ensure that each eligible architecture ships its multilib icd files
	# in some cases, multiple counterpart architectures may exist (aarch64)
	# this allows us to not have to ship these files in the current *-32bit packages
	local arch=${XBPS_TARGET_MACHINE%-*}
	local oarchs
	local olibdir="/usr/lib32/"
	if [ "$XBPS_TARGET_WORDSIZE" = "32" ]; then
		olibdir="/usr/lib64/"
	fi
	case "${arch}" in
		aarch64) oarchs="armv6l armv7l";;
		armv[67]l) oarchs="aarch64";;
		x86_64) oarchs="i686";;
		i686) oarchs="x86_64";;
		ppc64le) oarchs="ppcle";;
		ppc64) oarchs="ppc";;
		ppcle) oarchs="ppc64le";;
		ppc) oarchs="ppc64";;
		riscv64) oarchs="riscv64";;
		*) ;; # no counterparts
	esac
	for oarch in $oarchs; do
		for icd in ${DESTDIR}/usr/share/vulkan/icd.d/*_icd.${arch}.json; do
			sed "s#/usr/lib${XBPS_TARGET_WORDSIZE}/#${olibdir}#g" \
				${icd} > ${icd/.${arch}/.${oarch}}
		done
	done
}

mesa-libgallium_package() {
	short_desc="Mesa internal shared platform for building graphics drivers"
	pkg_install() {
		vmove "usr/lib/libgallium-*.so"
	}
}

libgbm_package() {
	short_desc="Mesa Generic buffer management API - runtime"
	pkg_install() {
		vmove "usr/lib/libgbm.so.*"
	}
}

libgbm-devel_package() {
	short_desc="Mesa Generic buffer management API - development files"
	depends="libgbm>=${version}_${revision}"
	pkg_install() {
		vmove usr/include/gbm.h
		vmove usr/lib/libgbm.so
		vmove usr/lib/pkgconfig/gbm.pc
	}
}

MesaLib-devel_package() {
	depends="mesa>=${version}_${revision} libgbm-devel>=${version}_${revision}"
	if [ "$_have_vmware" ]; then
		depends+=" libxatracker>=${version}_${revision}"
	fi
	if [ "$_have_opencl" ]; then
		depends+=" mesa-opencl>=${version}_${revision}"
	fi
	depends+=" libdrm-devel libglvnd-devel"
	short_desc+=" - development files"
	pkg_install() {
		vmove usr/include
		vmove usr/lib/pkgconfig
		vmove usr/lib/libEGL_mesa.so
		vmove usr/lib/libGLX_mesa.so
		if [ "$_have_vmware" ]; then
			vmove usr/lib/libxatracker.so
		fi
		if [ "$_have_opencl" ]; then
			vmove usr/lib/libMesaOpenCL.so
			vmove usr/lib/libRusticlOpenCL.so
		fi
	}
}

libxatracker_package() {
	short_desc="Mesa XA tracker interface library"
	pkg_install() {
		vmove "usr/lib/libxatracker*.so.*"
	}
}

mesa-opencl_package() {
	short_desc="Mesa implementation of OpenCL (r600+ only)"
	depends="libclc${_llvmver}"
	pkg_install() {
		vmove etc/OpenCL
		vmove usr/lib/gallium-pipe
		vmove "usr/lib/libMesaOpenCL.so.*"
		vmove "usr/lib/libRusticlOpenCL.so.*"
	}
}

mesa-dri_package() {
	short_desc="Mesa DRI drivers"
	depends="mesa-${version}_${revision}"
	shlib_provides="libgallium_dri.so" # workaround for mesa-dri-32bit
	pkg_install() {
		vmove usr/lib/dri
	}
}

mesa-vaapi_package() {
	short_desc="Mesa VA-API drivers"
	shlib_provides="libgallium_drv_video.so" # workaround for mesa-vaapi-32bit
	pkg_install() {
		vmove "usr/lib/dri/*_drv_video.so"
	}
}

mesa-vdpau_package() {
	short_desc="Mesa VDPAU drivers"
	pkg_install() {
		vmove "usr/lib/vdpau/libvdpau_*"
	}
}

mesa-vulkan-intel_package() {
	short_desc="Mesa Intel Vulkan driver"
	pkg_install() {
		vmove "usr/share/vulkan/icd.d/intel*.json"
		vmove "usr/lib/libvulkan_intel*.so"
	}
}

mesa-vulkan-nouveau_package() {
	short_desc="Mesa Nouveau Vulkan driver"
	pkg_install() {
		vmove "usr/share/vulkan/icd.d/nouveau*.json"
		vmove "usr/lib/libvulkan_nouveau*.so"
	}
}

mesa-vulkan-radeon_package() {
	short_desc="Mesa Radeon Vulkan driver"
	pkg_install() {
		vmove "usr/share/drirc.d/00-radv-defaults.conf"
		vmove "usr/share/vulkan/icd.d/radeon_icd*.json"
		vmove "usr/lib/libvulkan_radeon.so"
	}
}

mesa-vulkan-broadcom_package() {
	short_desc="Mesa Broadcom Vulkan driver"
	pkg_install() {
		vmove "usr/share/vulkan/icd.d/broadcom_icd*.json"
		vmove "usr/lib/libvulkan_broadcom.so"
	}
}

mesa-vulkan-freedreno_package() {
	short_desc="Mesa Freedreno Vulkan driver"
	pkg_install() {
		vmove "usr/share/vulkan/icd.d/freedreno_icd*.json"
		vmove "usr/lib/libvulkan_freedreno.so"
	}
}

mesa-vulkan-panfrost_package() {
	short_desc="Mesa Panfrost Vulkan driver"
	pkg_install() {
		vmove "usr/share/vulkan/icd.d/panfrost_icd*.json"
		vmove "usr/lib/libvulkan_panfrost.so"
	}
}

mesa-vulkan-lavapipe_package() {
	short_desc="Mesa Lavapipe Vulkan driver"
	pkg_install() {
		vmove "usr/share/vulkan/icd.d/lvp_icd*.json"
		vmove "usr/lib/libvulkan_lvp*.so"
	}
}

mesa-vulkan-overlay-layer_package() {
	short_desc="Vulkan layer to display information about the running application"
	pkg_install() {
		vmove "usr/share/vulkan/explicit_layer.d/VkLayer_*.json"
		vmove "usr/share/vulkan/implicit_layer.d/VkLayer_*.json"
		vmove "usr/bin/mesa-overlay-control.py"
		vmove "usr/lib/libVkLayer_*.so"
	}
}

mesa-ati-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for ATI GPUs (transitional dummy package)"
	depends="mesa-dri mesa-vulkan-radeon"
	if [ "$_have_hwdec" ]; then
		depends+=" mesa-vaapi mesa-vdpau"
	fi
}

mesa-etnaviv-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for Vivante GPUs (transitional dummy package)"
	depends="mesa-dri"
}

mesa-freedreno-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for Adreno GPUs (transitional dummy package)"
	depends="mesa-dri"
}

mesa-intel-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for Intel GPUs (transitional dummy package)"
	depends="mesa-dri mesa-vulkan-intel"
}

mesa-kmsro-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="KMS Render-only Mesa DRI drivers (transitional dummy package)"
	depends="mesa-dri"
}

mesa-lima-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for Mali GPUs (Utgard) (transitional dummy package)"
	depends="mesa-dri"
}

mesa-nouveau-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for NVIDIA GPUs (transitional dummy package)"
	depends="mesa-dri"
	if [ "$_have_hwdec" ]; then
		depends+=" mesa-vaapi mesa-vdpau mesa-vulkan-nouveau"
	fi
}

mesa-panfrost-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for Mali GPUs (Midgard/Bifrost) (dummy package)"
	depends="mesa-dri"
}

mesa-tegra-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for Tegra GPU (transitional dummy package)"
	depends="mesa-dri"
}

mesa-v3d-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for Videocore VI GPU (transitional dummy package)"
	depends="mesa-dri"
}

mesa-vmwgfx-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for VMware (transitional dummy package)"
	depends="mesa-dri"
}

mesa-vc4-dri_package() {
	metapackage=yes
	lib32mode=full
	short_desc="Mesa DRI drivers for Videocore IV GPU (transitional dummy package)"
	depends="mesa-dri"
}
