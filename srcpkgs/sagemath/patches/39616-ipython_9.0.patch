diff --git a/src/sage/doctest/forker.py b/src/sage/doctest/forker.py
index 85af26d20ad..97c49a287a7 100644
--- a/src/sage/doctest/forker.py
+++ b/src/sage/doctest/forker.py
@@ -1490,6 +1490,7 @@ def report_failure(self, out, test, example, got, globs):
                     from sage.repl.configuration import sage_ipython_config
                     from IPython.terminal.embed import InteractiveShellEmbed
                     cfg = sage_ipython_config.default()
+                    cfg.InteractiveShell.enable_tip = False
                     # Currently this doesn't work: prompts only work in pty
                     # We keep simple_prompt=True, prompts will be "In [0]:"
                     # cfg.InteractiveShell.prompts_class = DebugPrompts
diff --git a/src/sage/repl/configuration.py b/src/sage/repl/configuration.py
index 7016e12837b..c64cc6bddb5 100644
--- a/src/sage/repl/configuration.py
+++ b/src/sage/repl/configuration.py
@@ -72,7 +72,7 @@ def colors(self):
         """
         Return the IPython color palette.
 
-        This returns ``'NoColor'`` during doctests to avoid ANSI escape
+        This returns ``'nocolor'`` during doctests to avoid ANSI escape
         sequences.
 
         EXAMPLES::
@@ -82,7 +82,7 @@ def colors(self):
             True
         """
         if not self._allow_ansi():
-            return 'NoColor'
+            return 'nocolor'
         from sage.repl.interpreter import SageTerminalInteractiveShell
         return SageTerminalInteractiveShell.colors.default()
 
diff --git a/src/sage/repl/ipython_extension.py b/src/sage/repl/ipython_extension.py
index 05468142142..e611e1d7da2 100644
--- a/src/sage/repl/ipython_extension.py
+++ b/src/sage/repl/ipython_extension.py
@@ -660,12 +660,13 @@ def init_line_transforms(self):
 
         Check that :issue:`31951` is fixed::
 
+             sage: # indirect doctest
              sage: from IPython import get_ipython
              sage: ip = get_ipython()
-             sage: ip.input_transformer_manager.check_complete('''  # indirect doctest
+             sage: ip.input_transformer_manager.check_complete('''
              ....: for i in [1 .. 2]:
              ....:     a = 2''')
-             ('incomplete', 2)
+             ('incomplete', 4)
              sage: ip.input_transformer_manager.check_complete('''
              ....: def foo(L)
              ....:     K.<a> = L''')
