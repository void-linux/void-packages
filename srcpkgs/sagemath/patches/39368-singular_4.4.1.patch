diff --git a/src/sage/categories/pushout.py b/src/sage/categories/pushout.py
index a2b5e910257..17f059f967f 100644
--- a/src/sage/categories/pushout.py
+++ b/src/sage/categories/pushout.py
@@ -3925,8 +3925,8 @@ class BlackBoxConstructionFunctor(ConstructionFunctor):
         sage: FS = BlackBoxConstructionFunctor(singular)
         sage: FS(QQ['t'])                                                               # needs sage.libs.singular
         polynomial ring, over a field, global ordering
-        //   coefficients: QQ
-        //   number of vars : 1
+        // coefficients: QQ...
+        // number of vars : 1
         //        block   1 : ordering lp
         //                  : names    t
         //        block   2 : ordering C
diff --git a/src/sage/interfaces/expect.py b/src/sage/interfaces/expect.py
index 91f8efcf651..ff424335d56 100644
--- a/src/sage/interfaces/expect.py
+++ b/src/sage/interfaces/expect.py
@@ -1328,8 +1328,8 @@ def _synchronize(self, cmd='1+%s;\n'):
             sage: R.<x> = QQ[]; f = x^3 + x + 1;  g = x^3 - x - 1; r = f.resultant(g); gap(ZZ); singular(R)
             Integers
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 1
+            // coefficients: QQ...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
             //        block   2 : ordering C
diff --git a/src/sage/interfaces/interface.py b/src/sage/interfaces/interface.py
index bd1095e8c70..22fb4b8487c 100644
--- a/src/sage/interfaces/interface.py
+++ b/src/sage/interfaces/interface.py
@@ -817,8 +817,8 @@ def __reduce__(self):
             sage: S = singular.ring(0, ('x'))
             sage: loads(dumps(S))
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 1
+            // coefficients: QQ...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
             //        block   2 : ordering C
diff --git a/src/sage/interfaces/singular.py b/src/sage/interfaces/singular.py
index d110c17bf16..59d01f4493d 100644
--- a/src/sage/interfaces/singular.py
+++ b/src/sage/interfaces/singular.py
@@ -39,8 +39,8 @@
     sage: R1 = singular.ring(0, '(x,y)', 'dp')
     sage: R1
     polynomial ring, over a field, global ordering
-    //   coefficients: QQ
-    //   number of vars : 2
+    // coefficients: QQ...
+    // number of vars : 2
     //        block   1 : ordering dp
     //                  : names    x y
     //        block   2 : ordering C
@@ -220,12 +220,12 @@
 
     sage: singular.lib('polylib.lib')
     sage: singular.ring(32003, '(a,b,c,d,e,f)', 'lp')
-            polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/32003
-            //   number of vars : 6
-            //        block   1 : ordering lp
-            //                        : names    a b c d e f
-            //        block   2 : ordering C
+    polynomial ring, over a field, global ordering
+    // coefficients: ZZ/32003...
+    // number of vars : 6
+    //        block   1 : ordering lp
+    //                        : names    a b c d e f
+    //        block   2 : ordering C
     sage: I = singular.ideal('cyclic(6)')
     sage: g = singular('groebner(I)')
     Traceback (most recent call last):
@@ -1074,8 +1074,8 @@ def ring(self, char=0, vars='(x)', order='lp', check=None):
             sage: R = singular.ring(0, '(x,y,z)', 'dp')
             sage: R
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 3
+            // coefficients: QQ...
+            // number of vars : 3
             //        block   1 : ordering dp
             //                  : names    x y z
             //        block   2 : ordering C
@@ -1153,16 +1153,16 @@ def set_ring(self, R):
             sage: S = singular.ring('real', '(a,b)', 'lp')
             sage: singular.current_ring()
             polynomial ring, over a field, global ordering
-            //   coefficients: Float()
-            //   number of vars : 2
+            // coefficients: Float()...
+            // number of vars : 2
             //        block   1 : ordering lp
             //                  : names    a b
             //        block   2 : ordering C
             sage: singular.set_ring(R)
             sage: singular.current_ring()
             polynomial ring, over a field, local ordering
-            //   coefficients: ZZ/7
-            //   number of vars : 2
+            // coefficients: ZZ/7...
+            // number of vars : 2
             //        block   1 : ordering ds
             //                  : names    a b
             //        block   2 : ordering C
@@ -1203,15 +1203,15 @@ def current_ring(self):
             sage: r = PolynomialRing(GF(127),3,'xyz', order='invlex')
             sage: r._singular_()
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/127
-            //   number of vars : 3
+            // coefficients: ZZ/127...
+            // number of vars : 3
             //        block   1 : ordering ip
             //                  : names    x y z
             //        block   2 : ordering C
             sage: singular.current_ring()
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/127
-            //   number of vars : 3
+            // coefficients: ZZ/127...
+            // number of vars : 3
             //        block   1 : ordering ip
             //                  : names    x y z
             //        block   2 : ordering C
@@ -1430,8 +1430,8 @@ def __copy__(self):
             sage: cpQ.set_ring()
             sage: cpQ
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 2
+            // coefficients: QQ...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
@@ -1996,8 +1996,8 @@ def _sage_(self, R=None):
 
             sage: singular('basering')
             polynomial ring, over a domain, global ordering
-            //   coefficients: ZZ
-            //   number of vars : 3
+            // coefficients: ZZ...
+            // number of vars : 3
             //        block   1 : ordering lp
             //                  : names    x y z
             //        block   2 : ordering C
@@ -2087,16 +2087,16 @@ def set_ring(self):
             sage: S = singular.ring('real', '(a,b)', 'lp')
             sage: singular.current_ring()
             polynomial ring, over a field, global ordering
-            //   coefficients: Float()
-            //   number of vars : 2
+            // coefficients: Float()...
+            // number of vars : 2
             //        block   1 : ordering lp
             //                  : names    a b
             //        block   2 : ordering C
             sage: R.set_ring()
             sage: singular.current_ring()
             polynomial ring, over a field, local ordering
-            //   coefficients: ZZ/7
-            //   number of vars : 2
+            // coefficients: ZZ/7...
+            // number of vars : 2
             //        block   1 : ordering ds
             //                  : names    a b
             //        block   2 : ordering C
diff --git a/src/sage/libs/singular/function.pyx b/src/sage/libs/singular/function.pyx
index 67cadf5d35c..87f0b7bab69 100644
--- a/src/sage/libs/singular/function.pyx
+++ b/src/sage/libs/singular/function.pyx
@@ -276,8 +276,8 @@ cdef class RingWrap:
             sage: l = ringlist(P)
             sage: ring = singular_function("ring")
             sage: ring(l, ring=P)._output()
-            //   coefficients: QQ
-            //   number of vars : 3
+            // coefficients: QQ...
+            // number of vars : 3
             //        block   1 : ordering dp
             //                  : names    x y z
             //        block   2 : ordering C
diff --git a/src/sage/libs/singular/ring.pyx b/src/sage/libs/singular/ring.pyx
index 1d8dd844385..4f7e288e2ad 100644
--- a/src/sage/libs/singular/ring.pyx
+++ b/src/sage/libs/singular/ring.pyx
@@ -159,8 +159,13 @@ cdef ring *singular_ring_new(base_ring, n, names, term_order) except NULL:
         sage: R.<x,y,z> = F[]
         sage: from sage.libs.singular.function import singular_function
         sage: sing_print = singular_function('print')
-        sage: sing_print(R)
-        'polynomial ring, over a field, global ordering\n// coefficients: ZZ/7(a, b)\n// number of vars : 3\n//        block   1 : ordering dp\n//                  : names    x y z\n//        block   2 : ordering C'
+        sage: print(sing_print(R))
+        polynomial ring, over a field, global ordering
+        // coefficients: ZZ/7(a, b)...
+        // number of vars : 3
+        //        block   1 : ordering dp
+        //                  : names    x y z
+        //        block   2 : ordering C
 
     ::
 
@@ -168,8 +173,13 @@ cdef ring *singular_ring_new(base_ring, n, names, term_order) except NULL:
         sage: R.<x,y,z> = F[]
         sage: from sage.libs.singular.function import singular_function
         sage: sing_print = singular_function('print')
-        sage: sing_print(R)
-        'polynomial ring, over a field, global ordering\n// coefficients: QQ(s, t)\n// number of vars : 3\n//        block   1 : ordering dp\n//                  : names    x y z\n//        block   2 : ordering C'
+        sage: print(sing_print(R))
+        polynomial ring, over a field, global ordering
+        // coefficients: QQ(s, t)...
+        // number of vars : 3
+        //        block   1 : ordering dp
+        //                  : names    x y z
+        //        block   2 : ordering C
     """
     cdef long cexponent
     cdef GFInfo* _param
diff --git a/src/sage/rings/polynomial/multi_polynomial_libsingular.pyx b/src/sage/rings/polynomial/multi_polynomial_libsingular.pyx
index adf3df1cf95..bab5935004b 100644
--- a/src/sage/rings/polynomial/multi_polynomial_libsingular.pyx
+++ b/src/sage/rings/polynomial/multi_polynomial_libsingular.pyx
@@ -619,8 +619,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
 
             sage: P._singular_()
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 3
+            // coefficients: QQ...
+            // number of vars : 3
             //        block   1 : ordering dp
             //                  : names    x y z
             //        block   2 : ordering C
@@ -1182,8 +1182,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: P.<x,y,z> = QQ[]
             sage: P._singular_()
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 3
+            // coefficients: QQ...
+            // number of vars : 3
             //        block   1 : ordering dp
             //                  : names    x y z
             //        block   2 : ordering C
@@ -1198,8 +1198,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: P.<x,y,z> = PolynomialRing(k, 3)                                      # needs sage.rings.finite_rings
             sage: P._singular_()                                                        # needs sage.rings.finite_rings
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/3[a]/(a^3-a+1)
-            //   number of vars : 3
+            // coefficients: ZZ/3[a]/(a^3-a+1)...
+            // number of vars : 3
             //        block   1 : ordering dp
             //                  : names    x y z
             //        block   2 : ordering C
@@ -1215,8 +1215,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: P.<x> = QQ[]
             sage: P._singular_()
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 1
+            // coefficients: QQ...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
             //        block   2 : ordering C
@@ -1257,8 +1257,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: P.<x,y,z> = QQ[]
             sage: P._singular_init_()
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 3
+            // coefficients: QQ...
+            // number of vars : 3
             //        block   1 : ordering dp
             //                  : names    x y z
             //        block   2 : ordering C
@@ -1272,8 +1272,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R.<x,y> = PolynomialRing(NumberField(w^2 + 1,'s'))                    # needs sage.rings.number_field
             sage: singular(R)                                                           # needs sage.rings.number_field
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ[s]/(s^2+1)
-            //   number of vars : 2
+            // coefficients: QQ[s]/(s^2+1)...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
@@ -1281,8 +1281,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R = PolynomialRing(GF(2**8,'a'),10,'x', order='invlex')               # needs sage.rings.finite_rings
             sage: singular(R)                                                           # needs sage.rings.finite_rings
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/2[a]/(a^8+a^4+a^3+a^2+1)
-            //   number of vars : 10
+            // coefficients: ZZ/2[a]/(a^8+a^4+a^3+a^2+1)...
+            // number of vars : 10
             //        block   1 : ordering ip
             //                  : names    x0 x1 x2 x3 x4 x5 x6 x7 x8 x9
             //        block   2 : ordering C
@@ -1290,8 +1290,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R = PolynomialRing(GF(127),2,'x', order='invlex')
             sage: singular(R)                                                           # needs sage.rings.finite_rings
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/127
-            //   number of vars : 2
+            // coefficients: ZZ/127...
+            // number of vars : 2
             //        block   1 : ordering ip
             //                  : names    x0 x1
             //        block   2 : ordering C
@@ -1299,8 +1299,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R = PolynomialRing(QQ,2,'x', order='invlex')
             sage: singular(R)                                                           # needs sage.rings.function_field
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 2
+            // coefficients: QQ...
+            // number of vars : 2
             //        block   1 : ordering ip
             //                  : names    x0 x1
             //        block   2 : ordering C
@@ -1308,8 +1308,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R = PolynomialRing(QQ,2,'x', order='degneglex')
             sage: singular(R)                                                           # needs sage.rings.function_field
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 2
+            // coefficients: QQ...
+            // number of vars : 2
             //        block   1 : ordering a
             //                  : names    x0 x1
             //                  : weights   1  1
@@ -1320,8 +1320,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R = PolynomialRing(QQ,'x')
             sage: singular(R)                                                           # needs sage.rings.function_field
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 1
+            // coefficients: QQ...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
             //        block   2 : ordering C
@@ -1329,8 +1329,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R = PolynomialRing(GF(127),'x')
             sage: singular(R)                                                           # needs sage.rings.finite_rings
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/127
-            //   number of vars : 1
+            // coefficients: ZZ/127...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
             //        block   2 : ordering C
@@ -1338,8 +1338,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R = ZZ['x,y']
             sage: singular(R)                                                           # needs sage.rings.function_field
             polynomial ring, over a domain, global ordering
-            //   coefficients: ZZ
-            //   number of vars : 2
+            // coefficients: ZZ...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
@@ -1347,8 +1347,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R = IntegerModRing(1024)['x,y']
             sage: singular(R)                                                           # needs sage.rings.function_field
             polynomial ring, over a ring (with zero-divisors), global ordering
-            //   coefficients: ZZ/(2^10)
-            //   number of vars : 2
+            // coefficients: ZZ/(2^10)...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
@@ -1356,8 +1356,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: R = IntegerModRing(15)['x,y']
             sage: singular(R)                                                           # needs sage.rings.function_field
             polynomial ring, over a ring (with zero-divisors), global ordering
-            //   coefficients: ZZ/...(15)
-            //   number of vars : 2
+            // coefficients: ZZ/(15)...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
@@ -1367,8 +1367,8 @@ cdef class MPolynomialRing_libsingular(MPolynomialRing_base):
             sage: P.<x> = QQ[]
             sage: P._singular_init_()
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 1
+            // coefficients: QQ...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
             //        block   2 : ordering C
diff --git a/src/sage/rings/polynomial/pbori/pbori.pyx b/src/sage/rings/polynomial/pbori/pbori.pyx
index 14a929c3238..404771a2c85 100644
--- a/src/sage/rings/polynomial/pbori/pbori.pyx
+++ b/src/sage/rings/polynomial/pbori/pbori.pyx
@@ -1425,8 +1425,8 @@ cdef class BooleanPolynomialRing(BooleanPolynomialRing_base):
             sage: B.<x,y> = BooleanPolynomialRing(2)
             sage: B._singular_() # indirect doctest
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/2
-            //   number of vars : 2
+            // coefficients: ZZ/2...
+            // number of vars : 2
             //        block   1 : ordering lp
             //                  : names    x y
             //        block   2 : ordering C
diff --git a/src/sage/rings/polynomial/polynomial_quotient_ring.py b/src/sage/rings/polynomial/polynomial_quotient_ring.py
index 115647adadf..627765cf8f0 100644
--- a/src/sage/rings/polynomial/polynomial_quotient_ring.py
+++ b/src/sage/rings/polynomial/polynomial_quotient_ring.py
@@ -749,8 +749,8 @@ def _singular_init_(self, S=None):
             sage: Q = P.quo([(x^2 + 1)])
             sage: singular(Q)        # indirect doctest                                 # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 1
+            // coefficients: QQ...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    xbar
             //        block   2 : ordering C
diff --git a/src/sage/rings/polynomial/polynomial_singular_interface.py b/src/sage/rings/polynomial/polynomial_singular_interface.py
index 60d2dd74b52..10bbc6d6ec0 100644
--- a/src/sage/rings/polynomial/polynomial_singular_interface.py
+++ b/src/sage/rings/polynomial/polynomial_singular_interface.py
@@ -62,7 +62,7 @@ def _do_singular_init_(singular, base_ring, char, _vars, order):
         sage: from sage.rings.polynomial.polynomial_singular_interface import _do_singular_init_
         sage: _do_singular_init_(singular, ZZ, 0, 'X', 'dp')                            # needs sage.libs.singular
         (polynomial ring, over a domain, global ordering
-         // coefficients: ZZ
+         // coefficients: ZZ...
          // number of vars : 1
          //        block   1 : ordering dp
          //                  : names    X
@@ -196,7 +196,7 @@ def _singular_(self, singular=None):
             sage: R.<x,y> = PolynomialRing(CC)                                          # needs sage.rings.real_mpfr
             sage: singular(R)                                                           # needs sage.libs.singular sage.rings.real_mpfr
             polynomial ring, over a field, global ordering
-            // coefficients: real[I](complex:15 digits, additional 0 digits)/(I^2+1)
+            // coefficients: real[I](complex:15 digits, additional 0 digits)/(I^2+1)...
             // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
@@ -205,7 +205,7 @@ def _singular_(self, singular=None):
             sage: R.<x,y> = PolynomialRing(RealField(100))                              # needs sage.rings.real_mpfr
             sage: singular(R)                                                           # needs sage.libs.singular sage.rings.real_mpfr
             polynomial ring, over a field, global ordering
-            // coefficients: Float()
+            // coefficients: Float()...
             // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
@@ -215,8 +215,8 @@ def _singular_(self, singular=None):
             sage: R.<x> = PolynomialRing(NumberField(w^2 + 1, 's'))                     # needs sage.rings.number_field
             sage: singular(R)                                                           # needs sage.libs.singular sage.rings.number_field
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ[s]/(s^2+1)
-            //   number of vars : 1
+            // coefficients: QQ[s]/(s^2+1)...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
             //        block   2 : ordering C
@@ -224,8 +224,8 @@ def _singular_(self, singular=None):
             sage: R = PolynomialRing(GF(127), 'x', implementation='singular')           # needs sage.libs.singular
             sage: singular(R)                                                           # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/127
-            //   number of vars : 1
+            // coefficients: ZZ/127...
+            // number of vars : 1
             //        block   1 : ordering dp
             //                  : names    x
             //        block   2 : ordering C
@@ -233,8 +233,8 @@ def _singular_(self, singular=None):
             sage: R = PolynomialRing(QQ, 'x', implementation='singular')                # needs sage.libs.singular
             sage: singular(R)                                                           # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 1
+            // coefficients: QQ...
+            // number of vars : 1
             //        block   1 : ordering dp
             //                  : names    x
             //        block   2 : ordering C
@@ -242,8 +242,8 @@ def _singular_(self, singular=None):
             sage: R = PolynomialRing(QQ,'x')
             sage: singular(R)                                                           # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 1
+            // coefficients: QQ...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
             //        block   2 : ordering C
@@ -251,8 +251,8 @@ def _singular_(self, singular=None):
             sage: R = PolynomialRing(GF(127), 'x')
             sage: singular(R)                                                           # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/127
-            //   number of vars : 1
+            // coefficients: ZZ/127...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
             //        block   2 : ordering C
@@ -260,8 +260,8 @@ def _singular_(self, singular=None):
             sage: R = Frac(ZZ['a,b'])['x,y']
             sage: singular(R)                                                           # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ(a, b)
-            //   number of vars : 2
+            // coefficients: QQ(a, b)...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
@@ -270,8 +270,8 @@ def _singular_(self, singular=None):
             sage: R = IntegerModRing(1024)['x,y']
             sage: singular(R)                                                           # needs sage.libs.singular
             polynomial ring, over a ring (with zero-divisors), global ordering
-            //   coefficients: ZZ/(2^10)
-            //   number of vars : 2
+            // coefficients: ZZ/(2^10)...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
@@ -279,8 +279,8 @@ def _singular_(self, singular=None):
             sage: R = IntegerModRing(15)['x,y']
             sage: singular(R)                                                           # needs sage.libs.singular
             polynomial ring, over a ring (with zero-divisors), global ordering
-            //   coefficients: ZZ/...(15)
-            //   number of vars : 2
+            // coefficients: ZZ/(15)...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
@@ -288,8 +288,8 @@ def _singular_(self, singular=None):
             sage: R = ZZ['x,y']
             sage: singular(R)                                                           # needs sage.libs.singular
             polynomial ring, over a domain, global ordering
-            //   coefficients: ZZ
-            //   number of vars : 2
+            // coefficients: ZZ...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
@@ -297,7 +297,7 @@ def _singular_(self, singular=None):
             sage: R = ZZ['x']
             sage: singular(R)                                                           # needs sage.libs.singular
             polynomial ring, over a domain, global ordering
-            // coefficients: ZZ
+            // coefficients: ZZ...
             // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    x
@@ -310,8 +310,8 @@ def _singular_(self, singular=None):
             sage: S = K['y']
             sage: singular(S)                                                           # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/5(x)
-            //   number of vars : 2
+            // coefficients: ZZ/5(x)...
+            // number of vars : 2
             //        block   1 : ordering lp
             //                  : names    a y
             //        block   2 : ordering C
@@ -353,8 +353,8 @@ def _singular_init_(self, singular=None):
 
             sage: PolynomialRing(QQ,'u_ba')._singular_init_()                           # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 1
+            // coefficients: QQ...
+            // number of vars : 1
             //        block   1 : ordering lp
             //                  : names    u_ba
             //        block   2 : ordering C
diff --git a/src/sage/rings/polynomial/term_order.py b/src/sage/rings/polynomial/term_order.py
index a88568248ce..f8ddd0a9652 100644
--- a/src/sage/rings/polynomial/term_order.py
+++ b/src/sage/rings/polynomial/term_order.py
@@ -660,7 +660,7 @@ def __init__(self, name='lex', n=0, force=False):
             sage: R.<x,y,z> = PolynomialRing(QQ, order=T)
             sage: R._singular_()                                                        # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            // coefficients: QQ
+            // coefficients: QQ...
             // number of vars : 3
             //        block   1 : ordering dp
             //                  : names    x y z
@@ -676,7 +676,7 @@ def __init__(self, name='lex', n=0, force=False):
             False
             sage: S._singular_()                                                        # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            // coefficients: QQ
+            // coefficients: QQ...
             // number of vars : 3
             //        block   1 : ordering C
             //        block   2 : ordering dp
@@ -1661,8 +1661,8 @@ def singular_str(self):
             '(lp(3),Dp(5),lp(2))'
             sage: P._singular_()                                                        # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/127
-            //   number of vars : 10
+            // coefficients: ZZ/127...
+            // number of vars : 10
             //        block   1 : ordering lp
             //                  : names    x0 x1 x2
             //        block   2 : ordering Dp
@@ -1687,8 +1687,8 @@ def singular_str(self):
             '(a(1:2),ls(2),a(1:2),ls(2))'
             sage: P._singular_()                                                        # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 4
+            // coefficients: QQ...
+            // number of vars : 4
             //        block   1 : ordering a
             //                  : names    x0 x1
             //                  : weights   1  1
@@ -1709,7 +1709,7 @@ def singular_str(self):
             sage: P = PolynomialRing(QQ, 4, names='x', order=T)
             sage: P._singular_()                                                        # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            // coefficients: QQ
+            // coefficients: QQ...
             // number of vars : 4
             //        block   1 : ordering C
             //        block   2 : ordering a
@@ -1727,7 +1727,7 @@ def singular_str(self):
             sage: P = PolynomialRing(QQ, 4, names='y', order=T)
             sage: P._singular_()                                                        # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            // coefficients: QQ
+            // coefficients: QQ...
             // number of vars : 4
             //        block   1 : ordering c
             //        block   2 : ordering a
@@ -1745,7 +1745,7 @@ def singular_str(self):
             sage: P = PolynomialRing(QQ, 4, names='z', order=T)
             sage: P._singular_()                                                        # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            // coefficients: QQ
+            // coefficients: QQ...
             // number of vars : 4
             //        block   1 : ordering a
             //                  : names    z0 z1
@@ -2183,7 +2183,7 @@ def termorder_from_singular(S):
         sage: # needs sage.libs.singular
         sage: singular.ring(0, '(x,y,z,w)', '(C,dp(2),lp(2))')
         polynomial ring, over a field, global ordering
-        // coefficients: QQ
+        // coefficients: QQ...
         // number of vars : 4
         //        block   1 : ordering C
         //        block   2 : ordering dp
@@ -2201,7 +2201,7 @@ def termorder_from_singular(S):
         sage: # needs sage.libs.singular
         sage: singular.ring(0, '(x,y,z,w)', '(c,dp(2),lp(2))')
         polynomial ring, over a field, global ordering
-        // coefficients: QQ
+        // coefficients: QQ...
         // number of vars : 4
         //        block   1 : ordering c
         //        block   2 : ordering dp
diff --git a/src/sage/rings/quotient_ring.py b/src/sage/rings/quotient_ring.py
index 1043333a63e..45f8147cde9 100644
--- a/src/sage/rings/quotient_ring.py
+++ b/src/sage/rings/quotient_ring.py
@@ -1268,8 +1268,8 @@ def _singular_(self, singular=None):
             sage: S = R.quotient_ring(x^2 + y^2)
             sage: S._singular_()                                                        # needs sage.libs.singular
             polynomial ring, over a field, global ordering
-            //   coefficients: QQ
-            //   number of vars : 2
+            // coefficients: QQ...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
diff --git a/src/sage/rings/quotient_ring_element.py b/src/sage/rings/quotient_ring_element.py
index 6699ae9f74b..9f05c54f21c 100644
--- a/src/sage/rings/quotient_ring_element.py
+++ b/src/sage/rings/quotient_ring_element.py
@@ -813,8 +813,8 @@ def _singular_(self, singular=None):
             sage: Q = P.quo(I)
             sage: Q._singular_()
             polynomial ring, over a field, global ordering
-            //   coefficients: ZZ/2
-            //   number of vars : 2
+            // coefficients: ZZ/2...
+            // number of vars : 2
             //        block   1 : ordering dp
             //                  : names    x y
             //        block   2 : ordering C
