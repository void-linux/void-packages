diff --git a/src/sage/libs/eclib/__init__.pxd b/src/sage/libs/eclib/__init__.pxd
index d44d4fba865..2673af0613f 100644
--- a/src/sage/libs/eclib/__init__.pxd
+++ b/src/sage/libs/eclib/__init__.pxd
@@ -55,7 +55,6 @@ cdef extern from "eclib/matrix.h":
     cdef cppclass mat:
         mat()
         mat(mat m)
-        scalar* get_entries()
         scalar sub(long, long)
         long nrows()
         long ncols()
@@ -67,7 +66,6 @@ cdef extern from "eclib/smatrix.h":
     cdef cppclass smat:
         smat()
         smat(smat m)
-        scalar* get_entries()
         scalar sub(long, long)
         long nrows()
         long ncols()
diff --git a/src/sage/libs/eclib/mat.pyx b/src/sage/libs/eclib/mat.pyx
index bfdeb6ae5c1..989d9d1a70c 100644
--- a/src/sage/libs/eclib/mat.pyx
+++ b/src/sage/libs/eclib/mat.pyx
@@ -11,7 +11,6 @@ from sage.matrix.matrix_integer_sparse cimport Matrix_integer_sparse
 from sage.matrix.matrix_integer_dense cimport Matrix_integer_dense
 from sage.rings.integer cimport Integer
 
-
 cdef class Matrix:
     """
     A Cremona Matrix.
@@ -212,8 +211,7 @@ cdef class Matrix:
             <class 'sage.matrix.matrix_integer_dense.Matrix_integer_dense'>
         """
         cdef long n = self.nrows()
-        cdef long i, j, k
-        cdef scalar* v = <scalar*> self.M.get_entries()   # coercion needed to deal with const
+        cdef long i, j
 
         cdef Matrix_integer_dense Td
         cdef Matrix_integer_sparse Ts
@@ -221,21 +219,19 @@ cdef class Matrix:
         # Ugly code...
         if sparse:
             Ts = MatrixSpace(ZZ, n, sparse=sparse).zero_matrix().__copy__()
-            k = 0
             for i from 0 <= i < n:
                 for j from 0 <= j < n:
-                    if v[k]:
-                        Ts.set_unsafe(i, j, Integer(v[k]))
-                    k += 1
+                    Mij = Integer(self.M.sub(i+1,j+1))
+                    if Mij:
+                        Ts.set_unsafe(i, j, Mij)
             return Ts
         else:
             Td = MatrixSpace(ZZ, n, sparse=sparse).zero_matrix().__copy__()
-            k = 0
             for i from 0 <= i < n:
                 for j from 0 <= j < n:
-                    if v[k]:
-                        Td.set_unsafe(i, j, Integer(v[k]))
-                    k += 1
+                    Mij = Integer(self.M.sub(i+1,j+1))
+                    if Mij:
+                        Td.set_unsafe(i, j, Mij)
             return Td
 
 
