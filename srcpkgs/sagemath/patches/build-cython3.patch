diff --git a/src/sage/ext/stdsage.pxd b/src/sage/ext/stdsage.pxd
index 15abe13b7cd..e2bf7434f35 100644
--- a/src/sage/ext/stdsage.pxd
+++ b/src/sage/ext/stdsage.pxd
@@ -10,7 +10,7 @@ Standard C helper code for Cython modules
 #                  http://www.gnu.org/licenses/
 #*****************************************************************************
 
-from cpython.object cimport Py_TYPE, PyTypeObject
+from cpython.object cimport Py_TYPE, PyTypeObject, PyObject
 
 
 cdef inline PY_NEW(type t):
@@ -19,7 +19,7 @@ cdef inline PY_NEW(type t):
     :class:`Integer` where we change ``tp_new`` at runtime (Cython
     optimizations assume that ``tp_new`` doesn't change).
     """
-    return (<PyTypeObject*>t).tp_new(t, <object>NULL, <object>NULL)
+    return (<PyTypeObject*>t).tp_new(t, <PyObject*>NULL, <PyObject*>NULL)
 
 
 cdef inline void PY_SET_TP_NEW(type dst, type src):
diff --git a/src/sage_setup/cython_options.py b/src/sage_setup/cython_options.py
index 086aa070ca9..9725ce0e1af 100644
--- a/src/sage_setup/cython_options.py
+++ b/src/sage_setup/cython_options.py
@@ -10,13 +10,17 @@ def compiler_directives(profile: bool):
         auto_pickle=False,
         # Do not create __test__ dictionary automatically from docstrings
         autotestdict=False,
+        binding=False,
+        c_api_binop_methods=True,
         # Do not check for division by 0 (this is about 35% quicker than with check)
         cdivision=True,
+        cpow=True,
         # Embed a textual copy of the call signature in the docstring (to support tools like IPython)
         embedsignature=True,
         fast_getattr=True,
         # Use Python 3 (including source code semantics) for module compilation
         language_level="3",
+        legacy_implicit_noexcept=True,
         # Enable support for late includes (make declarations in Cython code available to C include files)
         preliminary_late_includes_cy28=True,
         # Add hooks for Python profilers into the compiled C code
