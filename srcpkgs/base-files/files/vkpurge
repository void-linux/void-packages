#!/bin/sh
#
# A simple script to remove old kernel files/modules.
# Brought to you by yours truly Juan RP in the Public Domain.
#
: "${progname:="$(basename "$0")"}"

case "$(xbps-uhelper arch)" in
    aarch64*) KIMAGE="vmlinux";;
    *) KIMAGE="vmlinuz";;
esac

usage()
{
	cat <<_EOF
Usage: $progname <MODE> [<VERSION>]

MODE
 list [<VERSION>]		lists old kernels
 rm (all | <VERSION>...)	remove old kernels

Examples:
	$ $progname list
	$ $progname list 4.18.*
	$ $progname rm all
	$ $progname rm 4.18.17_1 4.18.17_2
	$ $progname rm 4.18.17_*
	$ $progname rm 4.18.*
_EOF
	exit 1
}

list_kernels()
{
	local installed
	local kpkg
	local k

	if [ "$1" = "all" ]; then
		shift
	fi

	if [ -n "$1" ] && ! echo "$1" | grep -Eq '^([0-9]+\.+){1,2}(\*|[0-9]+_([0-9]+|\*))$'; then
		echo "$1"
		exit 1
	fi

	installed="$(xbps-query -o "/boot/$KIMAGE-*" 2>/dev/null | awk '{print $2}')"

	for k in /boot/"$KIMAGE"-*; do
		(echo "$installed" | grep -q "$k") && continue

		kpkg="$(xbps-uhelper getpkgversion "$(basename "$k")" 2>/dev/null)"
		[ "$(uname -r)" = "$kpkg" ] && continue

		[ -n "$kpkg" ] && [ -z "$1" ] || (echo "$kpkg" | grep -Eq "${1}") && echo "$kpkg"
	done
}

run_hooks()
{
	local d
	local dir="$1"
	local kver="$2"

	for d in /etc/kernel.d/"${dir}"/*; do
		[ ! -x "$d" ] && continue

		echo "Running ${dir} kernel hook: $(basename "$d")..."
		$d kernel "$kver" 2>&1 | sed "s/^/\t/"
	done
}

remove_kernel()
{
	local rmkver="$1"
	local installed
	local prefix

	if [ ! -f "/boot/$KIMAGE-${rmkver}" ] && [ ! -d "/lib/modules/${rmkver}" ]; then
		echo "Kernel ${rmkver} not installed."
		exit 0
	fi

	installed="$(xbps-uhelper version "linux${rmkver%*.*}" 2>/dev/null)"
	if [ -n "$installed" ] && [ "$installed" = "$rmkver" ]; then
		echo "Kernel $rmkver is currently installed."
		exit 0
	fi

	# Execute pre-remove kernel hooks.
	run_hooks pre-remove "$rmkver"

	# Remove kernel files in /boot.
	for prefix in config System.map "$KIMAGE"; do
		[ ! -f "/boot/${prefix}-${rmkver}" ] && continue

		echo "Removing /boot/${prefix}-${rmkver}..."
		rm -f "/boot/${prefix}-${rmkver}"
	done

	# Remove kernel modules
	if [ -d "/lib/modules/${rmkver}" ]; then
		echo "Removing /lib/modules/${rmkver}..."
		rm -rf "/lib/modules/${rmkver}"
	fi

	# Execute post-remove kernel hooks.
	run_hooks post-remove "$rmkver"

	# Remove kernel-headers.
	if [ -d "/usr/src/kernel-headers-${rmkver}" ]; then
		echo "Removing /usr/src/kernel-headers-${rmkver}..."
		rm -rf "/usr/src/kernel-headers-${rmkver}"
	fi

	# Remove debugging symbols.
	if [ -f "/usr/lib/debug/boot/vmlinux-${rmkver}" ]; then
		echo "Removing /usr/lib/debug/boot/vmlinux-${rmkver}..."
		rm -f "/usr/lib/debug/boot/vmlinux-${rmkver}"
	fi
	if [ -d "/usr/lib/debug/usr/lib/modules/${rmkver}" ]; then
		echo "Removing /usr/lib/debug/usr/lib/modules/${rmkver}..."
		rm -rf "/usr/lib/debug/usr/lib/modules/${rmkver}"
	fi
}

if [ "$1" = "list" ]; then
	list_kernels "$2"
elif [ "$1" = "rm" ]; then
	if [ "$(id -u)" -ne 0 ]; then
		echo "You have to run this script as root!"
		exit 1
	fi

	if [ -z "$2" ]; then
		usage
	fi

	shift
	for k; do
		for rk in $(list_kernels "$k"); do
			echo "Removing kernel ${rk}..."
			remove_kernel "$rk" | sed "s/^/\t/"
		done
	done
else
	usage
fi

exit 0
