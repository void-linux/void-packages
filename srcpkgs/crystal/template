# Template file for 'crystal'
pkgname=crystal
version=0.34.0
revision=2
archs="x86_64* i686* aarch64* arm*"
_shardsversion=0.10.0
_molinilloversion=0.1.0
_bootstrapversion=0.34.0
_bootstraprevision=1
hostmakedepends="which tar git llvm10 pkg-config"
makedepends="gc-devel libatomic_ops pcre-devel libevent-devel libyaml-devel
 libxml2-devel"
depends="gc-devel libatomic_ops pcre-devel libevent-devel libyaml-devel
 libxml2-devel gmp-devel openssl-devel llvm10 gcc pkg-config"
checkdepends="readline-devel libyaml-devel gmp-devel openssl-devel"
short_desc="Crystal Programming Language"
maintainer="lvmbdv <ata.kuyumcu@protonmail.com>"
license="Apache-2.0"
homepage="https://crystal-lang.org/"
distfiles="
 https://github.com/crystal-lang/crystal/archive/${version}.tar.gz
 https://github.com/crystal-lang/shards/archive/v${_shardsversion}.tar.gz
 https://github.com/crystal-lang/crystal-molinillo/archive/v${_molinilloversion}.tar.gz"
checksum="973293ffbcfa4fb073f6a2f833b0ce5b82b72f7899427f39d7e5610ffc9029c8
 3aea420df959552d1866d473c878ab1ed0b58489c4c9881ef40a170cfb775459
 1ecc7a8bf52a3bfdc0134d4c58f1155ef204a22a3fed151ac2d4ba6a9e9e0a15"
nocross="FIXME: someone needs to sort out the llvm --cxxflags for cross building"
_crystalflags="--release --no-debug --progress"

build_options="binary_bootstrap"
build_options_default="binary_bootstrap"
desc_option_binary_bootstrap="Bootstrap using precompiled binaries"

if [ "$build_option_binary_bootstrap" ]; then
	case "$XBPS_MACHINE" in
	x86_64)
		distfiles+=" https://github.com/crystal-lang/crystal/releases/download/${_bootstrapversion}/crystal-${_bootstrapversion}-${_bootstraprevision}-linux-x86_64.tar.gz"
		checksum+=" 268ace9073ad073b56c07ac10e3f29927423a8b170d91420b0ca393fb02acfb1"
		;;
	i686)
		distfiles+=" https://github.com/crystal-lang/crystal/releases/download/${_bootstrapversion}/crystal-${_bootstrapversion}-${_bootstraprevision}-linux-i686.tar.gz"
		checksum+=" e8962c91b6b739ac9738e03b24de907d64930d6129fbe54f9c81e0e029378006"
		;;
	*)
		broken="cannot be built on $XBPS_MACHINE"
		;;
	esac
else
	hostmakedepends+=" crystal"
fi

do_extract() {
	mkdir -p ${wrksrc}/{shards,shards/lib,shards/lib/molinillo,molinillo,$(vopt_if binary_bootstrap bootstrap)}

	tar xfz ${XBPS_SRCDISTDIR}/${pkgname}-${version}/${version}.tar.gz --strip-components=1 -C ${wrksrc}
	tar xfz ${XBPS_SRCDISTDIR}/${pkgname}-${version}/v${_shardsversion}.tar.gz --strip-components=1 -C ${wrksrc}/shards
	tar xfz ${XBPS_SRCDISTDIR}/${pkgname}-${version}/v${_molinilloversion}.tar.gz --strip-components=1 -C ${wrksrc}/molinillo
	mv -f ${wrksrc}/molinillo/src/* ${wrksrc}/shards/lib/molinillo
	if [ "$build_option_binary_bootstrap" ]; then
		tar xf ${XBPS_SRCDISTDIR}/${pkgname}-${version}/crystal-${_bootstrapversion}-${_bootstraprevision}-linux-${XBPS_TARGET_MACHINE}.tar.gz \
			--strip-components=1 -C ${wrksrc}/bootstrap
	fi
}

do_build() {
	if [ -z ${disable_parallel_build} ] && [ ${XBPS_MAKEJOBS} ]; then
		_crystalflags="${_crystalflags} --threads ${makejobs:2:4}"
	fi
	make ${makejobs} release=1 FLAGS="${_crystalflags}" \
		CRYSTAL_CONFIG_PATH="lib:/usr/lib/crystal" \
		CRYSTAL_CONFIG_VERSION="${version}" \
		CRYSTAL_CACHE_DIR="/tmp/crystal" \
		$(vopt_if binary_bootstrap PATH="${wrksrc}/bootstrap/bin:$PATH")
	make ${makejobs} docs CRYSTAL_CACHE_DIR="/tmp/crystal"

	cd shards
	${wrksrc}/bin/crystal build ${_crystalflags} -o bin/shards src/shards.cr
}

do_check() {
	make ${makejobs} spec \
		CRYSTAL_CONFIG_VERSION="${version}" \
		CRYSTAL_CACHE_DIR="/tmp/crystal" \
		PATH=".build:$PATH"

	cd shards
	make test CRYSTAL_BIN="${wrksrc}/bin/crystal"
}

do_install() {
	vmkdir /usr/bin
	vmkdir /usr/lib/crystal
	vmkdir /usr/share/doc/crystal
	vmkdir /usr/share/doc/crystal/api
	vmkdir /usr/share/licenses/shards

	vinstall etc/completion.bash 644 \
		usr/share/bash-completion/completions crystal
	vinstall etc/completion.zsh 644 usr/share/zsh/site-functions _crystal
	vcopy samples /usr/share/doc/crystal
	vcopy docs/* /usr/share/doc/crystal/api
	vcopy src/* /usr/lib/crystal
	vbin .build/crystal crystal
	vman man/crystal.1
	vbin shards/bin/shards
	cp shards/LICENSE ${DESTDIR}/usr/share/licenses/shards
}
