--- a/src/main/native/unix_jni.h
+++ b/src/main/native/unix_jni.h
@@ -26,7 +26,8 @@
 
 namespace blaze_jni {
 
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__OpenBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__OpenBSD__) || \
+	(defined(__linux__) && !defined(__GLIBC__))
 // stat64 is deprecated on OS X/BSD.
 typedef struct stat portable_stat_struct;
 #define portable_stat ::stat
--- a/src/main/native/unix_jni_linux.cc
+++ b/src/main/native/unix_jni_linux.cc
@@ -12,6 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+#include <features.h>
 #include <errno.h>
 #include <stdint.h>
 #include <stdlib.h>
@@ -45,7 +46,11 @@ std::string ErrorMessage(int error_numbe
 
 int portable_fstatat(
     int dirfd, char *name, portable_stat_struct *statbuf, int flags) {
+#ifdef __GLIBC__
   return fstatat64(dirfd, name, statbuf, flags);
+#else
+  return fstatat(dirfd, name, statbuf, flags);
+#endif
 }
 
 uint64_t StatEpochMilliseconds(const portable_stat_struct &statbuf,
--- a/src/tools/singlejar/port.h
+++ b/src/tools/singlejar/port.h
@@ -34,6 +34,11 @@ typedef off_t off64_t;
 typedef __int64 off64_t;
 #elif defined(__OpenBSD__)
 typedef int64_t off64_t;
+#elif defined(__linux__)
+#include <features.h>
+#ifndef __GLIBC__
+typedef off_t off64_t;
+#endif
 #endif
 static_assert(sizeof(off64_t) == 8, "File offset type must be 64-bit");
 
