From c924d0a2b962536eb245d5c67af6f8c3a1eb54b3 Mon Sep 17 00:00:00 2001
From: John Zimmermann <johnz@posteo.net>
Date: Sun, 29 Dec 2019 20:05:02 +0100
Subject: [PATCH] Dyn linking

---
 external/crash_reports/CMakeLists.txt |  2 ++
 external/ffmpeg/CMakeLists.txt        | 13 +++++++++++
 external/openal/CMakeLists.txt        | 16 ++++++++++++++
 external/openssl/CMakeLists.txt       | 16 +++++++++++++-
 external/opus/CMakeLists.txt          | 13 +++++++++++
 external/qt/CMakeLists.txt            | 31 +++++++++++++++++++++++++++
 external/qt/package.cmake             |  4 ++++
 external/ranges/CMakeLists.txt        |  4 ++--
 external/zlib/CMakeLists.txt          | 13 +++++++++++
 init_target.cmake                     |  2 +-
 options_linux.cmake                   |  6 +++---
 variables.cmake                       |  4 ++--
 12 files changed, 115 insertions(+), 9 deletions(-)

diff --git cmake/external/crash_reports/CMakeLists.txt cmake/external/crash_reports/CMakeLists.txt
index a741bcb..11e94e8 100644
--- cmake/external/crash_reports/CMakeLists.txt
+++ cmake/external/crash_reports/CMakeLists.txt
@@ -7,6 +7,7 @@
 add_library(external_crash_reports INTERFACE IMPORTED GLOBAL)
 add_library(desktop-app::external_crash_reports ALIAS external_crash_reports)
 
+if(NOT DESKTOP_APP_DISABLE_CRASH_REPORTS)
 if (WIN32 OR LINUX OR build_macstore)
     add_subdirectory(breakpad)
     target_link_libraries(external_crash_reports
@@ -20,3 +21,4 @@ else()
         desktop-app::external_crashpad
     )
 endif()
+endif()
diff --git cmake/external/ffmpeg/CMakeLists.txt cmake/external/ffmpeg/CMakeLists.txt
index 014fb06..888066a 100644
--- cmake/external/ffmpeg/CMakeLists.txt
+++ cmake/external/ffmpeg/CMakeLists.txt
@@ -7,6 +7,18 @@
 add_library(external_ffmpeg INTERFACE IMPORTED GLOBAL)
 add_library(desktop-app::external_ffmpeg ALIAS external_ffmpeg)
 
+if(DESKTOP_APP_USE_SYSTEM_LIBS)
+    find_package(PkgConfig REQUIRED)
+    pkg_check_modules(FFMPEG REQUIRED libavcodec libavformat libavutil libswresample libswscale)
+    target_link_libraries(external_ffmpeg
+    INTERFACE
+        ${FFMPEG_LIBRARIES}
+    )
+    target_include_directories(external_ffmpeg SYSTEM
+    INTERFACE
+        ${FFMPEG_INCLUDE_DIRS}
+    )
+else()
 target_include_directories(external_ffmpeg SYSTEM
 INTERFACE
     ${libs_loc}/ffmpeg
@@ -36,3 +48,4 @@ if (LINUX)
         Xrender
     )
 endif()
+endif()
diff --git cmake/external/openal/CMakeLists.txt cmake/external/openal/CMakeLists.txt
index e2e4992..ea32ed1 100644
--- cmake/external/openal/CMakeLists.txt
+++ cmake/external/openal/CMakeLists.txt
@@ -7,6 +7,21 @@
 add_library(external_openal INTERFACE IMPORTED GLOBAL)
 add_library(desktop-app::external_openal ALIAS external_openal)
 
+if(DESKTOP_APP_USE_SYSTEM_LIBS)
+    find_package(OpenAL REQUIRED)
+    target_include_directories(external_openal SYSTEM
+    INTERFACE
+        ${OPENAL_INCLUDE_DIR}
+    )
+    target_link_libraries(external_openal
+    INTERFACE
+        ${OPENAL_LIBRARY}
+    )
+    target_compile_definitions(external_openal
+    INTERFACE
+        AL_ALEXT_PROTOTYPES
+    )
+else()
 if (WIN32)
     target_include_directories(external_openal SYSTEM
     INTERFACE
@@ -41,3 +56,4 @@ INTERFACE
     AL_LIBTYPE_STATIC
     AL_ALEXT_PROTOTYPES
 )
+endif()
diff --git cmake/external/openssl/CMakeLists.txt cmake/external/openssl/CMakeLists.txt
index bcbcbfa..a834a0e 100644
--- cmake/external/openssl/CMakeLists.txt
+++ cmake/external/openssl/CMakeLists.txt
@@ -7,7 +7,13 @@
 add_library(external_openssl INTERFACE IMPORTED GLOBAL)
 add_library(desktop-app::external_openssl ALIAS external_openssl)
 
-if (LINUX)
+if(DESKTOP_APP_USE_SYSTEM_LIBS)
+    find_package(OpenSSL REQUIRED)
+    target_include_directories(external_openssl SYSTEM
+    INTERFACE
+        ${OPENSSL_INCLUDE_DIR}
+    )
+elseif (LINUX)
     target_include_directories(external_openssl SYSTEM
     INTERFACE
         /usr/local/desktop-app/openssl-1.1.1/include
@@ -24,6 +30,13 @@ else()
     )
 endif()
 
+if(DESKTOP_APP_USE_SYSTEM_LIBS)
+    target_link_libraries(external_openssl
+    INTERFACE
+	OpenSSL::Crypto
+        OpenSSL::SSL
+    )
+else()
 if (WIN32)
     set(openssl_lib_ext lib)
     set(openssl_lib_loc ${libs_loc}/openssl_1_1_1/out32$<$<CONFIG:Debug>:.dbg>)
@@ -45,6 +58,7 @@ INTERFACE
     ${openssl_lib_loc}/libssl.${openssl_lib_ext}
     ${openssl_lib_loc}/libcrypto.${openssl_lib_ext}
 )
+endif()
 
 if (LINUX)
     if (DESKTOP_APP_USE_GLIBC_WRAPS)
diff --git cmake/external/opus/CMakeLists.txt cmake/external/opus/CMakeLists.txt
index 00c2508..960b7fa 100644
--- cmake/external/opus/CMakeLists.txt
+++ cmake/external/opus/CMakeLists.txt
@@ -7,6 +7,18 @@
 add_library(external_opus INTERFACE IMPORTED GLOBAL)
 add_library(desktop-app::external_opus ALIAS external_opus)
 
+if(DESKTOP_APP_USE_SYSTEM_LIBS)
+    find_package(PkgConfig REQUIRED)
+    pkg_check_modules(OPUS REQUIRED opus)
+    target_include_directories(external_opus SYSTEM
+    INTERFACE
+        ${OPUS_INCLUDE_DIRS}
+    )
+    target_link_libraries(external_opus
+    INTERFACE
+        ${OPUS_LIBRARIES}
+    )
+else()
 target_include_directories(external_opus SYSTEM
 INTERFACE
     ${libs_loc}/opus/include
@@ -43,3 +55,4 @@ else()
         opus
     )
 endif()
+endif()
diff --git cmake/external/qt/CMakeLists.txt cmake/external/qt/CMakeLists.txt
index 1a56319..1744a8b 100644
--- cmake/external/qt/CMakeLists.txt
+++ cmake/external/qt/CMakeLists.txt
@@ -15,6 +15,36 @@ if (LINUX)
     endif()
 endif()
 
+if(DESKTOP_APP_USE_SYSTEM_LIBS)
+    get_target_property(QTCORE_INCLUDE_DIRS Qt5::Core INTERFACE_INCLUDE_DIRECTORIES)
+    list(GET QTCORE_INCLUDE_DIRS 0 QT_INCLUDE_DIR)
+
+    foreach(__qt_module IN ITEMS QtCore QtGui)
+        list(APPEND QT_PRIVATE_INCLUDE_DIRS
+                ${QT_INCLUDE_DIR}/${__qt_module}/${Qt5_VERSION}
+                ${QT_INCLUDE_DIR}/${__qt_module}/${Qt5_VERSION}/${__qt_module}
+        )
+    endforeach()
+    message(STATUS "Using Qt private include directories: ${QT_PRIVATE_INCLUDE_DIRS}")
+    target_include_directories(external_qt SYSTEM
+    INTERFACE
+        ${QT_PRIVATE_INCLUDE_DIRS}
+    )
+    target_link_libraries(external_qt
+    INTERFACE
+        Qt5::DBus
+	Qt5::Network
+	Qt5::Widgets
+        desktop-app::external_zlib
+        xcb
+        X11   
+        X11-xcb    
+        dbus-1
+        dl
+        glib-2.0  
+        pthread
+    )
+else()
 target_include_directories(external_qt SYSTEM
 INTERFACE
     ${qt_loc}/include
@@ -215,3 +245,4 @@ if (LINUX)
         pthread
     )
 endif()
+endif()
diff --git cmake/external/qt/package.cmake cmake/external/qt/package.cmake
index 36a1dfd..320edc4 100644
--- cmake/external/qt/package.cmake
+++ cmake/external/qt/package.cmake
@@ -4,6 +4,9 @@
 # For license and copyright information please follow this link:
 # https://github.com/desktop-app/legal/blob/master/LEGAL
 
+if(DESKTOP_APP_USE_SYSTEM_LIBS)
+
+else()
 if (NOT APPLE OR NOT build_osx)
     set(qt_version 5.12.5)
 else()
@@ -17,6 +20,7 @@ else()
 endif()
 
 set(Qt5_DIR ${qt_loc}/lib/cmake/Qt5)
+endif()
 
 find_package(Qt5 COMPONENTS Core Gui Widgets Network REQUIRED)
 
diff --git cmake/external/ranges/CMakeLists.txt cmake/external/ranges/CMakeLists.txt
index 4c75ecb..51f972a 100644
--- cmake/external/ranges/CMakeLists.txt
+++ cmake/external/ranges/CMakeLists.txt
@@ -9,7 +9,7 @@ add_library(desktop-app::external_ranges ALIAS external_ranges)
 
 target_include_directories(external_ranges SYSTEM
 INTERFACE
-    ${libs_loc}/range-v3/include
+    /usr/include
 )
 
 if (WIN32)
@@ -18,4 +18,4 @@ if (WIN32)
         /experimental:preprocessor # need for range-v3 see https://github.com/ericniebler/range-v3#supported-compilers
         /wd5105 # needed for `/experimental:preprocessor`, suppressing C5105 "macro expansion producing 'defined' has undefined behavior"
     )
-endif()
\ No newline at end of file
+endif()
diff --git cmake/external/zlib/CMakeLists.txt cmake/external/zlib/CMakeLists.txt
index d2bc1fc..1c65298 100644
--- cmake/external/zlib/CMakeLists.txt
+++ cmake/external/zlib/CMakeLists.txt
@@ -7,6 +7,18 @@
 add_library(external_zlib INTERFACE IMPORTED GLOBAL)
 add_library(desktop-app::external_zlib ALIAS external_zlib)
 
+if(DESKTOP_APP_USE_SYSTEM_LIBS)
+    find_package(ZLIB REQUIRED)
+    find_package(PkgConfig REQUIRED)
+    pkg_check_modules(MINIZIP REQUIRED minizip)
+    find_library(minizip_LIBRARY minizip)
+    target_link_libraries(external_zlib INTERFACE ZLIB::ZLIB ${minizip_LIBRARY})
+    target_include_directories(external_zlib SYSTEM
+    INTERFACE
+	${ZLIB_INCLUDE_DIR}
+        ${MINIZIP_INCLUDE_DIRS}
+    )
+else()
 if (NOT WIN32)
     add_library(external_minizip STATIC)
     init_target(external_minizip "(external)")
@@ -49,3 +61,4 @@ elseif (APPLE)
 else()
     target_link_static_libraries(external_zlib INTERFACE z)
 endif()
+endif()
diff --git cmake/init_target.cmake cmake/init_target.cmake
index c7a1244..2824a60 100644
--- cmake/init_target.cmake
+++ cmake/init_target.cmake
@@ -27,7 +27,7 @@ function(init_target target_name) # init_target(my_target folder_name)
     endif()
     target_link_libraries(${target_name} PUBLIC desktop-app::common_options)
     set_target_properties(${target_name} PROPERTIES
-        LINK_SEARCH_START_STATIC 1
+        LINK_SEARCH_START_STATIC 0
         XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_WEAK YES
         XCODE_ATTRIBUTE_GCC_INLINES_ARE_PRIVATE_EXTERN YES
         XCODE_ATTRIBUTE_GCC_SYMBOLS_PRIVATE_EXTERN YES
diff --git cmake/options_linux.cmake cmake/options_linux.cmake
index a6a13c9..53cfb63 100644
--- cmake/options_linux.cmake
+++ cmake/options_linux.cmake
@@ -25,6 +25,9 @@ INTERFACE
     -Wno-stringop-overflow
     -Wno-maybe-uninitialized
     -Wno-error=class-memaccess
+    -Wno-error=deprecated-copy
+    -Wno-error=deprecated-declarations
+    -Wno-error=redundant-move
 )
 target_link_options(common_options
 INTERFACE
@@ -33,8 +36,5 @@ INTERFACE
 if (build_linux32)
     target_compile_options(common_options INTERFACE -g0)
     target_link_options(common_options INTERFACE -g0)
-else()
-    target_compile_options(common_options INTERFACE $<IF:$<CONFIG:Debug>,,-g -flto>)
-    target_link_options(common_options INTERFACE $<IF:$<CONFIG:Debug>,,-g -flto -fuse-linker-plugin>)
 endif()
 
diff --git cmake/variables.cmake cmake/variables.cmake
index b3d7ff4..4422b97 100644
--- cmake/variables.cmake
+++ cmake/variables.cmake
@@ -10,6 +10,7 @@ option(DESKTOP_APP_DISABLE_SPELLCHECK "Disable spellcheck library." OFF)
 option(DESKTOP_APP_LOTTIE_USE_CACHE "Use caching in lottie animations." ON)
 option(DESKTOP_APP_USE_GLIBC_WRAPS "Use wraps for new GLIBC features." OFF)
 option(DESKTOP_APP_USE_PACKAGED "Find libraries using CMake instead of exact paths." ON)
+option(DESKTOP_APP_USE_SYSTEM_LIBS "Use system libs where possible." OFF)
 
 function(report_bad_special_target)
     message(FATAL_ERROR "Bad special target '${DESKTOP_APP_SPECIAL_TARGET}'")
@@ -59,8 +60,7 @@ elseif (APPLE)
     set(DESKTOP_APP_USE_GLIBC_WRAPS OFF)
 else()
     set(LINUX 1)
-    execute_process(COMMAND uname -m OUTPUT_VARIABLE machine_uname)
-    if (NOT ${machine_uname} MATCHES "x86_64" AND NOT ${machine_uname} MATCHES "aarch64")
+    if (CMAKE_SIZEOF_VOID_P EQUAL 4)
         set(build_linux32 1)
     endif()
     if (DESKTOP_APP_SPECIAL_TARGET STREQUAL "linux")
-- 
2.24.1

