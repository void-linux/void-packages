diff --git a/Telegram/SourceFiles/export/data/export_data_types.cpp Telegram/SourceFiles/export/data/export_data_types.cpp
index 0cc79f7e2..b54065ba1 100644
--- a/Telegram/SourceFiles/export/data/export_data_types.cpp
+++ Telegram/SourceFiles/export/data/export_data_types.cpp
@@ -179,7 +179,8 @@ Image ParseMaxImage(
 				result.width = data.vw.v;
 				result.height = data.vh.v;
 				result.file.location = ParseLocation(data.vlocation);
-				if constexpr (MTPDphotoCachedSize::Is<decltype(data)>()) {
+				constexpr bool is = MTPDphotoCachedSize::Is<decltype(data)>();
+				if constexpr (is) {
 					result.file.content = data.vbytes.v;
 					result.file.size = result.file.content.size();
 				} else {
diff --git a/Telegram/SourceFiles/export/export_api_wrap.cpp Telegram/SourceFiles/export/export_api_wrap.cpp
index 34ddd1b5a..21816472a 100644
--- a/Telegram/SourceFiles/export/export_api_wrap.cpp
+++ Telegram/SourceFiles/export/export_api_wrap.cpp
@@ -710,7 +710,8 @@ void ApiWrap::handleUserpicsSlice(const MTPphotos_Photos &result) {
 	Expects(_userpicsProcess != nullptr);
 
 	result.match([&](const auto &data) {
-		if constexpr (MTPDphotos_photos::Is<decltype(data)>()) {
+		constexpr bool is = MTPDphotos_photos::Is<decltype(data)>();
+		if constexpr (is) {
 			_userpicsProcess->lastSlice = true;
 		}
 		loadUserpicsFiles(Data::ParseUserpicsSlice(
@@ -1128,7 +1129,8 @@ void ApiWrap::requestMessagesSlice() {
 		result.match([&](const MTPDmessages_messagesNotModified &data) {
 			error("Unexpected messagesNotModified received.");
 		}, [&](const auto &data) {
-			if constexpr (MTPDmessages_messages::Is<decltype(data)>()) {
+			constexpr bool is = MTPDmessages_messages::Is<decltype(data)>();
+			if constexpr (is) {
 				_chatProcess->lastSlice = true;
 			}
 			loadMessagesFiles(Data::ParseMessagesSlice(
