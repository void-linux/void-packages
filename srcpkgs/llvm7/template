# Template file for 'llvm7'
pkgname=llvm7
version=7.0.1
revision=4
wrksrc="llvm-${version}.src"
build_style=cmake
configure_args="
 -DCMAKE_BUILD_TYPE=Release
 -DLLVM_INSTALL_UTILS=ON
 -DLLVM_BUILD_LLVM_DYLIB=ON
 -DLLVM_LINK_LLVM_DYLIB=ON
 -DLLVM_ENABLE_RTTI=ON
 -DLLVM_ENABLE_FFI=ON
 -DLLVM_BINUTILS_INCDIR=/usr/include"
short_desc="Low Level Virtual Machine"
maintainer="Juan RP <xtraeme@voidlinux.org>"
license="NCSA"
homepage="https://www.llvm.org"
distfiles="
 https://www.llvm.org/releases/${version}/llvm-${version}.src.tar.xz
 https://www.llvm.org/releases/${version}/lldb-${version}.src.tar.xz
 https://www.llvm.org/releases/${version}/lld-${version}.src.tar.xz
 https://www.llvm.org/releases/${version}/cfe-${version}.src.tar.xz
 https://www.llvm.org/releases/${version}/clang-tools-extra-${version}.src.tar.xz
 https://www.llvm.org/releases/${version}/compiler-rt-${version}.src.tar.xz"
checksum="a38dfc4db47102ec79dcc2aa61e93722c5f6f06f0a961073bd84b78fb949419b
 76b46be75b412a3d22f0d26279306ae7e274fe4d7988a2184c529c38a6a76982
 8869aab2dd2d8e00d69943352d3166d159d7eae2615f66a684f4a0999fc74031
 a45b62dde5d7d5fdcdfa876b0af92f164d434b06e9e89b5d0b1cbc65dfe3f418
 4c93c7d2bb07923a8b272da3ef7914438080aeb693725f4fc5c19cd0e2613bed
 782edfc119ee172f169c91dd79f2c964fb6b248bd9b73523149030ed505bbe18"
disable_parallel_builds=yes
lib32disabled=yes

# XXX Investigate ocaml bindings.
hostmakedepends="groff perl python zlib-devel libffi-devel swig"
makedepends="python-devel zlib-devel libffi-devel libedit-devel libxml2-devel binutils-devel libatomic-devel"
depends="libllvm7"

subpackages="clang-tools-extra clang clang-analyzer libllvm7"
if [ -z "$CROSS_BUILD" ]; then
	# XXX fails to cross compile due to python
	subpackages+=" lldb lldb-devel"
fi
subpackages+=" lld lld-devel"

case "$XBPS_TARGET_MACHINE" in
	armv5*) broken="Tries to assemble VFP instructions with armv5tel arch";;
esac

post_extract() {
	# patches
	cd ${XBPS_BUILDDIR}/llvm-${version}.src
	for i in ${FILESDIR}/patches/llvm/llvm-*.patch; do
		msg_normal "Applying $i to llvm\n"
		patch -sNp1 -i ${i}
	done

	cd ${XBPS_BUILDDIR}/cfe-${version}.src
	for i in ${FILESDIR}/patches/cfe/cfe-*.patch; do
		msg_normal "Applying $i to cfe\n"
		patch -sNp1 -i ${i}
	done

	if [ -z "$CROSS_BUILD" ]; then
		cd ${XBPS_BUILDDIR}/lldb-${version}.src
		for i in ${FILESDIR}/patches/lldb/*.patch; do
			msg_normal "Applying $i to lldb\n"
			patch -sNp1 -i ${i}
		done
		case "$XBPS_TARGET_MACHINE" in
			*-musl) sed -i 's|__ptrace_request|int|g' source/Plugins/Process/Linux/NativeProcessLinux.cpp ;;
		esac
	fi

	# Move clang files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/cfe-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/cfe-${version}.src ${wrksrc}/tools/clang
	fi
	# Move clang-tools-extra files into llvm source.
	if [ -d ${XBPS_BUILDDIR}/clang-tools-extra-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/clang-tools-extra-${version}.src ${wrksrc}/tools/clang/tools/extra
	fi
	# Move lld files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/lld-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/lld-${version}.src ${wrksrc}/tools/lld
	fi
	# Move lldb files into the llvm source.
	if [ -z "$CROSS_BUILD" -a -d ${XBPS_BUILDDIR}/lldb-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/lldb-${version}.src ${wrksrc}/tools/lldb
	fi
	# Move compiler-rt files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/compiler-rt-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/compiler-rt-${version}.src ${wrksrc}/projects/compiler-rt
	fi
	case "$XBPS_TARGET_MACHINE" in
		*-musl)
			# Disable sanitizers
			sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' ${wrksrc}/projects/compiler-rt/cmake/config-ix.cmake
			;;
	esac

}

pre_configure() {
	# Vastly reduce size of debugging symbols:
	CFLAGS=${CFLAGS/ -g/ -g1}
	CXXFLAGS=${CXXFLAGS/ -g/ -g1}

	if [ "$CROSS_BUILD" ]; then
		msg_normal "Building host tblgen\n"
		mkdir -p build/HOST
		cd build/HOST
		CC="$BUILD_CC" CXX="$BUILD_CXX" CFLAGS="$BUILD_CFLAGS" \
			CXXFLAGS="$BUILD_CXXFLAGS" LDFLAGS="$BUILD_LDFLAGS" \
			cmake ../.. -DCMAKE_BUILD_TYPE=Release
		make ${makejobs} -C utils/TableGen
		make ${makejobs} -C tools/clang/utils/TableGen
		configure_args+=" -DLLVM_TABLEGEN=${wrksrc}/build/HOST/bin/llvm-tblgen"
		configure_args+=" -DCLANG_TABLEGEN=${wrksrc}/build/HOST/bin/clang-tblgen"
		cd ../..
	fi

	case "$XBPS_TARGET_MACHINE" in
		i686*) _arch="X86";;
		x86_64*) _arch="X86";;
		armv5*) _arch="Armv5te";;
		armv6*) _arch="Armv6";;
		armv7*) _arch="Armv7";;
		aarch64*) _arch="AArch64";;
		mips*) _arch="Mips";;
		ppc*) _arch="PowerPC";;
	esac
	configure_args+=" -DLLVM_TARGET_ARCH=${_arch}"
	configure_args+=" -DLLVM_DEFAULT_TARGET_TRIPLE=${XBPS_CROSS_TRIPLET:-$XBPS_TRIPLET}"
}

do_install() {
	vlicense LICENSE.TXT

	cd build
	cmake -DCMAKE_INSTALL_PREFIX=${DESTDIR}/usr -P cmake_install.cmake

	# Fix permissions of static libs
	chmod -x ${DESTDIR}/usr/lib/*.a

	# Required for multilib.
	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		for _header in llvm-config; do
			mv ${DESTDIR}/usr/include/llvm/Config/${_header}{,-64}.h
			vinstall ${FILESDIR}/llvm-Config-${_header}.h 644 \
				usr/include/llvm/Config ${_header}.h
		done
	fi

	# Remove llvm-config-host in cross builds.
	if [ "$CROSS_BUILD" ]; then
		rm -f ${DESTDIR}/usr/bin/llvm-config-host
	fi
}

clang-analyzer_package() {
	archs=noarch
	pycompile_dirs="usr/share/scan-view"
	depends="clang-${version}_${revision} python"
	short_desc+=" - A source code analysis framework"
	homepage="https://clang-analyzer.llvm.org/"
	pkg_install() {
		vmove usr/share/man/man1/scan-build.1
		vmove "/usr/bin/scan-*"
		vmove "/usr/share/scan-*"
		vmove "/usr/libexec/*analyzer"
	}
}

clang-tools-extra_package() {
	depends="clang-${version}_${revision} python"
	short_desc+=" - Extra Clang tools"
	homepage="https://clang.llvm.org/extra/"
	pkg_install() {
		vmove usr/bin/clang-apply-replacements
		vmove usr/bin/clang-query
		vmove usr/bin/clang-rename
		vmove usr/bin/clang-tidy
		vmove usr/bin/modularize
		vmove "usr/lib/libclangApplyReplacements*"
		vmove "usr/lib/libclangQuery*"
		vmove "usr/lib/libclangTidy*"
		vmove "usr/share/clang/*tidy*"
	}
}

clang_package() {
	lib32disabled=yes
	depends="libstdc++-devel libgcc-devel binutils"
	case "$XBPS_TARGET_MACHINE" in
		*-musl) depends+=" musl-devel";;
		*) depends+=" glibc-devel";;
	esac
	short_desc+=" - C language family frontend"
	alternatives="cc:cc:/usr/bin/clang"
	homepage="https://clang.llvm.org/"
	pkg_install() {
		vmove usr/include/clang
		vmove usr/include/clang-c
		vmove "usr/bin/*clang*"
		vmove usr/bin/c-index-test
		vmove usr/lib/clang
		vmove usr/lib/cmake/clang
		vmove "usr/lib/libclang*"
		vmove "usr/share/clang"
	}
}

lld_package() {
	lib32disabled=yes
	short_desc+=" - linker"
	homepage="https://lld.llvm.org"
	pkg_install() {
		vmove usr/bin/lld*
		vmove usr/bin/ld.lld*
	}
}

lld-devel_package() {
	lib32disabled=yes
	short_desc+=" - linker - development files"
	homepage="https://lld.llvm.org"
	pkg_install() {
		vmove usr/include/lld
		vmove "usr/lib/liblld*a"
	}
}

lldb_package() {
	lib32disabled=yes
	depends+=" python-six"
	short_desc+=" - LLDB debugger"
	homepage="https://lldb.llvm.org/"
	pkg_install() {
		vmove usr/bin/*lldb*
		vmove usr/lib/liblldb*so.*
		vman tools/lldb/docs/lldb.1
		vmove /usr/lib/python*
		# Depend on python-six instead of conflicting
		rm "${PKGDESTDIR}/usr/lib/python2.7/site-packages/six.py"
	}
}

lldb-devel_package() {
	depends="lldb>=${version}_${revision}"
	short_desc+=" - LLDB debugger - development files"
	pkg_install() {
		vmove usr/include/lldb
		vmove "usr/lib/liblldb*.a"
		vmove "usr/lib/liblldb*.so"
	}
}

libllvm7_package() {
	short_desc+=" - runtime library"
	pkg_install() {
		vmove "usr/lib/libLLVM-*.so*"
	}
}
