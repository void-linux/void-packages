Taken from https://git.alpinelinux.org/aports/plain/community/vlc/libplacebo-5.patch.

patch vaguely ported from: https://code.videolan.org/videolan/vlc/-/merge_requests/2233

diff --git a/modules/video_output/opengl/converter.h b/modules/video_output/opengl/converter.h
index 7000e1f..49fa667 100644
--- a/modules/video_output/opengl/converter.h
+++ b/modules/video_output/opengl/converter.h
@@ -26,6 +26,9 @@
 #include <vlc_picture_pool.h>
 #include <vlc_opengl.h>
 
+#include <libplacebo/log.h>
+#include <libplacebo/shaders.h>
+
 /* if USE_OPENGL_ES2 is defined, OpenGL ES version 2 will be used, otherwise
  * normal OpenGL will be used */
 #ifdef __APPLE__
@@ -253,10 +256,6 @@ static inline bool HasExtension(const char *apis, const char *api)
     return false;
 }
 
-struct pl_context;
-struct pl_shader;
-struct pl_shader_res;
-
 /*
  * Structure that is filled by "glhw converter" module probe function
  * The implementation should initialize every members of the struct that are
@@ -273,7 +272,7 @@ struct opengl_tex_converter_t
     vlc_gl_t *gl;
 
     /* libplacebo context, created by the caller (optional) */
-    struct pl_context *pl_ctx;
+    pl_log pl_log;
 
     /* Function pointers to OpenGL functions, set by the caller */
     const opengl_vtable_t *vt;
@@ -337,7 +336,7 @@ struct opengl_tex_converter_t
     bool yuv_color;
     GLfloat yuv_coefficients[16];
 
-    struct pl_shader *pl_sh;
+    pl_shader pl_sh;
     const struct pl_shader_res *pl_sh_res;
 
     /* Private context */
diff --git a/modules/video_output/opengl/fragment_shaders.c b/modules/video_output/opengl/fragment_shaders.c
index ecf7226..29f4148 100644
--- a/modules/video_output/opengl/fragment_shaders.c
+++ b/modules/video_output/opengl/fragment_shaders.c
@@ -611,7 +611,7 @@ opengl_fragment_shader_init_impl(opengl_tex_converter_t *tc, GLenum tex_target,
 
 #ifdef HAVE_LIBPLACEBO
     if (tc->pl_sh) {
-        struct pl_shader *sh = tc->pl_sh;
+        pl_shader sh = tc->pl_sh;
         struct pl_color_map_params color_params = pl_color_map_default_params;
         color_params.intent = var_InheritInteger(tc->gl, "rendering-intent");
         color_params.tone_mapping_algo = var_InheritInteger(tc->gl, "tone-mapping");
@@ -634,7 +634,7 @@ opengl_fragment_shader_init_impl(opengl_tex_converter_t *tc, GLenum tex_target,
                 pl_color_space_from_video_format(&tc->fmt),
                 dst_space, NULL, false);
 
-        struct pl_shader_obj *dither_state = NULL;
+        pl_shader_obj dither_state = NULL;
         int method = var_InheritInteger(tc->gl, "dither-algo");
         if (method >= 0) {
 
diff --git a/modules/video_output/opengl/vout_helper.c b/modules/video_output/opengl/vout_helper.c
index 13d65e0..1ee99af 100644
--- a/modules/video_output/opengl/vout_helper.c
+++ b/modules/video_output/opengl/vout_helper.c
@@ -570,8 +570,7 @@ opengl_deinit_program(vout_display_opengl_t *vgl, struct prgm *prgm)
 
 #ifdef HAVE_LIBPLACEBO
     FREENULL(tc->uloc.pl_vars);
-    if (tc->pl_ctx)
-        pl_context_destroy(&tc->pl_ctx);
+    pl_log_destroy(&tc->pl_log);
 #endif
 
     vlc_object_release(tc);
@@ -622,21 +621,21 @@ opengl_init_program(vout_display_opengl_t *vgl, struct prgm *prgm,
     // create the main libplacebo context
     if (!subpics)
     {
-        tc->pl_ctx = pl_context_create(PL_API_VER, &(struct pl_context_params) {
+        tc->pl_log = pl_log_create(PL_API_VER, &(struct pl_log_params) {
             .log_cb    = log_cb,
             .log_priv  = tc,
             .log_level = PL_LOG_INFO,
         });
-        if (tc->pl_ctx) {
+        if (tc->pl_log) {
 #   if PL_API_VER >= 20
-            tc->pl_sh = pl_shader_alloc(tc->pl_ctx, &(struct pl_shader_params) {
+            tc->pl_sh = pl_shader_alloc(tc->pl_log, &(struct pl_shader_params) {
                 .glsl.version = tc->glsl_version,
                 .glsl.gles = tc->is_gles,
             });
 #   elif PL_API_VER >= 6
-            tc->pl_sh = pl_shader_alloc(tc->pl_ctx, NULL, 0);
+            tc->pl_sh = pl_shader_alloc(tc->pl_log, NULL, 0);
 #   else
-            tc->pl_sh = pl_shader_alloc(tc->pl_ctx, NULL, 0, 0);
+            tc->pl_sh = pl_shader_alloc(tc->pl_log, NULL, 0, 0);
 #   endif
         }
     }
