revert https://github.com/veeso/termscp/pull/302/commits/e5d50698d212d50da367410f938ae59f34abfcda
to fix crossbuild

diff --git a/Cargo.toml b/Cargo.toml
index 12803baf3..d94763168 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -90,8 +90,6 @@ serial_test = "^3"
 
 [build-dependencies]
 cfg_aliases = "0.2"
-vergen-git2 = { version = "1", features = ["build", "cargo", "rustc", "si"] }
-
 
 [features]
 default = ["smb", "with-keyring"]
diff --git a/build.rs b/build.rs
index ca33ce629..543d2da8a 100644
--- a/build.rs
+++ b/build.rs
@@ -1,7 +1,6 @@
 use cfg_aliases::cfg_aliases;
-use vergen_git2::{BuildBuilder, CargoBuilder, Emitter, Git2Builder, RustcBuilder, SysinfoBuilder};
 
-fn main() -> Result<(), Box<dyn std::error::Error>> {
+fn main() {
     // Setup cfg aliases
     cfg_aliases! {
         // Platforms
@@ -14,20 +13,4 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {
         smb_unix: { all(unix, feature = "smb", not(macos)) },
         smb_windows: { all(windows, feature = "smb") }
     }
-
-    let build = BuildBuilder::all_build()?;
-    let cargo = CargoBuilder::all_cargo()?;
-    let git2 = Git2Builder::all_git()?;
-    let rustc = RustcBuilder::all_rustc()?;
-    let si = SysinfoBuilder::all_sysinfo()?;
-
-    Emitter::default()
-        .add_instructions(&build)?
-        .add_instructions(&cargo)?
-        .add_instructions(&git2)?
-        .add_instructions(&rustc)?
-        .add_instructions(&si)?
-        .emit()?;
-
-    Ok(())
 }
diff --git a/src/main.rs b/src/main.rs
index 922c455fb..884245c0d 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -29,20 +29,11 @@ use self::activity_manager::{ActivityManager, NextActivity};
 use self::cli::{Args, ArgsSubcommands, RemoteArgs, RunOpts, Task};
 use self::system::logging::{self, LogLevel};
 
-const APP_NAME: &str = env!("CARGO_PKG_NAME");
-const APP_BUILD_DATE: &str = env!("VERGEN_BUILD_TIMESTAMP");
-const APP_GIT_BRANCH: &str = env!("VERGEN_GIT_BRANCH");
-const APP_GIT_HASH: &str = env!("VERGEN_GIT_SHA");
 const EXIT_CODE_SUCCESS: i32 = 0;
 const EXIT_CODE_ERROR: i32 = 1;
 const TERMSCP_VERSION: &str = env!("CARGO_PKG_VERSION");
 const TERMSCP_AUTHORS: &str = env!("CARGO_PKG_AUTHORS");
 
-#[inline]
-fn git_hash() -> &'static str {
-    APP_GIT_HASH[0..8].as_ref()
-}
-
 fn main() {
     let args: Args = argh::from_env();
     // Parse args
@@ -57,10 +48,7 @@ fn main() {
     if let Err(err) = logging::init(run_opts.log_level) {
         eprintln!("Failed to initialize logging: {err}");
     }
-    info!(
-        "{APP_NAME} v{TERMSCP_VERSION} ({APP_GIT_BRANCH}, {git_hash}, {APP_BUILD_DATE}) - Developed by {TERMSCP_AUTHORS}",
-        git_hash = git_hash()
-    );
+    info!("termscp {} started!", TERMSCP_VERSION);
     // Run
     info!("Starting activity manager...");
     let rc = run(run_opts);
@@ -82,8 +70,7 @@ fn parse_args(args: Args) -> Result<RunOpts, String> {
             // Version
             if args.version {
                 return Err(format!(
-                    "{APP_NAME} v{TERMSCP_VERSION} ({APP_GIT_BRANCH}, {git_hash}, {APP_BUILD_DATE}) - Developed by {TERMSCP_AUTHORS}",
-                    git_hash = git_hash()
+                    "termscp - {TERMSCP_VERSION} - Developed by {TERMSCP_AUTHORS}"
                 ));
             }
             // Logging
