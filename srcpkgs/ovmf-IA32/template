# Template file for 'ovmf-IA32'
pkgname=ovmf-IA32
version=201911
revision=1
_opensslversion=1.1.1c
wrksrc=edk2-edk2-stable${version}
hostmakedepends="make python3 libuuid-devel acpica-utils nasm"
short_desc="Tianocore UEFI firmware for qemu - IA32"
maintainer="teldra <teldra@rotce.de>"
license="BSD-2-Clause-Patent, MIT"
homepage="https://www.tianocore.org/"
distfiles="https://github.com/tianocore/edk2/archive/edk2-stable${version}.tar.gz
 https://github.com/openssl/openssl/archive/OpenSSL_${_opensslversion//./_}.tar.gz"
checksum="23affd4ca2ba526747e72cbb350a4c95d192ac14eeb616778b1976577ed06001
 640f3a3c26aef38293b4ab4017562aa7dccf787267382d27fc003538b405bbb5"

_targets=(IA32)
_toolchain_opt=GCC5

case ${XBPS_MACHINE} in
	i686)
		# edk2 don't find the correct host.
		export HOST_ARCH=IA32 ;;
	*)
		_targets+=(X64) ;;
esac

pre_configure() {
	cp -r ${XBPS_BUILDDIR}/openssl-OpenSSL_${_opensslversion//./_}/* ${XBPS_BUILDDIR}/edk2-edk2-stable${version}/CryptoPkg/Library/OpensslLib/openssl
}

do_build() {
	: ${make_cmd:=make}
	export PATH="${wrksrc}/BaseTools/BinWrappers/PosixLike/:$PATH"
	export EDK_TOOLS_PATH="${wrksrc}"/BaseTools
	export PYTHON_COMMAND=python
	export WORKSPACE="${wrksrc}"
	export PACKAGES_PATH="${wrksrc}"
	export PATH="${wrksrc}/bin:$PATH"
	${make_cmd} -C BaseTools
	bash -c ". edksetup.sh"
	for ARCH in ${_targets[@]}; do
		case $ARCH in
			IA32) FILE="Ia32" ;;
			X64) FILE="X64";;
		esac
		command build \
		-t ${_toolchain_opt} \
		-a ${ARCH} \
		-p OvmfPkg/OvmfPkg${FILE}.dsc \
		-n ${XBPS_MAKEJOBS} \
		-b RELEASE \
		-D FD_SIZE_2MB \
		-D NETWORK_IP6_ENABLE \
		-D TPM2_ENABLE \
		-D SECURE_BOOT_ENABLE \
		-D HTTP_BOOT_ENABLE \
		-D TLS_ENABLE
	done
}

do_install() {
	vinstall Build/OvmfIa32/RELEASE_${_toolchain_opt}/FV/OVMF_CODE.fd 644 usr/share/ovmf OVMF_CODE-IA32.fd
	vinstall Build/OvmfIa32/RELEASE_${_toolchain_opt}/FV/OVMF_VARS.fd 644 usr/share/ovmf OVMF_VARS-IA32.fd
	vlicense OvmfPkg/License.txt
}

if [ ! ${XBPS_MACHINE} == i686 ]; then
	ovmf-X64_package() {
		short_desc="Tianocore UEFI firmware for qemu - X64"
		pkg_install() {
			vinstall Build/OvmfX64/RELEASE_${_toolchain_opt}/FV/OVMF_CODE.fd 644 usr/share/ovmf OVMF_CODE-X64.fd
			vinstall Build/OvmfX64/RELEASE_${_toolchain_opt}/FV/OVMF_VARS.fd 644 usr/share/ovmf OVMF_VARS-X64.fd
			vlicense OvmfPkg/License.txt
		}
	}
fi
