# Template build file for 'cross-armv7l-linux-gnueabihf'
#
_binutils_version=2.32
_gcc_version=9.1.0
_glibc_version=2.29
_linux_version=4.19

_triplet=armv7l-linux-gnueabihf
_fpuflags="--with-arch=armv7-a --with-fpu=vfpv3 --with-float=hard"
_archflags="-march=armv7-a -mfpu=vfpv3 -mfloat-abi=hard"
_sysroot="/usr/${_triplet}"

pkgname=cross-${_triplet}
version=0.31
revision=1
short_desc="GNU Cross toolchain for the ${_triplet} LE target (binutils/gcc/glibc)"
maintainer="Juan RP <xtraeme@voidlinux.org>"
homepage="https://www.voidlinux.org/"
license="GPL-2.0-or-later, GPL-3.0-or-later, LGPL-2.1-or-later"
distfiles="
 ${GNU_SITE}/binutils/binutils-${_binutils_version}.tar.xz
 ${GNU_SITE}/gcc/gcc-${_gcc_version}/gcc-${_gcc_version}.tar.xz
 http://ftp.gnu.org/gnu/glibc/glibc-${_glibc_version}.tar.xz
 ${KERNEL_SITE}/kernel/v4.x/linux-${_linux_version}.tar.xz"
checksum="0ab6c55dd86a92ed561972ba15b9b70a8b9f75557f896446c82e8b36e473ee04
 79a66834e96a6050d8fe78db2c3b32fb285b230b855d0a66288235bc04b327a0
 f3eeb8d57e25ca9fc13c2af3dae97754f9f643bc69229546828e3a240e2af04b
 0c68f5655528aed4f99dae71a5b259edc93239fa899e2df79c055275c21749a1"

lib32disabled=yes
nocross=yes
nopie=yes
nodebug=yes
create_wrksrc=yes

hostmakedepends="flex python3"
makedepends="isl15-devel libmpc-devel zlib-devel"
depends="${pkgname}-libc-${version}_${revision}"
nostrip_files="libcaf_single.a libgcc.a libgcov.a libgcc_eh.a
 libgnarl_pic.a libgnarl.a libgnat_pic.a libgnat.a"
archs="i686 x86_64"

_apply_patch() {
	local args="$1" pname="$(basename $2)"

	if [ ! -f ".${pname}_done" ]; then
		patch -N $args -i $2
		touch .${pname}_done
	fi
}

_linux_headers() {
	[ -f ${wrksrc}/.linux_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building Linux API headers for ARM\n"

	cd linux-${_linux_version}

	make ARCH=arm headers_check
	make ARCH=arm INSTALL_HDR_PATH=${_sysroot}/usr headers_install

	touch ${wrksrc}/.linux_build_done
}

_binutils_build() {
	local _args

	[ -f ${wrksrc}/.binutils_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross binutils\n"
	[ ! -d binutils-build ] && mkdir binutils-build
	cd binutils-build

	_args="--prefix=/usr"
	_args+=" --target=${_triplet}"
	_args+=" --with-sysroot=${_sysroot}"
	_args+=" --disable-nls"
	_args+=" --disable-shared"
	_args+=" --disable-multilib"
	_args+=" --disable-werror"
	_args+=" --with-system-zlib"

	../binutils-${_binutils_version}/configure ${_args}

	make configure-host
	make ${makejobs}
	make install

	touch ${wrksrc}/.binutils_build_done
}

_gcc_bootstrap() {
	local _args

	[ -f ${wrksrc}/.gcc_bootstrap_done ] && return 0

	cd ${wrksrc}/gcc-${_gcc_version}
	_apply_patch -p0 ${FILESDIR}/fix-cxxflags-passing.patch
	_apply_patch -p0 ${FILESDIR}/non-nullness.patch

	msg_normal "Building cross gcc bootstrap\n"

	[ ! -d ../gcc-bootstrap ] && mkdir ../gcc-bootstrap
	cd ../gcc-bootstrap

	_args="--prefix=/usr"
	_args+=" --target=${_triplet}"
	_args+=" --without-headers"
	_args+=" --disable-nls"
	_args+=" --disable-shared"
	_args+=" --disable-libquadmath"
	_args+=" --disable-decimal-float"
	_args+=" --disable-libgomp"
	_args+=" --disable-libmpx"
	_args+=" --disable-libmudflap"
	_args+=" --disable-libssp"
	_args+=" --disable-libitm"
	_args+=" --disable-libatomic"
	_args+=" --disable-threads"
	_args+=" --enable-languages=c"
	_args+=" --disable-sjlj-exceptions"
	_args+=" --disable-multilib"
	_args+=" --with-gnu-ld"
	_args+=" --with-gnu-as"
	_args+=" ${_fpuflags}"

	CFLAGS="-O0 -g0" CXXFLAGS="-O0 -g0" \
		../gcc-${_gcc_version}/configure ${_args}

	make ${makejobs}
	make install

	touch ${wrksrc}/.gcc_bootstrap_done
}

_glibc_headers() {
	local _args f

	[ -f ${wrksrc}/.glibc_headers_done ] && return 0

	cd ${wrksrc}/glibc-${_glibc_version}
	if [ -d "${XBPS_SRCPKGDIR}/glibc/patches" ]; then
		for f in ${XBPS_SRCPKGDIR}/glibc/patches/*.patch; do
			_apply_patch -p1 "$f"
		done
	fi

	cd ${wrksrc}
	msg_normal "Building cross glibc headers\n"

	[ ! -d glibc-headers ] && mkdir glibc-headers
	cd glibc-headers

	echo "libc_cv_forced_unwind=yes" > config.cache
	echo "libc_cv_c_cleanup=yes" >> config.cache

	export CC="${_triplet}-gcc" LD="${_triplet}-ld" \
		AS="${_triplet}-as" CPP="${_triplet}-cpp"

	_args="--prefix=/usr"
	_args+=" --host=${_triplet}"
	_args+=" --with-headers=${_sysroot}/usr/include"
	_args+=" --config-cache"
	_args+=" --enable-obsolete-rpc"
	_args+=" --enable-obsolete-nsl"
	_args+=" --enable-kernel=2.6.27"
	_args+=" ${_fpuflags}"

	../glibc-${_glibc_version}/configure ${_args}

	make -k install-headers cross_compiling=yes \
		install_root=${_sysroot}

	touch ${wrksrc}/.glibc_headers_done
}

_glibc_build() {
	local _args

	[ -f ${wrksrc}/.glibc_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross glibc\n"

	[ ! -d glibc-build ] && mkdir glibc-build
	cd glibc-build

	echo "libc_cv_forced_unwind=yes" > config.cache
	echo "libc_cv_c_cleanup=yes" >> config.cache

	export CC="${_triplet}-gcc" LD="${_triplet}-ld" \
		AS="${_triplet}-as" CPP="${_triplet}-cpp"
	export CFLAGS="-Os -pipe ${_archflags}"

	_args="--prefix=/usr"
	_args+=" --host=${_triplet}"
	_args+=" --with-headers=${_sysroot}/usr/include"
	_args+=" --config-cache"
	_args+=" --disable-profile"
	_args+=" --enable-obsolete-rpc"
	_args+=" --enable-obsolete-nsl"
	_args+=" --disable-werror"
	_args+=" --enable-kernel=2.6.27"
	_args+=" ${_fpuflags}"

	../glibc-${_glibc_version}/configure ${_args}

	make ${makejobs}
	make install_root=${_sysroot} install

	touch ${wrksrc}/.glibc_build_done
}

_gcc_build() {
	local _args

	[ -f ${wrksrc}/.gcc_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross gcc final\n"

	[ ! -d gcc-build ] && mkdir gcc-build
	cd gcc-build

	unset LD AS CPP
	export CC="gcc" CFLAGS="-Os -pipe"

	# Make this link to target libs.
	if [ ! -f .sed_subst_done ]; then
		sed -e "s, /lib/, ${_sysroot}/lib/,g;s, /usr/lib/, ${_sysroot}/usr/lib/,g" \
			-i ${_sysroot}/lib/libc.so ${_sysroot}/lib/libpthread.so
		touch .sed_subst_done
	fi

	_args="--prefix=/usr"
	_args+=" --libdir=/usr/lib"
	_args+=" --libexecdir=/usr/lib"
	_args+=" --target=${_triplet}"
	_args+=" --with-sysroot=${_sysroot}"
	_args+=" --enable-languages=c,ada,c++,fortran,lto"
	_args+=" --with-gnu-as"
	_args+=" --with-gnu-ld"
	_args+=" --disable-multilib"
	_args+=" --disable-werror"
	_args+=" --disable-nls"
	_args+=" --disable-sjlj-exceptions"
	_args+=" --enable-threads=posix"
	_args+=" --enable-long-longx"
	_args+=" --enable-shared"
	_args+=" --enable-linker-build-id"
	_args+=" --enable-gnu-unique-object"
	_args+=" --enable-libada"
	_args+=" --enable-lto"
	_args+=" --enable-default-pie"
	_args+=" --enable-default-ssp"
	_args+=" --disable-libquadmath"
	_args+=" --disable-libatomic"
	_args+=" --disable-libssp"
	_args+=" --disable-libmpx"
	_args+=" --disable-libmudflap"
	_args+=" --disable-libsanitizer"
	_args+=" --disable-libcilkrts"
	_args+=" --disable-libitm"
	_args+=" --disable-libvtv"
	_args+=" --disable-libstdcxx-pch"
	_args+=" --enable-libstdcxx-time"
	_args+=" --with-linker-hash-style=gnu"
	_args+=" ${_fpuflags}"

	../gcc-${_gcc_version}/configure ${_args}

	make ${makejobs}

	touch ${wrksrc}/.gcc_build_done
}

do_build() {
	for f in include lib bin; do
		if [ ! -d ${_sysroot}/usr/${f} ]; then
			mkdir -p ${_sysroot}/usr/${f}
		fi
		if [ ! -h ${_sysroot}/${f} ]; then
			ln -sfr ${_sysroot}/usr/${f} ${_sysroot}/${f}
		fi
	done
	# Ensure we use sane environment
	unset CC CXX CPP LD AS AR RANLIB OBJDUMP READELF NM
	unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS
	export CFLAGS="-Os" CXXFLAGS="-Os"

	_binutils_build
	_gcc_bootstrap
	_linux_headers
	_glibc_headers
	_glibc_build
	_gcc_build
}

do_install() {
	for f in include lib bin; do
		if [ ! -d ${DESTDIR}/${_sysroot}/usr/${f} ]; then
			mkdir -p ${DESTDIR}/${_sysroot}/usr/${f}
		fi
		if [ ! -h ${DESTDIR}/${_sysroot}/${f} ]; then
			ln -sfr ${DESTDIR}/${_sysroot}/usr/${f} \
				${DESTDIR}/${_sysroot}/${f}
		fi
	done
	# install cross binutils
	cd ${wrksrc}/binutils-build
	make DESTDIR=${DESTDIR} install

	# install cross gcc
	cd ${wrksrc}/gcc-build
	make DESTDIR=${DESTDIR} install

	# move libcc1.so* to the sysroot
	mv ${DESTDIR}/usr/lib/libcc1.so* ${DESTDIR}/${_sysroot}/usr/lib

	# install linux API headers for MIPS
	cd ${wrksrc}/linux-${_linux_version}
	make ARCH=arm INSTALL_HDR_PATH=${DESTDIR}/${_sysroot}/usr headers_install
	rm -f $(find ${DESTDIR}/${_sysroot}/usr/include -name .install -or -name ..install.cmd)
	rm -rf ${DESTDIR}/${_sysroot}/usr/include/drm

	# install glibc for target
	cd ${wrksrc}/glibc-build
	make install_root=${DESTDIR}/${_sysroot} install install-headers

	# symlinks for gnarl and gnat shared libraries
	_majorver=${_gcc_version%.*.*}
	_adalib=usr/lib/gcc/${_triplet}/${_gcc_version}/adalib
	mv -v ${DESTDIR}/${_adalib}/libgnarl-${_majorver}.so ${DESTDIR}/${_sysroot}/usr/lib
	mv -v ${DESTDIR}/${_adalib}/libgnat-${_majorver}.so ${DESTDIR}/${_sysroot}/usr/lib
	ln -svf libgnarl-${_majorver}.so libgnarl.so
	ln -svf libgnat-${_majorver}.so libgnat.so
	rm -vf ${DESTDIR}/${_adalib}/libgna{rl,t}.so

	# Remove unnecessary stuff
	rm -f ${DESTDIR}/usr/lib*/libiberty.a
	rm -rf ${DESTDIR}/usr/share
	rm -rf ${DESTDIR}/${_sysroot}/{sbin,lib,etc,var}
	rm -rf ${DESTDIR}/${_sysroot}/usr/{sbin,share,libexec}
	rm -rf ${DESTDIR}/${_sysroot}/usr/lib/gconv
	rm -f ${DESTDIR}/${_sysroot}/libexec
}

cross-armv7l-linux-gnueabihf-libc_package() {
	short_desc+=" - glibc files"
	nostrip=yes
	noshlibprovides=yes
	noverifyrdeps=yes
	pkg_install() {
		vmove ${_sysroot}
	}
}
