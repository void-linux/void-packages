diff --git a/libshaderc/src/shaderc.cc b/libshaderc/src/shaderc.cc
index 3c3c3de..b5fc6cb 100644
--- libshaderc/src/shaderc.cc
+++ libshaderc/src/shaderc.cc
@@ -20,7 +20,7 @@
 #include <sstream>
 #include <vector>
 
-#include "SPIRV/spirv.hpp"
+#include "glslang/SPIRV/spirv.hpp"
 
 #include "libshaderc_util/compiler.h"
 #include "libshaderc_util/counting_includer.h"
diff --git a/libshaderc_util/src/compiler.cc b/libshaderc_util/src/compiler.cc
index ef7867f..acc172b 100644
--- libshaderc_util/src/compiler.cc
+++ libshaderc_util/src/compiler.cc
@@ -26,7 +26,7 @@
 #include "libshaderc_util/string_piece.h"
 #include "libshaderc_util/version_profile.h"
 
-#include "SPIRV/GlslangToSpv.h"
+#include "glslang/SPIRV/GlslangToSpv.h"
 
 namespace {
 using shaderc_util::string_piece;
@@ -291,17 +291,12 @@ std::tuple<bool, std::vector<uint32_t>, size_t> Compiler::Compile(
       bases[static_cast<int>(UniformKind::StorageBuffer)]);
   shader.setShiftUavBinding(
       bases[static_cast<int>(UniformKind::UnorderedAccessView)]);
-  shader.setHlslIoMapping(hlsl_iomap_);
   shader.setResourceSetBinding(
       hlsl_explicit_bindings_[static_cast<int>(used_shader_stage)]);
   shader.setEnvClient(target_client_info.client,
                       target_client_info.client_version);
   shader.setEnvTarget(target_client_info.target_language,
                       target_client_info.target_language_version);
-  if (hlsl_functionality1_enabled_) {
-    shader.setEnvTargetHlslFunctionality1();
-  }
-
   const EShMessages rules = GetMessageRules(target_env_, source_language_,
                                             hlsl_offsets_,
                                             generate_debug_info_);
@@ -478,9 +473,6 @@ std::tuple<bool, std::string, std::string> Compiler::PreprocessShader(
   }
   shader.setEnvClient(target_client_info.client,
                       target_client_info.client_version);
-  if (hlsl_functionality1_enabled_) {
-    shader.setEnvTargetHlslFunctionality1();
-  }
 
   // The preprocessor might be sensitive to the target environment.
   // So combine the existing rules with the just-give-me-preprocessor-output
