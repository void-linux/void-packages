Setting default values in c++ function bodies is wrong.

--- a/src/str.cpp	2002-01-17 20:56:42.000000000 +0100
+++ b/src/str.cpp	2015-10-09 11:49:16.152999859 +0200
@@ -11,7 +11,7 @@
 
 const char Str::nul = '\0';
 
-Str::Str(const char * string=NULL){
+Str::Str(const char * string){
   s=NULL;
   set(string);
 }
@@ -25,7 +25,7 @@
   if (s) delete[] s;
 }
 
-void Str::set(const char * string=NULL){
+void Str::set(const char * string){
   if (s) delete[] s;
   if (string){
     s=new char[strlen(string)+1];
@@ -71,7 +71,7 @@
   return (strlen(s));
 }
 
-bool Str::isEqual(Str * str, bool case_sensitive = true){
+bool Str::isEqual(Str * str, bool case_sensitive){
   if (case_sensitive){
     return (!strcmp(s, str->s));
   }
--- a/src/pipe.cpp	2002-01-21 05:08:13.000000000 +0100
+++ b/src/pipe.cpp	2015-10-09 11:52:00.066011676 +0200
@@ -43,11 +43,11 @@
   return !(full_level>0) && !fixed;
 }
 
-void Pipe::setFixed(bool flag=true){
+void Pipe::setFixed(bool flag){
   fixed=flag;
 }
 
-void Pipe::setBonus(Bonus bonus=NormalBonus){
+void Pipe::setBonus(Bonus bonus){
   this->bonus=bonus;
 }
 
--- a/src/pointer.cpp	2002-01-17 20:56:41.000000000 +0100
+++ b/src/pointer.cpp	2015-10-09 11:53:08.399016602 +0200
@@ -17,7 +17,7 @@
 
 #include "pointer.h"
 
-Pointer::Pointer(int row=0, int column=0){
+Pointer::Pointer(int row, int column){
   this->row=row;
   this->column=column;
   this->moved_flag=true;
--- a/src/score.cpp	2002-01-17 20:56:42.000000000 +0100
+++ b/src/score.cpp	2015-10-09 11:54:15.372021431 +0200
@@ -18,7 +18,7 @@
 #include "score.h"
 #include <math.h>
 
-Score::Score(int value=0){
+Score::Score(int value){
   this->value=value;
   delta=0;
   changed=true;
--- a/src/list.cpp	2002-01-17 20:56:35.000000000 +0100
+++ b/src/list.cpp	2015-10-09 11:57:17.844034586 +0200
@@ -125,7 +125,7 @@
   return (insert(indexOf(i), obj));
 }
 
-List::Result List::remove(Index * index, bool del=false){
+List::Result List::remove(Index * index, bool del){
   if (isEmpty()) return EmptyList;
   if (!index) return NullIndex;
 
@@ -155,7 +155,7 @@
   return Removed;
 }
 
-void List::empty(bool del=true){
+void List::empty(bool del){
   while (!isEmpty())
     remove(getFirst(), del);
 }
--- a/src/hash.cpp	2002-01-17 20:56:30.000000000 +0100
+++ b/src/hash.cpp	2015-10-09 11:59:00.879042014 +0200
@@ -55,7 +55,7 @@
   return(sum % nbuckets);
 }
 
-Hash::Hash(int bs=256){
+Hash::Hash(int bs){
  int i;
  nbuckets=bs;
  lbuckets=new (List *)[nbuckets];
@@ -99,7 +99,7 @@
   return NotAdded;
 }
 
-Hash::Result Hash::remove(Str * str, bool del=false){
+Hash::Result Hash::remove(Str * str, bool del){
   if (str){
     Index * i;
     List * list=lbuckets[function(str)];
@@ -135,7 +135,7 @@
   return NULL;
 }
 
-void Hash::empty(bool del=true){
+void Hash::empty(bool del){
   int i;
   List * list;
   for (i=0;i<nbuckets;i++){
--- a/src/image.cpp	2002-01-17 20:56:32.000000000 +0100
+++ b/src/image.cpp	2015-10-09 12:00:23.067047939 +0200
@@ -19,7 +19,7 @@
 #include "SDL_image.h"
 #include <stdio.h>
 
-Image::Image(Str * filename=NULL):Graphic(){
+Image::Image(Str * filename):Graphic(){
   if (filename) load(filename);
 }
 
--- a/src/eventmanager.cpp	2002-01-17 20:56:26.000000000 +0100
+++ b/src/eventmanager.cpp	2015-10-09 12:04:50.991067255 +0200
@@ -40,7 +40,7 @@
   lista_streams->remove(lista_streams->indexOf(s));
 }
 
-void EventManager::pumpEvents(bool wait=false){
+void EventManager::pumpEvents(bool wait){
   SDL_Event event;
   Index * stream;
   bool got=false;
--- a/src/graphic.cpp	2002-01-17 20:56:29.000000000 +0100
+++ b/src/graphic.cpp	2015-10-09 12:06:15.212073327 +0200
@@ -44,11 +44,11 @@
   if (pixels) free(pixels);
 }
 
-void Graphic::setAlpha(char value=OPAQUE){
+void Graphic::setAlpha(char value){
   SDL_SetAlpha(surface, SDL_SRCALPHA, value);
 }
 
-void Graphic::enableClipping(bool flag=true){
+void Graphic::enableClipping(bool flag){
 
   if (flag){
     SDL_Rect rect;
@@ -68,7 +68,7 @@
   clip_height=height;
 }
 
-void Graphic::flip(Axis a=HAxis){
+void Graphic::flip(Axis a){
   if (surface){
     if (SDL_MUSTLOCK(surface))
       if (SDL_LockSurface(surface)<0) return;
