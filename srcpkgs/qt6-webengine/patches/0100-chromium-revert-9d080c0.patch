Revert 9d080c0934b848ee4a05013c78641e612fcc1e03

--- qt6-webengine-6.4.2.orig/src/3rdparty/chromium/build/config/sanitizers/BUILD.gn
+++ qt6-webengine-6.4.2/src/3rdparty/chromium/build/config/sanitizers/BUILD.gn
@@ -271,11 +271,11 @@ config("asan_flags") {
   if (is_asan) {
     cflags += [ "-fsanitize=address" ]
     if (is_win) {
-      if (!defined(asan_win_blocklist_path)) {
-        asan_win_blocklist_path =
+      if (!defined(asan_win_blacklist_path)) {
+        asan_win_blacklist_path =
             rebase_path("//tools/memory/asan/blocklist_win.txt", root_build_dir)
       }
-      cflags += [ "-fsanitize-ignorelist=$asan_win_blocklist_path" ]
+      cflags += [ "-fsanitize-blacklist=$asan_win_blacklist_path" ]
     }
   }
 }
@@ -305,13 +305,13 @@ config("link_shared_library") {
 config("cfi_flags") {
   cflags = []
   if (is_cfi && current_toolchain == default_toolchain) {
-    if (!defined(cfi_ignorelist_path)) {
-      cfi_ignorelist_path =
+    if (!defined(cfi_blacklist_path)) {
+      cfi_blacklist_path =
           rebase_path("//tools/cfi/ignores.txt", root_build_dir)
     }
     cflags += [
       "-fsanitize=cfi-vcall",
-      "-fsanitize-ignorelist=$cfi_ignorelist_path",
+      "-fsanitize-blacklist=$cfi_blacklist_path",
     ]
 
     if (use_cfi_cast) {
@@ -408,14 +408,14 @@ config("msan_flags") {
   if (is_msan) {
     assert(is_linux || is_chromeos,
            "msan only supported on linux x86_64/ChromeOS")
-    if (!defined(msan_ignorelist_path)) {
-      msan_ignorelist_path =
-          rebase_path("//tools/msan/ignorelist.txt", root_build_dir)
+    if (!defined(msan_blacklist_path)) {
+      msan_blacklist_path =
+          rebase_path("//tools/msan/blacklist.txt", root_build_dir)
     }
     cflags = [
       "-fsanitize=memory",
       "-fsanitize-memory-track-origins=$msan_track_origins",
-      "-fsanitize-ignorelist=$msan_ignorelist_path",
+      "-fsanitize-blacklist=$msan_blacklist_path",
     ]
   }
 }
@@ -423,13 +423,13 @@ config("msan_flags") {
 config("tsan_flags") {
   if (is_tsan) {
     assert(is_linux || is_chromeos, "tsan only supported on linux x86_64")
-    if (!defined(tsan_ignorelist_path)) {
-      tsan_ignorelist_path =
+    if (!defined(tsan_blacklist_path)) {
+      tsan_blacklist_path =
           rebase_path("//tools/memory/tsan_v2/ignores.txt", root_build_dir)
     }
     cflags = [
       "-fsanitize=thread",
-      "-fsanitize-ignorelist=$tsan_ignorelist_path",
+      "-fsanitize-blacklist=$tsan_blacklist_path",
     ]
   }
 }
@@ -437,8 +437,8 @@ config("tsan_flags") {
 config("ubsan_flags") {
   cflags = []
   if (is_ubsan) {
-    if (!defined(ubsan_ignorelist_path)) {
-      ubsan_ignorelist_path =
+    if (!defined(ubsan_blacklist_path)) {
+      ubsan_blacklist_path =
           rebase_path("//tools/ubsan/ignorelist.txt", root_build_dir)
     }
     cflags += [
@@ -455,7 +455,7 @@ config("ubsan_flags") {
       "-fsanitize=signed-integer-overflow",
       "-fsanitize=unreachable",
       "-fsanitize=vla-bound",
-      "-fsanitize-ignorelist=$ubsan_ignorelist_path",
+      "-fsanitize-blacklist=$ubsan_blacklist_path",
     ]
     if (!is_clang) {
       # These exposes too much illegal C++14 code to compile on anything stricter than clang:
@@ -496,8 +496,8 @@ config("ubsan_no_recover") {
 
 config("ubsan_security_flags") {
   if (is_ubsan_security) {
-    if (!defined(ubsan_security_ignorelist_path)) {
-      ubsan_security_ignorelist_path =
+    if (!defined(ubsan_security_blacklist_path)) {
+      ubsan_security_blacklist_path =
           rebase_path("//tools/ubsan/security_ignorelist.txt", root_build_dir)
     }
     cflags = [
@@ -505,7 +505,7 @@ config("ubsan_security_flags") {
       "-fsanitize=shift",
       "-fsanitize=signed-integer-overflow",
       "-fsanitize=vla-bound",
-      "-fsanitize-ignorelist=$ubsan_security_ignorelist_path",
+      "-fsanitize-blacklist=$ubsan_security_blacklist_path",
     ]
   }
 }
@@ -518,13 +518,13 @@ config("ubsan_null_flags") {
 
 config("ubsan_vptr_flags") {
   if (is_ubsan_vptr) {
-    if (!defined(ubsan_vptr_ignorelist_path)) {
-      ubsan_vptr_ignorelist_path =
+    if (!defined(ubsan_vptr_blacklist_path)) {
+      ubsan_vptr_blacklist_path =
           rebase_path("//tools/ubsan/vptr_ignorelist.txt", root_build_dir)
     }
     cflags = [
       "-fsanitize=vptr",
-      "-fsanitize-ignorelist=$ubsan_vptr_ignorelist_path",
+      "-fsanitize-blacklist=$ubsan_vptr_blacklist_path",
     ]
     if (!is_clang) {
       # Clang specific flag:
--- qt6-webengine-6.4.2.orig/src/3rdparty/chromium/build_overrides/build.gni
+++ qt6-webengine-6.4.2/src/3rdparty/chromium/build_overrides/build.gni
@@ -43,15 +43,15 @@ declare_args() {
 # Allows different projects to specify their own suppression/ignore lists for
 # sanitizer tools.
 # asan_suppressions_file = "path/to/asan_suppressions.cc"
-# asan_win_ignorelist_path = "path/to/asan/blocklist_win.txt"
+# asan_win_blacklist_path = "path/to/asan/blocklist_win.txt"
 # lsan_suppressions_file = "path/to/lsan_suppressions.cc"
 # tsan_suppressions_file = "path/to/tsan_suppressions.cc"
-# tsan_ignorelist_path = "path/to/tsan/ignores.txt"
-# msan_ignorelist_path = "path/to/msan/ignorelist.txt"
-# ubsan_ignorelist_path = "path/to/ubsan/ignorelist.txt"
-# ubsan_vptr_ignorelist_path = "path/to/ubsan/vptr_ignorelist.txt"
-# ubsan_security_ignorelist_path = "path/to/ubsan/security_ignorelist.txt"
-# cfi_ignorelist_path = "path/to/cfi/ignores.txt"
+# tsan_blacklist_path = "path/to/tsan/ignores.txt"
+# msan_blacklist_path = "path/to/msan/blacklist.txt"
+# ubsan_blacklist_path = "path/to/ubsan/blacklist.txt"
+# ubsan_vptr_blacklist_path = "path/to/ubsan/vptr_blacklist.txt"
+# ubsan_security_blacklist_path = "path/to/ubsan/security_blacklist.txt"
+# cfi_blacklist_path = "path/to/cfi/ignores.txt"
 
 if (host_os == "mac" || is_apple) {
   # Needed for is_apple when targeting macOS or iOS, independent of host.
