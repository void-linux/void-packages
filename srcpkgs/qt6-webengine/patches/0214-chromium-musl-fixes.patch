--- a/src/3rdparty/chromium/sandbox/linux/suid/process_util.h
+++ b/src/3rdparty/chromium/sandbox/linux/suid/process_util.h
@@ -12,6 +12,15 @@
 #include <stdint.h>
 #include <sys/types.h>
 
+#if !defined(__GLIBC__) && !defined(TEMP_FAILURE_RETRY)
+# define TEMP_FAILURE_RETRY(expression) \
+	(__extension__			\
+	 ({ long int __result;		\
+	  do __result = (long int) (expression); \
+	  while (__result == -1L && errno == EINTR); \
+	  __result; }))
+#endif
+
 // This adjusts /proc/process/oom_score_adj so the Linux OOM killer
 // will prefer certain process types over others. The range for the
 // adjustment is [-1000, 1000], with [0, 1000] being user accessible.
--- a/src/3rdparty/chromium/services/device/serial/serial_io_handler_posix.cc
+++ b/src/3rdparty/chromium/services/device/serial/serial_io_handler_posix.cc
@@ -6,6 +6,7 @@
 
 #include <sys/ioctl.h>
 #include <termios.h>
+#include <asm-generic/ioctls.h>
 
 #include <algorithm>
 #include <utility>
--- a/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h
+++ b/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h
@@ -38,6 +38,10 @@
 #include "common/memory_allocator.h"
 #include "google_breakpad/common/minidump_format.h"
 
+#ifndef __GLIBC__
+#define _libc_fpstate _fpstate
+#endif
+
 namespace google_breakpad {
 
 // Wraps platform-dependent implementations of accessors to ucontext_t structs.
--- a/src/3rdparty/chromium/third_party/ffmpeg/libavutil/cpu.c
+++ b/src/3rdparty/chromium/third_party/ffmpeg/libavutil/cpu.c
@@ -41,8 +41,10 @@
 #include <sys/param.h>
 #endif
 #include <sys/types.h>
+#ifdef __GLIBC__
 #include <sys/sysctl.h>
 #endif
+#endif
 #if HAVE_UNISTD_H
 #include <unistd.h>
 #endif
--- a/src/3rdparty/chromium/third_party/perfetto/include/perfetto/ext/base/thread_utils.h
+++ b/src/3rdparty/chromium/third_party/perfetto/include/perfetto/ext/base/thread_utils.h
@@ -29,9 +29,7 @@
 #include <algorithm>
 #endif
 
-#if PERFETTO_BUILDFLAG(PERFETTO_OS_ANDROID)
 #include <sys/prctl.h>
-#endif
 
 // Internal implementation utils that aren't as widely useful/supported as
 // base/thread_utils.h.
@@ -58,7 +56,7 @@ inline bool MaybeSetThreadName(const std
 
 inline bool GetThreadName(std::string& out_result) {
   char buf[16] = {};
-#if PERFETTO_BUILDFLAG(PERFETTO_OS_ANDROID)
+#if !defined(__GLIBC__)
   if (prctl(PR_GET_NAME, buf) != 0)
     return false;
 #else
--- a/src/3rdparty/chromium/third_party/lss/linux_syscall_support.h
+++ b/src/3rdparty/chromium/third_party/lss/linux_syscall_support.h
@@ -1300,6 +1300,18 @@ struct kernel_statfs {
 #ifndef __NR_fallocate
 #define __NR_fallocate          285
 #endif
+
+#if !defined(__GLIBC__)
+#ifdef __NR_pread
+#undef __NR_pread
+#endif
+#ifdef __NR_pwrite
+#undef __NR_pwrite
+#endif
+#define __NR_pread __NR_pread64
+#define __NR_pwrite __NR_pwrite64
+#endif /* !defined(__GLIBC__) */
+
 #ifndef __NR_getrandom
 #define __NR_getrandom          318
 #endif
--- a/src/3rdparty/chromium/net/dns/dns_config_service_posix.cc
+++ b/src/3rdparty/chromium/net/dns/dns_config_service_posix.cc
@@ -93,7 +93,8 @@ absl::optional<DnsConfig> ReadDnsConfig(
 
   absl::optional<DnsConfig> dns_config;
 // TODO(fuchsia): Use res_ninit() when it's implemented on Fuchsia.
-#if defined(OS_OPENBSD) || defined(OS_FUCHSIA)
+#if defined(OS_OPENBSD) || defined(OS_FUCHSIA) || \
+  (defined(OS_LINUX) && !defined(__GLIBC__))
   // Note: res_ninit in glibc always returns 0 and sets RES_INIT.
   // res_init behaves the same way.
   memset(&_res, 0, sizeof(_res));
