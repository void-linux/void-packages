Several dependencies have needlessly restrictive version requirements, which
causes build failures against more up-to-date Void packages.

--- a/pyproject.toml
+++ b/pyproject.toml
@@ -10,13 +10,13 @@
 [build-system]
 build-backend = 'mesonpy'
 requires = [
-    "meson-python>=0.12.1,<0.14.0", # already working with 0.13.x series at branch time
-    "Cython>=0.29.35,<3.0",  # when updating version, also update check in meson.build
-    "pybind11>=2.10.4,<2.11.0",
-    "pythran>=0.12.0,<0.14.0", # already working with 0.13.x series at branch time
+    "meson-python>=0.12.1", # already working with 0.13.x series at branch time
+    "Cython>=0.29.35",  # when updating version, also update check in meson.build
+    "pybind11>=2.10.4",
+    "pythran>=0.12.0", # already working with 0.13.x series at branch time
     # `wheel` is needed for non-isolated builds, given that `meson-python`
     # doesn't list it as a runtime requirement (at least in 0.5.0)
-    "wheel<0.41.0",
+    "wheel",
 
     # NumPy dependencies - to update these, sync from
     # https://github.com/scipy/oldest-supported-numpy/, and then
@@ -40,7 +40,7 @@
     # however macOS was broken and it's safe C API/ABI-wise to build against 1.21.6
     # (see oldest-supported-numpy issues gh-28 and gh-45)
     "numpy==1.21.6; python_version=='3.10' and (platform_system!='Windows' and platform_machine!='loongarch64') and platform_python_implementation != 'PyPy'",
-    "numpy==1.23.2; python_version=='3.11' and platform_python_implementation != 'PyPy'",
+    "numpy>=1.23.2; python_version=='3.11' and platform_python_implementation != 'PyPy'",
 
     # For Python versions which aren't yet officially supported,
     # we specify an unpinned NumPy which allows source distributions
