Several dependencies have needlessly restrictive version requirements, which
causes build failures against more up-to-date Void packages.

--- a/pyproject.toml
+++ b/pyproject.toml
@@ -11,14 +11,14 @@
 build-backend = 'mesonpy'
 requires = [
     # Reason for `<`: future-proofing (0.14.0 released and known to work)
-    "meson-python>=0.12.1,<0.15.0",
+    "meson-python>=0.12.1",
     # Reason for `<`: we want to build the 1.11.x releases with Cython 0.29.x
     # (too many changes in 3.0)
-    "Cython>=0.29.35,<3.0",   # when updating version, also update check in meson.build
+    "Cython>=0.29.35",   # when updating version, also update check in meson.build
     # Reason for `<`: future-proofing (2.11.1 is the most recent version)
-    "pybind11>=2.10.4,<2.11.1",
+    "pybind11>=2.10.4",
     # Reason for `<`: future-proofing (0.14.0 released and known to work)
-    "pythran>=0.12.0,<0.15.0",
+    "pythran>=0.12.0",
 
     # NumPy dependencies - to update these, sync from
     # https://github.com/scipy/oldest-supported-numpy/, and then
@@ -42,8 +42,8 @@
     # however macOS was broken and it's safe C API/ABI-wise to build against 1.21.6
     # (see oldest-supported-numpy issues gh-28 and gh-45)
     "numpy==1.21.6; python_version=='3.10' and (platform_system!='Windows' and platform_machine!='loongarch64') and platform_python_implementation != 'PyPy'",
-    "numpy==1.23.2; python_version=='3.11' and platform_python_implementation != 'PyPy'",
-    "numpy>=1.26.0,<1.27.0; python_version=='3.12'",  # no `==` because we expect relevant bug fixes in 1.26.1/2
+    "numpy>=1.23.2; python_version=='3.11' and platform_python_implementation != 'PyPy'",
+    "numpy>=1.26.0; python_version=='3.12'",  # no `==` because we expect relevant bug fixes in 1.26.1/2
 
     # For Python versions which aren't yet officially supported,
     # we specify an unpinned NumPy which allows source distributions
