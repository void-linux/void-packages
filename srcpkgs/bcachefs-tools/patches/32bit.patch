mount(2) takes an unsigned long parameter, which is not u64 on 32-bit
architectures.

--- a/rust-src/src/cmd_mount.rs
+++ b/rust-src/src/cmd_mount.rs
@@ -7,14 +7,14 @@
 use crate::key;
 use crate::key::KeyLoc;
 use crate::logger::SimpleLogger;
-use std::ffi::{CStr, CString, OsStr, c_int, c_char, c_void};
+use std::ffi::{CStr, CString, OsStr, c_int, c_char, c_ulong, c_void};
 use std::os::unix::ffi::OsStrExt;
 
 fn mount_inner(
     src: String,
     target: impl AsRef<std::path::Path>,
     fstype: &str,
-    mountflags: u64,
+    mountflags: c_ulong,
     data: Option<String>,
 ) -> anyhow::Result<()> {
 
@@ -45,7 +45,7 @@
 
 /// Parse a comma-separated mount options and split out mountflags and filesystem
 /// specific options.
-fn parse_mount_options(options: impl AsRef<str>) -> (Option<String>, u64) {
+fn parse_mount_options(options: impl AsRef<str>) -> (Option<String>, c_ulong) {
     use either::Either::*;
     debug!("parsing mount options: {}", options.as_ref());
     let (opts, flags) = options
--- a/libbcachefs/btree_write_buffer.c
+++ b/libbcachefs/btree_write_buffer.c
@@ -340,7 +340,7 @@
 	bch2_journal_pin_add(&c->journal, trans->journal_res.seq, &wb->journal_pin,
 			     bch2_btree_write_buffer_journal_flush);
 
-	atomic64_sub_return_release(btree_write_buffer_ref(new.idx), &wb->state.counter);
+	atomic64_sub_return(btree_write_buffer_ref(new.idx), &wb->state.counter);
 out:
 	preempt_enable();
 	return ret;
