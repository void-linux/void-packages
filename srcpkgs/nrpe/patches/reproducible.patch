--- a/configure
+++ b/configure
@@ -7749,28 +7749,6 @@ fi
 			$as_echo "#define USE_SSL_DH 1" >>confdefs.h
 
 			# Generate DH parameters
-			if test -f "$sslbin"; then
-				echo ""
-				echo "*** Generating DH Parameters for SSL/TLS ***"
-				# OpenSSL 3 removes dhparam -C
-				# check version and use our own parser if needed
-				nagios_ssl_major_version=`$sslbin version | cut -d' ' -f2 | cut -d. -f1`
-
-				test -d include || mkdir include
-				if test "x$nagios_ssl_major_version" = "x3"; then
-
-cat >>confdefs.h <<_ACEOF
-#define OPENSSL_V3 1
-_ACEOF
-
-					test -d src || mkdir src
-					$CC ${srcdir}/src/print_c_code.c -o src/print_c_code
-					$sslbin dhparam -text 2048 | ./src/print_c_code > include/dh.h
-				else
-					# awk to strip off meta data at bottom of dhparam output
-					$sslbin dhparam -C 2048 | awk '/^-----/ {exit} {print}' > include/dh.h
-				fi
-			fi
 		fi
 	fi
 fi
--- /dev/null
+++ b/include/dh.h
@@ -0,0 +1,36 @@
+DH *get_dh2048()
+{
+	static unsigned char dh2048_p[]={
+		0x9F,0x5C,0x30,0xBB,0x81,0x03,0x0B,0x3D,0x51,0x58,0xA5,0x4F,0xA1,0xFD,0xFB,
+		0x10,0xCC,0xE9,0xED,0x3C,0x5C,0xCD,0xE0,0xB4,0xD5,0xEE,0xEA,0x71,0x8D,0xA9,
+		0x8D,0x6D,0x00,0xC4,0xB7,0x4A,0x52,0xBE,0xEE,0xDB,0x0B,0xA0,0xE0,0x04,0xCE,
+		0x80,0x8B,0xA9,0x1B,0x83,0x0F,0x14,0x53,0x6A,0x7F,0x4B,0x1B,0x53,0xBB,0x5C,
+		0xA0,0xFC,0x79,0xD5,0x25,0xC9,0x09,0x60,0x10,0x72,0x3B,0x3F,0x29,0x99,0xBA,
+		0x6A,0x60,0x70,0x67,0x22,0x34,0x20,0x42,0x0A,0x05,0xFA,0x78,0xB6,0x5E,0xA2,
+		0xB5,0x07,0x41,0x90,0x88,0x3F,0x4B,0x42,0x47,0xE7,0xF1,0xBD,0xD1,0xA3,0xF5,
+		0x5C,0x4C,0xB0,0x3D,0x89,0x57,0x35,0xC7,0x86,0x28,0xDE,0x61,0x3E,0xF1,0x0C,
+		0x04,0x58,0x42,0xF0,0xDB,0x4F,0x48,0x4E,0xA6,0xF5,0xD2,0x1F,0x58,0x63,0xDC,
+		0x01,0x88,0xF9,0x23,0xFD,0x69,0xCA,0x9B,0xD1,0xB4,0x4B,0x97,0xF0,0xE0,0x98,
+		0x09,0x17,0x3E,0x3E,0x5A,0x63,0xF9,0x3C,0x57,0x29,0x86,0xA8,0xCF,0xE7,0xD6,
+		0x13,0x80,0x7F,0xB7,0x1A,0x91,0x9E,0x8C,0xA6,0xA6,0x7C,0xCC,0xD0,0xEB,0xCF,
+		0xB6,0xF3,0x6A,0x2A,0x33,0x9F,0x4A,0xF0,0xD0,0xAA,0xBC,0x54,0xAF,0x81,0xF1,
+		0x9D,0xAD,0x88,0x90,0xD8,0x6A,0x7C,0x50,0x20,0x6F,0x2C,0x59,0xB3,0x20,0x5F,
+		0x75,0x76,0xA0,0xFD,0x91,0x29,0xFF,0xD3,0x99,0x5C,0xA9,0x5E,0x81,0x34,0xDA,
+		0x98,0xD0,0xF1,0x65,0xE7,0xA4,0x00,0xD2,0x28,0xC3,0xB3,0xDB,0x33,0x35,0xDF,
+		0xE2,0xF5,0x79,0x17,0x48,0x83,0xE5,0x48,0x47,0xE1,0x64,0x08,0xCF,0x0F,0x00,
+		0x7F,
+	};
+	static unsigned char dh2048_g[]={
+		0x02,
+	};
+	DH *dh;
+
+	if ((dh=DH_new()) == NULL) return(NULL);
+	BIGNUM *p=BN_bin2bn(dh2048_p,sizeof(dh2048_p),NULL);
+	BIGNUM *g=BN_bin2bn(dh2048_g,sizeof(dh2048_g),NULL);
+	if ((p == NULL) || (g == NULL))
+		{ DH_free(dh); return(NULL); }
+	int result = DH_set0_pqg(dh, p, NULL, g);
+	if (result == 0)		{ DH_free(dh); return(NULL); }
+	return(dh);
+}
