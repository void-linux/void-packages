--- a/src/libs/nanotrace/nanotracehr.cpp
+++ b/src/libs/nanotrace/nanotracehr.cpp
@@ -104,7 +104,7 @@ std::string getThreadName()
 {
     std::array<char, 200> buffer;
     buffer[0] = 0;
-#ifdef Q_OS_UNIX
+#ifdef __GLIBC__
     auto rc = pthread_getname_np(pthread_self(), buffer.data(), buffer.size());
     if (rc != 0)
         return {};
--- a/src/libs/utils/qtcassert.cpp
+++ b/src/libs/utils/qtcassert.cpp
@@ -11,7 +11,9 @@
 #if defined(Q_OS_UNIX)
 #include <stdio.h>
 #include <signal.h>
+#ifdef __GLIBC__
 #include <execinfo.h>
+#endif
 #elif defined(_MSC_VER)
 #ifdef QTCREATOR_PCH_H
 #define CALLBACK WINAPI
@@ -29,7 +31,7 @@ void dumpBacktrace(int maxdepth)
     const int ArraySize = 1000;
     if (maxdepth < 0 || maxdepth > ArraySize)
         maxdepth = ArraySize;
-#if defined(Q_OS_UNIX)
+#if defined(Q_OS_UNIX) && defined(__GLIBC__)
     void *bt[ArraySize] = {nullptr};
     int size = backtrace(bt, maxdepth);
     char **lines = backtrace_symbols(bt, size);
--- a/src/plugins/qmldesigner/libs/designercore/exceptions/exception.cpp
+++ b/src/plugins/qmldesigner/libs/designercore/exceptions/exception.cpp
@@ -3,7 +3,7 @@
 
 #include "exception.h"
 
-#ifdef Q_OS_LINUX
+#if defined(Q_OS_LINUX) && defined(__GLIBC__)
 #include <execinfo.h>
 #include <cxxabi.h>
 #endif
--- a/src/plugins/coreplugin/icore.cpp
+++ b/src/plugins/coreplugin/icore.cpp
@@ -1494,7 +1494,7 @@ void ICorePrivate::init()
         using namespace std::chrono_literals;
         m_trimTimer.setInterval(60s);
         // glibc may not actually free memory in free().
-#ifdef Q_OS_LINUX
+#if defined(Q_OS_LINUX) && defined(__GLIBC__)
         connect(&m_trimTimer, &QTimer::timeout, this, [] { malloc_trim(0); });
 #endif
     }
