--- libgo/runtime/go-signal.c
+++ libgo/runtime/go-signal.c
@@ -4,6 +4,8 @@
    Use of this source code is governed by a BSD-style
    license that can be found in the LICENSE file.  */
 
+#include <asm/ptrace.h>
+
 #include <signal.h>
 #include <stdlib.h>
 #include <unistd.h>
@@ -222,7 +224,7 @@ getSiginfo(siginfo_t *info, void *context __attribute__((unused)))
 #endif
 #ifdef __PPC__
   #ifdef __linux__
-       ret.sigpc = ((ucontext_t*)(context))->uc_mcontext.regs->nip;
+       ret.sigpc = ((struct pt_regs *)((ucontext_t*)(context))->uc_mcontext.regs)->nip;
   #endif
   #ifdef _AIX
        ret.sigpc = ((ucontext_t*)(context))->uc_mcontext.jmp_context.iar;
@@ -349,14 +351,16 @@ dumpregs(siginfo_t *info __attribute__((unused)), void *context __attribute__((u
                mcontext_t *m = &((ucontext_t*)(context))->uc_mcontext;
                int i;
 
+               struct pt_regs *regs = m->regs;
+
                for (i = 0; i < 32; i++)
-                       runtime_printf("r%d %X\n", i, m->regs->gpr[i]);
-               runtime_printf("pc  %X\n", m->regs->nip);
-               runtime_printf("msr %X\n", m->regs->msr);
-               runtime_printf("cr  %X\n", m->regs->ccr);
-               runtime_printf("lr  %X\n", m->regs->link);
-               runtime_printf("ctr %X\n", m->regs->ctr);
-               runtime_printf("xer %X\n", m->regs->xer);
+                       runtime_printf("r%d %X\n", i, regs->gpr[i]);
+               runtime_printf("pc  %X\n", regs->nip);
+               runtime_printf("msr %X\n", regs->msr);
+               runtime_printf("cr  %X\n", regs->ccr);
+               runtime_printf("lr  %X\n", regs->link);
+               runtime_printf("ctr %X\n", regs->ctr);
+               runtime_printf("xer %X\n", regs->xer);
          }
   #endif
 #endif

