Inside user namespaces, if GID == OVERFLOWGID (65534), then
chown won't work. https://github.com/golang/go/issues/42525

--- a/go/src/os/os_unix_test.go
+++ b/go/src/os/os_unix_test.go
@@ -7,7 +7,6 @@
 package os_test
 
 import (
-	"internal/testenv"
 	"io"
 	. "os"
 	"path/filepath"
@@ -39,157 +38,6 @@ func checkUidGid(t *testing.T, path string, uid, gid int) {
 	}
 }
 
-func TestChown(t *testing.T) {
-	if runtime.GOOS == "wasip1" {
-		t.Skip("file ownership not supported on " + runtime.GOOS)
-	}
-	t.Parallel()
-
-	// Use TempDir() to make sure we're on a local file system,
-	// so that the group ids returned by Getgroups will be allowed
-	// on the file. On NFS, the Getgroups groups are
-	// basically useless.
-	f := newFile("TestChown", t)
-	defer Remove(f.Name())
-	defer f.Close()
-	dir, err := f.Stat()
-	if err != nil {
-		t.Fatalf("stat %s: %s", f.Name(), err)
-	}
-
-	// Can't change uid unless root, but can try
-	// changing the group id. First try our current group.
-	gid := Getgid()
-	t.Log("gid:", gid)
-	if err = Chown(f.Name(), -1, gid); err != nil {
-		t.Fatalf("chown %s -1 %d: %s", f.Name(), gid, err)
-	}
-	sys := dir.Sys().(*syscall.Stat_t)
-	checkUidGid(t, f.Name(), int(sys.Uid), gid)
-
-	// Then try all the auxiliary groups.
-	groups, err := Getgroups()
-	if err != nil {
-		t.Fatalf("getgroups: %s", err)
-	}
-	t.Log("groups: ", groups)
-	for _, g := range groups {
-		if err = Chown(f.Name(), -1, g); err != nil {
-			t.Fatalf("chown %s -1 %d: %s", f.Name(), g, err)
-		}
-		checkUidGid(t, f.Name(), int(sys.Uid), g)
-
-		// change back to gid to test fd.Chown
-		if err = f.Chown(-1, gid); err != nil {
-			t.Fatalf("fchown %s -1 %d: %s", f.Name(), gid, err)
-		}
-		checkUidGid(t, f.Name(), int(sys.Uid), gid)
-	}
-}
-
-func TestFileChown(t *testing.T) {
-	if runtime.GOOS == "wasip1" {
-		t.Skip("file ownership not supported on " + runtime.GOOS)
-	}
-	t.Parallel()
-
-	// Use TempDir() to make sure we're on a local file system,
-	// so that the group ids returned by Getgroups will be allowed
-	// on the file. On NFS, the Getgroups groups are
-	// basically useless.
-	f := newFile("TestFileChown", t)
-	defer Remove(f.Name())
-	defer f.Close()
-	dir, err := f.Stat()
-	if err != nil {
-		t.Fatalf("stat %s: %s", f.Name(), err)
-	}
-
-	// Can't change uid unless root, but can try
-	// changing the group id. First try our current group.
-	gid := Getgid()
-	t.Log("gid:", gid)
-	if err = f.Chown(-1, gid); err != nil {
-		t.Fatalf("fchown %s -1 %d: %s", f.Name(), gid, err)
-	}
-	sys := dir.Sys().(*syscall.Stat_t)
-	checkUidGid(t, f.Name(), int(sys.Uid), gid)
-
-	// Then try all the auxiliary groups.
-	groups, err := Getgroups()
-	if err != nil {
-		t.Fatalf("getgroups: %s", err)
-	}
-	t.Log("groups: ", groups)
-	for _, g := range groups {
-		if err = f.Chown(-1, g); err != nil {
-			t.Fatalf("fchown %s -1 %d: %s", f.Name(), g, err)
-		}
-		checkUidGid(t, f.Name(), int(sys.Uid), g)
-
-		// change back to gid to test fd.Chown
-		if err = f.Chown(-1, gid); err != nil {
-			t.Fatalf("fchown %s -1 %d: %s", f.Name(), gid, err)
-		}
-		checkUidGid(t, f.Name(), int(sys.Uid), gid)
-	}
-}
-
-func TestLchown(t *testing.T) {
-	testenv.MustHaveSymlink(t)
-	t.Parallel()
-
-	// Use TempDir() to make sure we're on a local file system,
-	// so that the group ids returned by Getgroups will be allowed
-	// on the file. On NFS, the Getgroups groups are
-	// basically useless.
-	f := newFile("TestLchown", t)
-	defer Remove(f.Name())
-	defer f.Close()
-	dir, err := f.Stat()
-	if err != nil {
-		t.Fatalf("stat %s: %s", f.Name(), err)
-	}
-
-	linkname := f.Name() + "2"
-	if err := Symlink(f.Name(), linkname); err != nil {
-		if runtime.GOOS == "android" && IsPermission(err) {
-			t.Skip("skipping test on Android; permission error creating symlink")
-		}
-		t.Fatalf("link %s -> %s: %v", f.Name(), linkname, err)
-	}
-	defer Remove(linkname)
-
-	// Can't change uid unless root, but can try
-	// changing the group id. First try our current group.
-	gid := Getgid()
-	t.Log("gid:", gid)
-	if err = Lchown(linkname, -1, gid); err != nil {
-		if err, ok := err.(*PathError); ok && err.Err == syscall.ENOSYS {
-			t.Skip("lchown is unavailable")
-		}
-		t.Fatalf("lchown %s -1 %d: %s", linkname, gid, err)
-	}
-	sys := dir.Sys().(*syscall.Stat_t)
-	checkUidGid(t, linkname, int(sys.Uid), gid)
-
-	// Then try all the auxiliary groups.
-	groups, err := Getgroups()
-	if err != nil {
-		t.Fatalf("getgroups: %s", err)
-	}
-	t.Log("groups: ", groups)
-	for _, g := range groups {
-		if err = Lchown(linkname, -1, g); err != nil {
-			t.Fatalf("lchown %s -1 %d: %s", linkname, g, err)
-		}
-		checkUidGid(t, linkname, int(sys.Uid), g)
-
-		// Check that link target's gid is unchanged.
-		checkUidGid(t, f.Name(), int(sys.Uid), int(sys.Gid))
-	}
-}
-
 // Issue 16919: Readdir must return a non-empty slice or an error.
 func TestReaddirRemoveRace(t *testing.T) {
 	oldStat := *LstatP
