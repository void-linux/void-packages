--- a/tests/auto/corelib/global/qglobal/tst_qglobal.cpp
+++ b/tests/auto/corelib/global/qglobal/tst_qglobal.cpp
@@ -624,18 +624,14 @@ void tst_QGlobal::qRoundFloats() {
     QFETCH(float, expected);
 
 #if !(defined(Q_PROCESSOR_ARM_64) && (__has_builtin(__builtin_round) || defined(Q_CC_GNU)) && !defined(Q_CC_CLANG))
-    QEXPECT_FAIL("round largest representable float less than 0.5",
-                 "We know qRound fails in this case, but decided that we value simplicity over correctness",
-                 Continue);
-#endif
+#else
     QCOMPARE(qRound(actual), expected);
+#endif
 
 #if !(defined(Q_PROCESSOR_ARM_64) && (__has_builtin(__builtin_round) || defined(Q_CC_GNU)) && !defined(Q_CC_CLANG))
-    QEXPECT_FAIL("round largest representable float less than 0.5",
-                 "We know qRound fails in this case, but decided that we value simplicity over correctness",
-                 Continue);
-#endif
+#else
     QCOMPARE(qRound64(actual), expected);
+#endif
 }
 
 void tst_QGlobal::qRoundDoubles_data() {
@@ -653,18 +649,14 @@ void tst_QGlobal::qRoundDoubles() {
     QFETCH(double, expected);
 
 #if !(defined(Q_PROCESSOR_ARM_64) && (__has_builtin(__builtin_round) || defined(Q_CC_GNU)) && !defined(Q_CC_CLANG))
-    QEXPECT_FAIL("round largest representable double less than 0.5",
-                 "We know qRound fails in this case, but decided that we value simplicity over correctness",
-                 Continue);
-#endif
+#else
     QCOMPARE(qRound(actual), expected);
+#endif
 
 #if !(defined(Q_PROCESSOR_ARM_64) && (__has_builtin(__builtin_round) || defined(Q_CC_GNU)) && !defined(Q_CC_CLANG))
-    QEXPECT_FAIL("round largest representable double less than 0.5",
-                 "We know qRound fails in this case, but decided that we value simplicity over correctness",
-                 Continue);
-#endif
+#else
     QCOMPARE(qRound64(actual), expected);
+#endif
 }
 
 void tst_QGlobal::PRImacros()
