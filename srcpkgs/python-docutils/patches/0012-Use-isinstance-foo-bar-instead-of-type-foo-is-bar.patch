From 88fdde83419b6c532948a64d2824f6a663ad33c3 Mon Sep 17 00:00:00 2001
From: Stephen Finucane <stephen@that.guru>
Date: Mon, 26 Aug 2019 16:45:33 +0000
Subject: [PATCH 12/26] Use 'isinstance(foo, bar)' instead of 'type(foo) is
 bar'

This one is more stylistic than anything.

Signed-off-by: Stephen Finucane <stephen@that.guru>

git-svn-id: http://svn.code.sf.net/p/docutils/code/trunk@8359 929543f6-e4f2-0310-98a6-ba3bd3dd1d04
Signed-off-by: Doan Tran Cong Danh <congdanhqx@gmail.com>
---
 docutils/parsers/rst/directives/tables.py | 4 ++--
 docutils/parsers/rst/states.py            | 2 +-
 docutils/statemachine.py                  | 2 +-
 docutils/utils/math/latex2mathml.py       | 2 +-
 test/package_unittest.py                  | 4 ++--
 test/test_nodes.py                        | 2 +-
 6 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/docutils/parsers/rst/directives/tables.py b/docutils/parsers/rst/directives/tables.py
index b0a4eac..bf97e26 100644
--- a/docutils/parsers/rst/directives/tables.py
+++ b/docutils/parsers/rst/directives/tables.py
@@ -104,7 +104,7 @@ class Table(Directive):
         return self.options.get('widths', '')
 
     def get_column_widths(self, max_cols):
-        if type(self.widths) == list:
+        if isinstance(self.widths, list):
             if len(self.widths) != max_cols:
                 error = self.state_machine.reporter.error(
                     '"%s" widths do not match the number of columns in table '
@@ -152,7 +152,7 @@ class RSTTable(Table):
         if 'align' in self.options:
             table_node['align'] = self.options.get('align')
         tgroup = table_node[0]
-        if type(self.widths) == list:
+        if isinstance(self.widths, list):
             colspecs = [child for child in tgroup.children
                         if child.tagname == 'colspec']
             for colspec, col_width in zip(colspecs, self.widths):
diff --git a/docutils/parsers/rst/states.py b/docutils/parsers/rst/states.py
index c9b4fa3..2a2e33a 100644
--- a/docutils/parsers/rst/states.py
+++ b/docutils/parsers/rst/states.py
@@ -447,7 +447,7 @@ def build_regexp(definition, compile=True):
     name, prefix, suffix, parts = definition
     part_strings = []
     for part in parts:
-        if type(part) is tuple:
+        if isinstance(part, tuple):
             part_strings.append(build_regexp(part, None))
         else:
             part_strings.append(part)
diff --git a/docutils/statemachine.py b/docutils/statemachine.py
index 068083a..6bc03f5 100644
--- a/docutils/statemachine.py
+++ b/docutils/statemachine.py
@@ -737,7 +737,7 @@ class State(object):
         names = []
         transitions = {}
         for namestate in name_list:
-            if type(namestate) is stringtype:
+            if isinstance(namestate, stringtype):
                 transitions[namestate] = self.make_transition(namestate)
                 names.append(namestate)
             else:
diff --git a/docutils/utils/math/latex2mathml.py b/docutils/utils/math/latex2mathml.py
index 255e96f..b7ba048 100644
--- a/docutils/utils/math/latex2mathml.py
+++ b/docutils/utils/math/latex2mathml.py
@@ -168,7 +168,7 @@ class math(object):
 
         self.children = []
         if children is not None:
-            if type(children) is list:
+            if isinstance(children, list):
                 for child in children:
                     self.append(child)
             else:
diff --git a/test/package_unittest.py b/test/package_unittest.py
index 4db826b..1c0f077 100644
--- a/test/package_unittest.py
+++ b/test/package_unittest.py
@@ -115,7 +115,7 @@ def loadTestModules(path, name='', packages=None):
                 # to cheat:
                 testSuite.addTest(moduleTests)
                 continue
-            if type(suite) == types.FunctionType:
+            if isinstance(suite, types.FunctionType):
                 testSuite.addTest(suite())
             elif isinstance(suite, unittest.TestSuite):
                 testSuite.addTest(suite)
@@ -152,7 +152,7 @@ def main(suite=None):
         print("Debug: Suite=%s" % suite, file=sys.stderr)
     testRunner = unittest.TextTestRunner(verbosity=verbosity)
     # run suites (if we were called from test_all) or suite...
-    if type(suite) == type([]):
+    if isinstance(suite, type([])):
         for s in suite:
             testRunner.run(s)
     else:
diff --git a/test/test_nodes.py b/test/test_nodes.py
index 679c98e..af04e86 100755
--- a/test/test_nodes.py
+++ b/test/test_nodes.py
@@ -121,7 +121,7 @@ class ElementTests(unittest.TestCase):
             self.assertEqual(repr(uelement), "<Element: <#text: 'gr\\xfcn'>>")
         else:
             self.assertEqual(repr(uelement), u"<Element: <#text: 'grÃ¼n'>>")
-        self.assertTrue(isinstance(repr(uelement),str))
+        self.assertTrue(isinstance(repr(uelement), str))
         self.assertEqual(str(element), '<Element>text\nmore</Element>')
         self.assertEqual(str(uelement), '<Element>gr\xfcn</Element>')
         dom = element.asdom()
-- 
2.24.0.375.geb5ae68d41

