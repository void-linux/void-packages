setup.py uses package version provided that the builddir is a git
repository and git is present in hostmakedepends.

Otherwise 0.0.0 is supplied as the version.

--- a/setup.py
+++ b/setup.py
@@ -445,71 +445,40 @@
 
     from DisplayCAL.util_os import which
 
-    if (
-        Path(pydir, ".git").is_dir()
-        and (which("git") or which("git.exe"))
-        and (not sys.argv[1:] or (len(non_build_args) < len(sys.argv[1:]) and not help))
-    ):
-        print("Trying to get git version information...")
-        git_version = None
-
-        try:
-            p = subprocess.Popen(
-                ["git", "rev-parse", "--short", "HEAD"],
-                stdout=subprocess.PIPE,
-                cwd=pydir,
-            )
-        except Exception as exception:
-            print("...failed:", exception)
-        else:
-            git_version = p.communicate()[0].strip().decode()
-            version_base_file_path = Path(pydir, "VERSION_BASE")
-            version_base = "0.0.0".split(".")
-
-            if version_base_file_path.is_file():
-                with open(version_base_file_path) as version_base_file:
-                    version_base = version_base_file.read().strip().split(".")
-
-        print("Trying to get git information...")
-        lastmod = ""
-        timestamp = None
-        mtime = 0
-
-        try:
-            p = subprocess.Popen(
-                ["git", "log", "-1", "--format=%ct"], stdout=subprocess.PIPE, cwd=pydir
+    version_base_file_path = Path(pydir, "VERSION_BASE")
+
+    with open(version_base_file_path) as version_base_file:
+        version_base = version_base_file.read().strip().split(".")
+
+    lastmod = ""
+    timestamp = None
+    mtime = 0
+    timestamp = time.gmtime(mtime)
+
+    if timestamp:
+        lastmod = f"{strftime('%Y-%m-%dT%H:%M:%S', timestamp)}Z"
+
+    if not dry_run:
+        print("Generating __version__.py")
+
+        with open(Path(pydir, "DisplayCAL", "__version__.py"), "w") as versionpy:
+            versionpy.write("# generated by setup.py\n\n")
+            build_time = time.time()
+            versionpy.write(
+                f"BUILD_DATE = "
+                f"\"{strftime('%Y-%m-%dT%H:%M:%S', gmtime(build_time))}Z\"\n"
             )
-        except Exception as exception:
-            print("...failed:", exception)
-        else:
-            mtime = int(p.communicate()[0].strip().decode())
-            timestamp = time.gmtime(mtime)
-
-        if timestamp:
-            lastmod = f"{strftime('%Y-%m-%dT%H:%M:%S', timestamp)}Z"
-
-        if not dry_run:
-            print("Generating __version__.py")
-
-            with open(Path(pydir, "DisplayCAL", "__version__.py"), "w") as versionpy:
-                versionpy.write("# generated by setup.py\n\n")
-                build_time = time.time()
-                versionpy.write(
-                    f"BUILD_DATE = "
-                    f"\"{strftime('%Y-%m-%dT%H:%M:%S', gmtime(build_time))}Z\"\n"
-                )
-
-                if lastmod:
-                    versionpy.write(f"LASTMOD = {lastmod!r}\n")
-
-                if git_version:
-                    print("Version", ".".join(version_base))
-                    versionpy.write("VERSION = (%s)\n" % ", ".join(version_base))
-                    versionpy.write("VERSION_BASE = (%s)\n" % ", ".join(version_base))
-                    versionpy.write("VERSION_STRING = %r\n" % ".".join(version_base))
 
-                    with open(Path(pydir, "VERSION"), "w") as versiontxt:
-                        versiontxt.write(".".join(version_base))
+            if lastmod:
+                versionpy.write(f"LASTMOD = {lastmod!r}\n")
+
+            print("Version", ".".join(version_base))
+            versionpy.write("VERSION = (%s)\n" % ", ".join(version_base))
+            versionpy.write("VERSION_BASE = (%s)\n" % ", ".join(version_base))
+            versionpy.write("VERSION_STRING = %r\n" % ".".join(version_base))
+
+            with open(Path(pydir, "VERSION"), "w") as versiontxt:
+                versiontxt.write(".".join(version_base))
 
     backup_setup_path = Path(pydir, "setup.cfg.backup")
     setup_path = Path(pydir, "setup.cfg")
