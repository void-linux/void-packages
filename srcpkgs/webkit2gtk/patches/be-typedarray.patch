Source: Jacek Piszczek <jacek.piszczek@runbox.com>

https://tenfourfox.tenderapp.com/discussions/problems/7505-problems-uploading-to-facebook

Updated by @q66.

diff --git a/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h b/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h
index e76dada0..4de2e3ea 100644
--- a/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h
+++ b/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h
@@ -198,3 +198,9 @@
 #else
 #define OFFLINE_ASM_HAVE_FAST_TLS 0
 #endif
+
+#if CPU(BIG_ENDIAN)
+#define OFFLINE_ASM_BIG_ENDIAN 1
+#else
+#define OFFLINE_ASM_BIG_ENDIAN 0
+#endif
diff --git a/Source/JavaScriptCore/llint/LowLevelInterpreter32_64.asm b/Source/JavaScriptCore/llint/LowLevelInterpreter32_64.asm
index 22716f81..4f9374ce 100644
--- a/Source/JavaScriptCore/llint/LowLevelInterpreter32_64.asm
+++ b/Source/JavaScriptCore/llint/LowLevelInterpreter32_64.asm
@@ -1732,7 +1732,11 @@ llintOpWithMetadata(op_get_by_val, OpGetByVal, macro (size, get, dispatch, metad
 
 .opGetByValNotDouble:
     subi ArrayStorageShape, t2
-    bia t2, SlowPutArrayStorageShape - ArrayStorageShape, .opGetByValNotIndexedStorage
+    if BIG_ENDIAN
+        bia t2, SlowPutArrayStorageShape - ArrayStorageShape, .opGetByValSlow
+    else
+        bia t2, SlowPutArrayStorageShape - ArrayStorageShape, .opGetByValNotIndexedStorage
+    end
     biaeq t1, -sizeof IndexingHeader + IndexingHeader::u.lengths.vectorLength[t3], .opGetByValSlow
     loadi ArrayStorage::m_vector + TagOffset[t3, t1, 8], t2
     loadi ArrayStorage::m_vector + PayloadOffset[t3, t1, 8], t1
diff --git a/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm b/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm
index c453351d..e61529e5 100644
--- a/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm
+++ b/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm
@@ -1867,7 +1867,11 @@ llintOpWithMetadata(op_get_by_val, OpGetByVal, macro (size, get, dispatch, metad
     
 .opGetByValNotDouble:
     subi ArrayStorageShape, t2
-    bia t2, SlowPutArrayStorageShape - ArrayStorageShape, .opGetByValNotIndexedStorage
+    if BIG_ENDIAN
+        bia t2, SlowPutArrayStorageShape - ArrayStorageShape, .opGetByValSlow
+    else
+        bia t2, SlowPutArrayStorageShape - ArrayStorageShape, .opGetByValNotIndexedStorage
+    end
     biaeq t1, -sizeof IndexingHeader + IndexingHeader::u.lengths.vectorLength[t3], .opGetByValSlow
     get(m_dst, t0)
     loadq ArrayStorage::m_vector[t3, t1, 8], t2
diff --git a/Source/JavaScriptCore/runtime/JSGenericTypedArrayView.h b/Source/JavaScriptCore/runtime/JSGenericTypedArrayView.h
index 86f48a02..1541b3a8 100644
--- a/Source/JavaScriptCore/runtime/JSGenericTypedArrayView.h
+++ b/Source/JavaScriptCore/runtime/JSGenericTypedArrayView.h
@@ -29,6 +29,7 @@
 #include "ThrowScope.h"
 #include "ToNativeFromValue.h"
 #include <wtf/CheckedArithmetic.h>
+#include <wtf/FlipBytes.h>
 
 namespace JSC {
 
@@ -147,7 +148,18 @@ public:
     
     JSValue getIndexQuickly(size_t i) const
     {
+#if CPU(BIG_ENDIAN)
+        switch (Adaptor::typeValue) {
+        case TypeFloat32:
+        case TypeFloat64:
+            return Adaptor::toJSValue(nullptr, getIndexQuicklyAsNativeValue(i));
+        default:
+            // typed array views are commonly expected to be little endian views of the underlying data
+            return Adaptor::toJSValue(nullptr, flipBytes(getIndexQuicklyAsNativeValue(i)));
+        }
+#else
         return Adaptor::toJSValue(nullptr, getIndexQuicklyAsNativeValue(i));
+#endif
     }
     
     void setIndexQuicklyToNativeValue(size_t i, typename Adaptor::Type value)
@@ -159,7 +171,20 @@ public:
     void setIndexQuickly(size_t i, JSValue value)
     {
         ASSERT(!value.isObject());
+#if CPU(BIG_ENDIAN)
+        switch (Adaptor::typeValue) {
+        case TypeFloat32:
+        case TypeFloat64:
+            setIndexQuicklyToNativeValue(i, toNativeFromValue<Adaptor>(value));
+            break;
+        default:
+            // typed array views are commonly expected to be little endian views of the underlying data
+            setIndexQuicklyToNativeValue(i, flipBytes(toNativeFromValue<Adaptor>(value)));
+            break;
+        }
+#else
         setIndexQuicklyToNativeValue(i, toNativeFromValue<Adaptor>(value));
+#endif
     }
     
     bool setIndex(JSGlobalObject* globalObject, size_t i, JSValue jsValue)
@@ -173,18 +198,55 @@ public:
         if (isDetached() || i >= m_length)
             return false;
 
+#if CPU(BIG_ENDIAN)
+        switch (Adaptor::typeValue) {
+        case TypeFloat32:
+        case TypeFloat64:
+            setIndexQuicklyToNativeValue(i, value);
+            break;
+        default:
+            // typed array views are commonly expected to be little endian views of the underlying data
+            setIndexQuicklyToNativeValue(i, flipBytes(value));
+            break;
+        }
+#else
         setIndexQuicklyToNativeValue(i, value);
+#endif
         return true;
     }
 
     static ElementType toAdaptorNativeFromValue(JSGlobalObject* globalObject, JSValue jsValue)
     {
+#if CPU(BIG_ENDIAN)
+        switch (Adaptor::typeValue) {
+        case TypeFloat32:
+        case TypeFloat64:
+            return toNativeFromValue<Adaptor>(globalObject, jsValue);
+        default:
+            // typed array views are commonly expected to be little endian views of the underlying data
+            return flipBytes(toNativeFromValue<Adaptor>(globalObject, jsValue));
+        }
+#else
         return toNativeFromValue<Adaptor>(globalObject, jsValue);
+#endif
     }
 
     static std::optional<ElementType> toAdaptorNativeFromValueWithoutCoercion(JSValue jsValue)
     {
-        return toNativeFromValueWithoutCoercion<Adaptor>(jsValue);
+        auto opt = toNativeFromValueWithoutCoercion<Adaptor>(jsValue);
+#if CPU(BIG_ENDIAN)
+        switch (Adaptor::typeValue) {
+        case TypeFloat32:
+        case TypeFloat64:
+            break;
+        default:
+            // typed array views are commonly expected to be little endian views of the underlying data
+            if (!opt)
+                break;
+            return std::optional<ElementType>{flipBytes(*opt)};
+        }
+#endif
+        return opt;
     }
 
     void sort()
diff --git a/Source/JavaScriptCore/runtime/JSGenericTypedArrayViewPrototypeFunctions.h b/Source/JavaScriptCore/runtime/JSGenericTypedArrayViewPrototypeFunctions.h
index df0435f6..3017563c 100644
--- a/Source/JavaScriptCore/runtime/JSGenericTypedArrayViewPrototypeFunctions.h
+++ b/Source/JavaScriptCore/runtime/JSGenericTypedArrayViewPrototypeFunctions.h
@@ -385,9 +385,36 @@ ALWAYS_INLINE EncodedJSValue genericType
 
     size_t searchLength = std::min<size_t>(length, updatedLength);
     if constexpr (ViewClass::Adaptor::isFloat) {
-        if (std::isnan(static_cast<double>(*targetOption))) {
+        double targetOptionLittleEndianAsDouble;
+#if CPU(BIG_ENDIAN)
+        switch (ViewClass::TypedArrayStorageType) {
+        case TypeFloat32:
+        case TypeFloat64:
+            targetOptionLittleEndianAsDouble = static_cast<double>(*targetOption);
+        default:
+            // typed array views are commonly expected to be little endian views of the underlying data
+            targetOptionLittleEndianAsDouble = static_cast<double>(flipBytes(*targetOption));
+        }
+#else
+        targetOptionLittleEndianAsDouble = static_cast<double>(*targetOption);
+#endif
+
+        if (std::isnan(targetOptionLittleEndianAsDouble)) {
             for (; index < searchLength; ++index) {
-                if (std::isnan(static_cast<double>(array[index])))
+                double arrayElementLittleEndianAsDouble;
+#if CPU(BIG_ENDIAN)
+                switch (ViewClass::TypedArrayStorageType) {
+                case TypeFloat32:
+                case TypeFloat64:
+                    arrayElementLittleEndianAsDouble = static_cast<double>(array[index]);
+                default:
+                    // typed array views are commonly expected to be little endian views of the underlying data
+                    arrayElementLittleEndianAsDouble = static_cast<double>(flipBytes(array[index]));
+                }
+#else
+                arrayElementLittleEndianAsDouble = static_cast<double>(array[index]);
+#endif
+                if (std::isnan(arrayElementLittleEndianAsDouble))
                     return JSValue::encode(jsBoolean(true));
             }
             return JSValue::encode(jsBoolean(false));
