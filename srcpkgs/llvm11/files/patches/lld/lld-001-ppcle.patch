From c6347af7952635e21aaeca27c5ae6d81e29d9dbc Mon Sep 17 00:00:00 2001
From: Daniel Kolesa <daniel@octaforge.org>
Date: Thu, 17 Dec 2020 03:20:31 +0100
Subject: [PATCH] ppcle support

based on https://reviews.llvm.org/D92445
---
 ELF/Driver.cpp             |   1 +
 ELF/InputFiles.cpp         |   1 +
 ELF/ScriptParser.cpp       |   1 +
 test/ELF/emulation-ppc.s   | 190 +++++++++++++++----------------------
 test/ELF/ppc32-gnu-ifunc.s |   6 ++
 test/ELF/ppc32-reloc-rel.s |   8 +-
 6 files changed, 91 insertions(+), 116 deletions(-)

diff --git a/ELF/Driver.cpp b/ELF/Driver.cpp
index 4637a3b..d81b67c 100644
--- a/ELF/Driver.cpp
+++ b/ELF/Driver.cpp
@@ -142,6 +142,7 @@ static std::tuple<ELFKind, uint16_t, uint8_t> parseEmulation(StringRef emul) {
           .Cases("elf32ltsmip", "elf32ltsmipn32", {ELF32LEKind, EM_MIPS})
           .Case("elf32lriscv", {ELF32LEKind, EM_RISCV})
           .Cases("elf32ppc", "elf32ppclinux", {ELF32BEKind, EM_PPC})
+          .Cases("elf32lppc", "elf32lppclinux", {ELF32LEKind, EM_PPC})
           .Case("elf64btsmip", {ELF64BEKind, EM_MIPS})
           .Case("elf64ltsmip", {ELF64LEKind, EM_MIPS})
           .Case("elf64lriscv", {ELF64LEKind, EM_RISCV})
diff --git a/ELF/InputFiles.cpp b/ELF/InputFiles.cpp
index c2f1830..f83f028 100644
--- a/ELF/InputFiles.cpp
+++ b/ELF/InputFiles.cpp
@@ -1514,6 +1514,7 @@ static uint8_t getBitcodeMachineKind(StringRef path, const Triple &t) {
   case Triple::msp430:
     return EM_MSP430;
   case Triple::ppc:
+  case Triple::ppcle:
     return EM_PPC;
   case Triple::ppc64:
   case Triple::ppc64le:
diff --git a/ELF/ScriptParser.cpp b/ELF/ScriptParser.cpp
index fea6b7a..99b3e15 100644
--- a/ELF/ScriptParser.cpp
+++ b/ELF/ScriptParser.cpp
@@ -410,6 +410,7 @@ static std::pair<ELFKind, uint16_t> parseBfdName(StringRef s) {
       .Case("elf64-aarch64", {ELF64LEKind, EM_AARCH64})
       .Case("elf64-littleaarch64", {ELF64LEKind, EM_AARCH64})
       .Case("elf32-powerpc", {ELF32BEKind, EM_PPC})
+      .Case("elf32-powerpcle", {ELF32LEKind, EM_PPC})
       .Case("elf64-powerpc", {ELF64BEKind, EM_PPC64})
       .Case("elf64-powerpcle", {ELF64LEKind, EM_PPC64})
       .Case("elf64-x86-64", {ELF64LEKind, EM_X86_64})
diff --git a/test/ELF/emulation-ppc.s b/test/ELF/emulation-ppc.s
index def78a5..004eb23 100644
--- a/test/ELF/emulation-ppc.s
+++ b/test/ELF/emulation-ppc.s
@@ -1,144 +1,106 @@
 # REQUIRES: ppc
 # RUN: llvm-mc -filetype=obj -triple=powerpc64-unknown-linux %s -o %tppc64
 # RUN: ld.lld -m elf64ppc %tppc64 -o %t2ppc64
-# RUN: llvm-readobj --file-headers %t2ppc64 | FileCheck --check-prefix=PPC64 %s
+# RUN: llvm-readobj --file-headers %t2ppc64 | FileCheck --check-prefixes=CHECK,PPC64,LINUX,PPCBE %s
 # RUN: ld.lld %tppc64 -o %t3ppc64
-# RUN: llvm-readobj --file-headers %t3ppc64 | FileCheck --check-prefix=PPC64 %s
+# RUN: llvm-readobj --file-headers %t3ppc64 | FileCheck --check-prefixes=CHECK,PPC64,LINUX,PPCBE %s
 # RUN: echo 'OUTPUT_FORMAT(elf64-powerpc)' > %tppc64.script
 # RUN: ld.lld %tppc64.script  %tppc64 -o %t4ppc64
-# RUN: llvm-readobj --file-headers %t4ppc64 | FileCheck --check-prefix=PPC64 %s
-
-# PPC64:      ElfHeader {
-# PPC64-NEXT:   Ident {
-# PPC64-NEXT:     Magic: (7F 45 4C 46)
-# PPC64-NEXT:     Class: 64-bit (0x2)
-# PPC64-NEXT:     DataEncoding: BigEndian (0x2)
-# PPC64-NEXT:     FileVersion: 1
-# PPC64-NEXT:     OS/ABI: SystemV (0x0)
-# PPC64-NEXT:     ABIVersion: 0
-# PPC64-NEXT:     Unused: (00 00 00 00 00 00 00)
-# PPC64-NEXT:   }
-# PPC64-NEXT:   Type: Executable (0x2)
-# PPC64-NEXT:   Machine: EM_PPC64 (0x15)
-# PPC64-NEXT:   Version: 1
-# PPC64-NEXT:   Entry:
-# PPC64-NEXT:   ProgramHeaderOffset: 0x40
-# PPC64-NEXT:   SectionHeaderOffset:
-# PPC64-NEXT:   Flags [ (0x2)
-# PPC64-NEXT:     0x2
-# PPC64-NEXT:   ]
-# PPC64-NEXT:   HeaderSize: 64
-# PPC64-NEXT:   ProgramHeaderEntrySize: 56
-# PPC64-NEXT:   ProgramHeaderCount:
-# PPC64-NEXT:   SectionHeaderEntrySize: 64
-# PPC64-NEXT:   SectionHeaderCount:
-# PPC64-NEXT:   StringTableSectionIndex:
-# PPC64-NEXT: }
-
-# RUN: llvm-mc -filetype=obj -triple=powerpc64-unknown-freebsd %s -o %tppc64fbsd
-# RUN: echo 'OUTPUT_FORMAT(elf64-powerpc-freebsd)' > %tppc64fbsd.script
-# RUN: ld.lld %tppc64fbsd.script  %tppc64fbsd -o %t2ppc64fbsd
-# RUN: llvm-readobj --file-headers %t2ppc64fbsd | FileCheck --check-prefix=PPC64-FBSD %s
-
-# PPC64-FBSD:      ElfHeader {
-# PPC64-FBSD-NEXT:   Ident {
-# PPC64-FBSD-NEXT:     Magic: (7F 45 4C 46)
-# PPC64-FBSD-NEXT:     Class: 64-bit (0x2)
-# PPC64-FBSD-NEXT:     DataEncoding: BigEndian (0x2)
-# PPC64-FBSD-NEXT:     FileVersion: 1
-# PPC64-FBSD-NEXT:     OS/ABI: FreeBSD (0x9)
-# PPC64-FBSD-NEXT:     ABIVersion: 0
-# PPC64-FBSD-NEXT:     Unused: (00 00 00 00 00 00 00)
-# PPC64-FBSD-NEXT:   }
-# PPC64-FBSD-NEXT:   Type: Executable (0x2)
-# PPC64-FBSD-NEXT:   Machine: EM_PPC64 (0x15)
-# PPC64-FBSD-NEXT:   Version: 1
-# PPC64-FBSD-NEXT:   Entry:
-# PPC64-FBSD-NEXT:   ProgramHeaderOffset: 0x40
-# PPC64-FBSD-NEXT:   SectionHeaderOffset:
-# PPC64-FBSD-NEXT:   Flags [ (0x2)
-# PPC64-FBSD-NEXT:     0x2
-# PPC64-FBSD-NEXT:   ]
-# PPC64-FBSD-NEXT:   HeaderSize: 64
-# PPC64-FBSD-NEXT:   ProgramHeaderEntrySize: 56
-# PPC64-FBSD-NEXT:   ProgramHeaderCount:
-# PPC64-FBSD-NEXT:   SectionHeaderEntrySize: 64
-# PPC64-FBSD-NEXT:   SectionHeaderCount:
-# PPC64-FBSD-NEXT:   StringTableSectionIndex:
-# PPC64-FBSD-NEXT: }
+# RUN: llvm-readobj --file-headers %t4ppc64 | FileCheck --check-prefixes=CHECK,PPC64,LINUX,PPCBE %s
 
 # RUN: llvm-mc -filetype=obj -triple=powerpc64le-unknown-linux %s -o %tppc64le
 # RUN: ld.lld -m elf64lppc %tppc64le -o %t2ppc64le
-# RUN: llvm-readobj --file-headers %t2ppc64le | FileCheck --check-prefix=PPC64LE %s
+# RUN: llvm-readobj --file-headers %t2ppc64le | FileCheck --check-prefixes=CHECK,PPC64,LINUX,PPCLE %s
 # RUN: ld.lld %tppc64le -o %t3ppc64le
-# RUN: llvm-readobj --file-headers %t3ppc64le | FileCheck --check-prefix=PPC64LE %s
+# RUN: llvm-readobj --file-headers %t3ppc64le | FileCheck --check-prefixes=CHECK,PPC64,LINUX,PPCLE %s
 # RUN: echo 'OUTPUT_FORMAT(elf64-powerpcle)' > %tppc64le.script
 # RUN: ld.lld %tppc64le.script  %tppc64le -o %t4ppc64le
-# RUN: llvm-readobj --file-headers %t4ppc64le | FileCheck --check-prefix=PPC64LE %s
-
-# PPC64LE:      ElfHeader {
-# PPC64LE-NEXT:   Ident {
-# PPC64LE-NEXT:     Magic: (7F 45 4C 46)
-# PPC64LE-NEXT:     Class: 64-bit (0x2)
-# PPC64LE-NEXT:     DataEncoding: LittleEndian (0x1)
-# PPC64LE-NEXT:     FileVersion: 1
-# PPC64LE-NEXT:     OS/ABI: SystemV (0x0)
-# PPC64LE-NEXT:     ABIVersion: 0
-# PPC64LE-NEXT:     Unused: (00 00 00 00 00 00 00)
-# PPC64LE-NEXT:   }
-# PPC64LE-NEXT:   Type: Executable (0x2)
-# PPC64LE-NEXT:   Machine: EM_PPC64 (0x15)
-# PPC64LE-NEXT:   Version: 1
-# PPC64LE-NEXT:   Entry:
-# PPC64LE-NEXT:   ProgramHeaderOffset: 0x40
-# PPC64LE-NEXT:   SectionHeaderOffset:
-# PPC64LE-NEXT:   Flags [ (0x2)
-# PPC64LE-NEXT:     0x2
-# PPC64LE-NEXT:   ]
-# PPC64LE-NEXT:   HeaderSize: 64
-# PPC64LE-NEXT:   ProgramHeaderEntrySize: 56
-# PPC64LE-NEXT:   ProgramHeaderCount:
-# PPC64LE-NEXT:   SectionHeaderEntrySize: 64
-# PPC64LE-NEXT:   SectionHeaderCount:
-# PPC64LE-NEXT:   StringTableSectionIndex:
-# PPC64LE-NEXT: }
+# RUN: llvm-readobj --file-headers %t4ppc64le | FileCheck --check-prefixes=CHECK,PPC64,LINUX,PPCLE %s
 
 # RUN: llvm-mc -filetype=obj -triple=powerpc-unknown-linux %s -o %tppc32
 # RUN: ld.lld -m elf32ppc %tppc32 -o %t2ppc32
-# RUN: llvm-readobj --file-headers %t2ppc32 | FileCheck --check-prefix=PPC32 %s
+# RUN: llvm-readobj --file-headers %t2ppc32 | FileCheck --check-prefixes=CHECK,PPC32,LINUX,PPCBE %s
 # RUN: ld.lld %tppc32 -o %t3ppc32
-# RUN: llvm-readobj --file-headers %t3ppc32 | FileCheck --check-prefix=PPC32 %s
+# RUN: llvm-readobj --file-headers %t3ppc32 | FileCheck --check-prefixes=CHECK,PPC32,LINUX,PPCBE %s
 # RUN: echo 'OUTPUT_FORMAT(elf32-powerpc)' > %tppc32.script
 # RUN: ld.lld %tppc32.script  %tppc32 -o %t4ppc32
-# RUN: llvm-readobj --file-headers %t4ppc32 | FileCheck --check-prefix=PPC32 %s
+# RUN: llvm-readobj --file-headers %t4ppc32 | FileCheck --check-prefixes=CHECK,PPC32,LINUX,PPCBE %s
 # RUN: ld.lld -m elf32ppclinux %tppc32 -o %t5ppc32
-# RUN: llvm-readobj --file-headers %t5ppc32 | FileCheck --check-prefix=PPC32 %s
+# RUN: llvm-readobj --file-headers %t5ppc32 | FileCheck --check-prefixes=CHECK,PPC32,LINUX,PPCBE %s
+
+# RUN: llvm-mc -filetype=obj -triple=powerpcle-unknown-linux %s -o %tppc32le
+# RUN: ld.lld -m elf32lppc %tppc32le -o %t2ppc32le
+# RUN: llvm-readobj --file-headers %t2ppc32le | FileCheck --check-prefixes=CHECK,PPC32,LINUX,PPCLE %s
+# RUN: ld.lld %tppc32le -o %t3ppc32le
+# RUN: llvm-readobj --file-headers %t3ppc32le | FileCheck --check-prefixes=CHECK,PPC32,LINUX,PPCLE %s
+# RUN: echo 'OUTPUT_FORMAT(elf32-powerpcle)' > %tppc32le.script
+# RUN: ld.lld %tppc32le.script  %tppc32le -o %t4ppc32le
+# RUN: llvm-readobj --file-headers %t4ppc32le | FileCheck --check-prefixes=CHECK,PPC32,LINUX,PPCLE %s
+# RUN: ld.lld -m elf32lppclinux %tppc32le -o %t5ppc32le
+# RUN: llvm-readobj --file-headers %t5ppc32le | FileCheck --check-prefixes=CHECK,PPC32,LINUX,PPCLE %s
+
+# RUN: llvm-mc -filetype=obj -triple=powerpc-unknown-freebsd %s -o %tppc32fbsd
+# RUN: echo 'OUTPUT_FORMAT(elf32-powerpc-freebsd)' > %tppc32fbsd.script
+# RUN: ld.lld %tppc32fbsd.script  %tppc32fbsd -o %t2ppc32fbsd
+# RUN: llvm-readobj --file-headers %t2ppc32fbsd | FileCheck --check-prefixes=CHECK,PPC32,FBSD,PPCBE %s
+
+# RUN: llvm-mc -filetype=obj -triple=powerpcle-unknown-freebsd %s -o %tppc32fbsdle
+# RUN: echo 'OUTPUT_FORMAT(elf32-powerpcle-freebsd)' > %tppc32fbsdle.script
+# RUN: ld.lld %tppc32fbsdle.script  %tppc32fbsdle -o %t2ppc32fbsdle
+# RUN: llvm-readobj --file-headers %t2ppc32fbsdle | FileCheck --check-prefixes=CHECK,PPC32,FBSD,PPCLE %s
+
+# RUN: llvm-mc -filetype=obj -triple=powerpc64-unknown-freebsd %s -o %tppc64fbsd
+# RUN: echo 'OUTPUT_FORMAT(elf64-powerpc-freebsd)' > %tppc64fbsd.script
+# RUN: ld.lld %tppc64fbsd.script  %tppc64fbsd -o %t2ppc64fbsd
+# RUN: llvm-readobj --file-headers %t2ppc64fbsd | FileCheck --check-prefixes=CHECK,PPC64,FBSD,PPCBE %s
+
+# RUN: llvm-mc -filetype=obj -triple=powerpc64le-unknown-freebsd %s -o %tppc64fbsdle
+# RUN: echo 'OUTPUT_FORMAT(elf64-powerpcle-freebsd)' > %tppc64fbsdle.script
+# RUN: ld.lld %tppc64fbsdle.script  %tppc64fbsdle -o %t2ppc64fbsdle
+# RUN: llvm-readobj --file-headers %t2ppc64fbsdle | FileCheck --check-prefixes=CHECK,PPC64,FBSD,PPCLE %s
 
-# PPC32:      ElfHeader {
-# PPC32-NEXT:   Ident {
-# PPC32-NEXT:     Magic: (7F 45 4C 46)
+# CHECK:      ElfHeader {
+# CHECK-NEXT:   Ident {
+# CHECK-NEXT:     Magic: (7F 45 4C 46)
+
+# PPC64-NEXT:     Class: 64-bit (0x2)
 # PPC32-NEXT:     Class: 32-bit (0x1)
-# PPC32-NEXT:     DataEncoding: BigEndian (0x2)
-# PPC32-NEXT:     FileVersion: 1
-# PPC32-NEXT:     OS/ABI: SystemV (0x0)
-# PPC32-NEXT:     ABIVersion: 0
-# PPC32-NEXT:     Unused: (00 00 00 00 00 00 00)
-# PPC32-NEXT:   }
-# PPC32-NEXT:   Type: Executable (0x2)
+
+# PPCBE-NEXT:     DataEncoding: BigEndian (0x2)
+# PPCLE-NEXT:     DataEncoding: LittleEndian (0x1)
+
+# CHECK-NEXT:     FileVersion: 1
+
+# LINUX-NEXT:     OS/ABI: SystemV (0x0)
+# FBSD-NEXT:      OS/ABI: FreeBSD (0x9)
+
+# CHECK-NEXT:     ABIVersion: 0
+# CHECK-NEXT:     Unused: (00 00 00 00 00 00 00)
+# CHECK-NEXT:   }
+# CHECK-NEXT:   Type: Executable (0x2)
+
+# PPC64-NEXT:   Machine: EM_PPC64 (0x15)
 # PPC32-NEXT:   Machine: EM_PPC (0x14)
-# PPC32-NEXT:   Version: 1
-# PPC32-NEXT:   Entry:
+
+# CHECK-NEXT:   Version: 1
+# CHECK-NEXT:   Entry:
+# PPC64-NEXT:   ProgramHeaderOffset: 0x40
 # PPC32-NEXT:   ProgramHeaderOffset: 0x34
-# PPC32-NEXT:   SectionHeaderOffset:
+# CHECK-NEXT:   SectionHeaderOffset:
+# PPC64-NEXT:   Flags [ (0x2)
 # PPC32-NEXT:   Flags [ (0x0)
-# PPC32-NEXT:   ]
+# PPC64-NEXT:     0x2
+# CHECK-NEXT:   ]
+# PPC64-NEXT:   HeaderSize: 64
 # PPC32-NEXT:   HeaderSize: 52
+# PPC64-NEXT:   ProgramHeaderEntrySize: 56
 # PPC32-NEXT:   ProgramHeaderEntrySize: 32
-# PPC32-NEXT:   ProgramHeaderCount:
+# CHECK-NEXT:   ProgramHeaderCount:
+# PPC64-NEXT:   SectionHeaderEntrySize: 64
 # PPC32-NEXT:   SectionHeaderEntrySize: 40
-# PPC32-NEXT:   SectionHeaderCount:
-# PPC32-NEXT:   StringTableSectionIndex:
-# PPC32-NEXT: }
+# CHECK-NEXT:   SectionHeaderCount:
+# CHECK-NEXT:   StringTableSectionIndex:
+# CHECK-NEXT: }
 
 .globl _start
 _start:
diff --git a/test/ELF/ppc32-gnu-ifunc.s b/test/ELF/ppc32-gnu-ifunc.s
index b85b9eb..66efd5e 100644
--- a/test/ELF/ppc32-gnu-ifunc.s
+++ b/test/ELF/ppc32-gnu-ifunc.s
@@ -5,6 +5,12 @@
 # RUN: llvm-readelf -S -s %t | FileCheck --check-prefixes=SEC,SYM %s
 # RUN: llvm-objdump -d --no-show-raw-insn %t | FileCheck %s
 
+# RUN: llvm-mc -filetype=obj -triple=powerpcle %s -o %t.o
+# RUN: ld.lld %t.o -o %t
+# RUN: llvm-readobj -r %t | FileCheck --check-prefix=RELOC %s
+# RUN: llvm-readelf -S -s %t | FileCheck --check-prefixes=SEC,SYM %s
+# RUN: llvm-objdump -d --no-show-raw-insn %t | FileCheck %s
+
 # RELOC:      .rela.dyn {
 # RELOC-NEXT:   0x10020118 R_PPC_IRELATIVE - 0x100100E0
 # RELOC-NEXT: }
diff --git a/test/ELF/ppc32-reloc-rel.s b/test/ELF/ppc32-reloc-rel.s
index fefeeba..29501fd 100644
--- a/test/ELF/ppc32-reloc-rel.s
+++ b/test/ELF/ppc32-reloc-rel.s
@@ -1,6 +1,10 @@
 # REQUIRES: ppc
-# RUN: llvm-mc -filetype=obj -triple=powerpc %s -o %t.o
-# RUN: ld.lld %t.o -o %t
+# RUN: llvm-mc -filetype=obj -triple=powerpc %s -o %t.be.o
+# RUN: ld.lld %t.be.o -o %t
+# RUN: llvm-objdump -d --no-show-raw-insn %t | FileCheck %s
+
+# RUN: llvm-mc -filetype=obj -triple=powerpcle %s -o %t.le.o
+# RUN: ld.lld %t.le.o -o %t
 # RUN: llvm-objdump -d --no-show-raw-insn %t | FileCheck %s
 
 .section .R_PPC_REL14,"ax",@progbits
-- 
2.29.2

