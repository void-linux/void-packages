# Template file for 'llvm11'
pkgname=llvm11
version=11.1.0
revision=1
wrksrc="llvm-project-${version}.src"
build_wrksrc=llvm
build_style=cmake
configure_args="
 -DENABLE_LINKER_BUILD_ID=ON
 -DLLDB_USE_SYSTEM_SIX=ON
 -DLLVM_INSTALL_UTILS=ON
 -DLLVM_BUILD_DOCS=ON
 -DLLVM_BUILD_LLVM_DYLIB=ON
 -DLLVM_LINK_LLVM_DYLIB=ON
 -DLLVM_ENABLE_RTTI=ON
 -DLLVM_ENABLE_FFI=ON
 -DLLVM_BINUTILS_INCDIR=/usr/include"
# TODO: configure_args+=" -DLLVM_ENABLE_SPHINX=ON"
_projects="clang clang-tools-extra compiler-rt lld lldb"
hostmakedepends="groff perl python3 python3-Sphinx zlib-devel libffi-devel swig"
makedepends="python3-devel zlib-devel libffi-devel libedit-devel
 libxml2-devel binutils-devel libatomic-devel"
depends="libllvm11"
short_desc="Low Level Virtual Machine"
maintainer="q66 <daniel@octaforce.org>"
license="NCSA"
homepage="https://www.llvm.org"
distfiles="https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}/llvm-project-${version}.src.tar.xz"
checksum="74d2529159fd118c3eac6f90107b5611bccc6f647fdea104024183e8d5e25831"
lib32disabled=yes
python_version=3

_lldb_enable=yes

case "$XBPS_TARGET_MACHINE" in
	ppc64le*) ;;
	ppc*) _lldb_enable=no ;;
esac

subpackages="clang-tools-extra clang clang-analyzer libclang libclang-cpp libllvm11"
if [ "$_lldb_enable" = "yes" ]; then
	# XXX fails to cross compile due to python
	subpackages+=" lldb lldb-devel"
fi
subpackages+=" lld lld-devel"

_apply_patches() {
	local project=$1

	for i in ${FILESDIR}/patches/${project}/*.patch; do
		msg_normal "Applying ${i/${FILESDIR}\//} to ${project}\n"
		patch -sNp1 -d ${wrksrc}/${project} -i ${i}
	done
}

post_patch() {
	for project in llvm clang lld lldb; do
		_apply_patches ${project}
	done

	case "$XBPS_TARGET_MACHINE" in
	armv5*)
		_apply_patches compiler-rt ;;
	esac

	case "$XBPS_TARGET_MACHINE" in
		*-musl) sed -i 's|__ptrace_request|int|g' ${wrksrc}/lldb/source/Plugins/Process/Linux/NativeProcessLinux.cpp
			;;
	esac

	case "$XBPS_TARGET_MACHINE" in
		*-musl)
			# Disable sanitizers
			sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' ${wrksrc}/compiler-rt/cmake/config-ix.cmake
			;;
	esac

	# update config.guess for better platform detection
	cp $XBPS_COMMONDIR/environment/configure/automake/config.guess ${wrksrc}/llvm/cmake
}

pre_configure() {
	# Vastly reduce size of debugging symbols:
	CFLAGS=${CFLAGS/ -g/ -g1}
	CXXFLAGS=${CXXFLAGS/ -g/ -g1}

	# since gcc9, the build likes to blow up for ppc32 apparently because
	# of clang being too large for a 24-bit relative call to the PLT, so
	# optimize for size instead
	case "$XBPS_TARGET_MACHINE" in
		mips*-musl|ppc|ppc-musl) configure_args+=" -DVOID_CXX_OPT_FLAGS=-Os" ;;
	esac

	if [ "$CROSS_BUILD" ]; then
		msg_normal "Building host tblgen\n"
		mkdir -p build/HOST && pushd build/HOST
		CC="$BUILD_CC" CXX="$BUILD_CXX" CFLAGS="$BUILD_CFLAGS" \
			CXXFLAGS="$BUILD_CXXFLAGS" LDFLAGS="$BUILD_LDFLAGS" \
			cmake ../.. -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lldb"
		make ${makejobs} llvm-tblgen clang-tblgen lldb-tblgen
		configure_args+=" -DLLVM_TABLEGEN=$PWD/bin/llvm-tblgen"
		configure_args+=" -DCLANG_TABLEGEN=$PWD/bin/clang-tblgen"
		configure_args+=" -DLLDB_TABLEGEN=$PWD/bin/lldb-tblgen"
		popd
	fi

	if [ "$_lldb_enable" != "yes" ]; then
		_projects=${_projects/lldb/}
	fi

	case "$XBPS_TARGET_MACHINE" in
		i686*) _arch="X86";;
		x86_64*) _arch="X86";;
		armv5*) _arch="Armv5te";;
		armv6*) _arch="Armv6";;
		armv7*) _arch="Armv7";;
		aarch64*) _arch="AArch64";;
		mips*) _arch="Mips";;
		ppc*) _arch="PowerPC";;
	esac
	configure_args+=" -DLLVM_TARGET_ARCH=${_arch}"
	configure_args+=" -DLLVM_HOST_TRIPLE=${XBPS_CROSS_TRIPLET:-$XBPS_TRIPLET}"
	configure_args+=" -DLLVM_ENABLE_PROJECTS=${_projects// /\;}"
}

do_install() {
	vlicense LICENSE.TXT

	cd build
	cmake -DCMAKE_INSTALL_PREFIX=${DESTDIR}/usr -P cmake_install.cmake

	# Required for multilib.
	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		for _header in llvm-config; do
			mv ${DESTDIR}/usr/include/llvm/Config/${_header}{,-64}.h
			vinstall ${FILESDIR}/llvm-Config-${_header}.h 644 \
				usr/include/llvm/Config ${_header}.h
		done
	fi

	# Remove llvm-config-host in cross builds.
	if [ "$CROSS_BUILD" ]; then
		rm -f ${DESTDIR}/usr/bin/llvm-config-host
	fi
}

clang-analyzer_package() {
	pycompile_dirs="usr/share/scan-view"
	depends="clang-${version}_${revision} python3"
	short_desc+=" - A source code analysis framework"
	homepage="https://clang-analyzer.llvm.org/"
	pkg_install() {
		vmove usr/share/man/man1/scan-build.1
		vmove "/usr/bin/scan-*"
		vmove "/usr/share/scan-*"
		vmove "/usr/libexec/*analyzer"
	}
}

clang-tools-extra_package() {
	lib32disabled=yes
	depends="clang-${version}_${revision} python3"
	short_desc+=" - Extra Clang tools"
	homepage="https://clang.llvm.org/extra/"
	pkg_install() {
		vmove usr/include/clang-tidy
		vmove usr/bin/clang-apply-replacements
		vmove usr/bin/clang-query
		vmove usr/bin/clang-rename
		vmove usr/bin/clang-tidy
		vmove usr/bin/diagtool
		vmove usr/bin/find-all-symbols
		vmove usr/bin/hmaptool
		vmove usr/bin/modularize
		vmove usr/bin/pp-trace
		vmove usr/bin/sancov
		vmove "usr/lib/libclangApplyReplacements*"
		vmove "usr/lib/libclangQuery*"
		vmove "usr/lib/libclangTidy*"
		vmove "usr/share/clang/*tidy*"
	}
}

clang_package() {
	lib32disabled=yes
	depends="libstdc++-devel libgcc-devel  binutils ${XBPS_TARGET_LIBC}-devel
	 libclang-${version}_${revision}"
	short_desc+=" - C language family frontend"
	homepage="https://clang.llvm.org/"
	pkg_install() {
		vmove usr/include/clang
		vmove usr/include/clang-c
		vmove "usr/bin/*clang*"
		vmove usr/bin/c-index-test
		vmove usr/lib/clang
		vmove usr/lib/cmake/clang
		vmove "usr/lib/libclang*.a"
		vmove "usr/lib/libclang*.so"
		vmove "usr/share/clang"
	}
}

libclang_package() {
	short_desc+=" - C frontend runtime library"
	pkg_install() {
		vmove "usr/lib/libclang.so.*"
	}
}

libclang-cpp_package() {
	short_desc+=" - C frontend runtime library (C++ interface)"
	pkg_install() {
		vmove "usr/lib/libclang-cpp.so.*"
	}
}

lld_package() {
	lib32disabled=yes
	short_desc+=" - linker"
	homepage="https://lld.llvm.org"
	pkg_install() {
		vmove usr/bin/lld*
		vmove usr/bin/wasm-ld
		vmove usr/bin/ld.lld*
		vmove usr/bin/ld64.lld*
	}
}

lld-devel_package() {
	lib32disabled=yes
	short_desc+=" - linker - development files"
	homepage="https://lld.llvm.org"
	pkg_install() {
		vmove usr/include/lld
		vmove usr/lib/cmake/lld
		vmove "usr/lib/liblld*a"
	}
}

lldb_package() {
	lib32disabled=yes
	depends+=" python3-six"
	short_desc+=" - LLDB debugger"
	homepage="https://lldb.llvm.org/"
	pkg_install() {
		vmove usr/bin/*lldb*
		vmove usr/lib/liblldb*so.*
		vmove /usr/lib/python*
	}
}

lldb-devel_package() {
	lib32disabled=yes
	depends="lldb>=${version}_${revision}"
	short_desc+=" - LLDB debugger - development files"
	pkg_install() {
		vmove usr/include/lldb
		vmove "usr/lib/liblldb*.so"
	}
}

libllvm11_package() {
	short_desc+=" - runtime library"
	pkg_install() {
		vmove "usr/lib/libLLVM-*.so*"
	}
}
