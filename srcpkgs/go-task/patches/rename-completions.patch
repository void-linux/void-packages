--- a/completion/bash/task.bash
+++ b/completion/bash/task.bash
@@ -2,7 +2,7 @@
 
 _GO_TASK_COMPLETION_LIST_OPTION='--list-all'
 
-function _task()
+function _go-task()
 {
   local cur prev words cword
   _init_completion -n : || return
@@ -52,4 +52,4 @@ function _task()
   __ltrim_colon_completions "$cur"
 }
 
-complete -F _task task
+complete -F _go-task go-task
--- a/completion/fish/task.fish
+++ b/completion/fish/task.fish
@@ -1,6 +1,6 @@
-set -l GO_TASK_PROGNAME task
+set -l GO_TASK_PROGNAME go-task
 
-function __task_get_tasks --description "Prints all available tasks with their description" --inherit-variable GO_TASK_PROGNAME
+function __go-task_get_tasks --description "Prints all available tasks with their description" --inherit-variable GO_TASK_PROGNAME
   # Check if the global task is requested
   set -l global_task false
   commandline --current-process | read --tokenize --list --local cmd_args
@@ -34,7 +34,7 @@ function __task_get_tasks --description "Prints all available tasks with their d
 end
 
 complete -c $GO_TASK_PROGNAME -d 'Runs the specified task(s). Falls back to the "default" task if no task name was specified, or lists all tasks if an unknown task name was
-specified.' -xa "(__task_get_tasks)"
+specified.' -xa "(__go-task_get_tasks)"
 
 complete -c $GO_TASK_PROGNAME -s c -l color     -d 'colored output (default true)'
 complete -c $GO_TASK_PROGNAME -s d -l dir       -d 'sets directory of execution'
--- a/completion/zsh/_task
+++ b/completion/zsh/_task
@@ -1,16 +1,16 @@
-#compdef task
-compdef _task task
+#compdef go-task
+compdef _go-task go-task
 typeset -A opt_args
 
 _GO_TASK_COMPLETION_LIST_OPTION="${GO_TASK_COMPLETION_LIST_OPTION:---list-all}"
 
 # Listing commands from Taskfile.yml
-function __task_list() {
+function __go-task_list() {
     local -a scripts cmd
     local -i enabled=0
     local taskfile item task desc
 
-    cmd=(task)
+    cmd=(go-task)
     taskfile=${(Qv)opt_args[(i)-t|--taskfile]}
     taskfile=${taskfile//\~/$HOME}
 
@@ -38,7 +38,7 @@ function __task_list() {
     _describe 'Task to run' scripts
 }
 
-_task() {
+_go-task() {
     _arguments \
         '(-C --concurrency)'{-C,--concurrency}'[limit number of concurrent tasks]: ' \
         '(-p --parallel)'{-p,--parallel}'[run command-line tasks in parallel]' \
@@ -61,10 +61,10 @@ _task() {
             {-i,--init}'[create new Taskfile.yml]' \
             '(-*)'{-h,--help}'[show help]' \
             '(-*)--version[show version and exit]' \
-            '*: :__task_list'
+            '*: :__go-task_list'
 }
 
 # don't run the completion function when being source-ed or eval-ed
-if [ "$funcstack[1]" = "_task" ]; then
-    _task "$@"
+if [ "$funcstack[1]" = "_go-task" ]; then
+    _go-task "$@"
 fi

