--- configure.sh.orig
+++ configure.sh
@@ -4932,82 +4932,15 @@
 CXXFLAGS=`echo "$CXXFLAGS" | sed 's/-g //'`
 
 if test x"$enable_simd" != x"no"; then
-    # For x86-64 SIMD, g++ >=5 or clang++ >=7 is required
-    if test x"$build_cpu" = x"x86_64"; then
-	ac_ext=cpp
-ac_cpp='$CXXCPP $CPPFLAGS'
-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
-
-
-if test "$cross_compiling" = yes; then :
-  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot run test program while cross compiling
-See \`config.log' for more details" "$LINENO" 5; }
-else
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#include <stdio.h>
-#include <immintrin.h>
-__attribute__ ((target("default"))) int test_ssse3(int x) { return x; }
-__attribute__ ((target("default"))) int test_sse2(int x) { return x; }
-__attribute__ ((target("default"))) int test_avx2(int x) { return x; }
-__attribute__ ((target("ssse3"))) int test_ssse3(int x) { return x; }
-__attribute__ ((target("sse2"))) int test_sse2(int x) { return x; }
-__attribute__ ((target("avx2"))) int test_avx2(int x) { return x; }
-typedef long long __m128i_u __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
-typedef long long __m256i_u __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
-__attribute__ ((target("default"))) void more_testing(char* buf, int len) { }
-__attribute__ ((target("ssse3"))) void more_testing(char* buf, int len)
-{
-    int i;
-    for (i = 0; i < (len-32); i+=32) {
-	__m128i in8_1, in8_2;
-	in8_1 = _mm_lddqu_si128((__m128i_u*)&buf[i]);
-	in8_2 = _mm_lddqu_si128((__m128i_u*)&buf[i + 16]);
-    }
-}
-
-int
-main ()
-{
-if (test_ssse3(42) != 42 || test_sse2(42) != 42 || test_avx2(42) != 42) exit(1);
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_cxx_try_run "$LINENO"; then :
-  CXX_OK=yes
-else
-  CXX_OK=no
-fi
-rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
-  conftest.$ac_objext conftest.beam conftest.$ac_ext
-fi
-
-	ac_ext=c
-ac_cpp='$CPP $CPPFLAGS'
-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
-ac_compiler_gnu=$ac_cv_c_compiler_gnu
-
-	if test x"$CXX_OK" = x"yes"; then
-	    # AC_MSG_RESULT() is called below.
-	    SIMD="x86_64"
-	elif test x"$enable_simd" = x"yes"; then
-	    { $as_echo "$as_me:${as_lineno-$LINENO}: result: error" >&5
-$as_echo "error" >&6; }
-	    as_fn_error $? "The SIMD compilation test failed.
-Omit --enable-simd to continue without it." "$LINENO" 5
+	if test "$cross_compiling" = yes; then
+	    if test x"$target" = x"x86_64*"; then
+		  	SIMD=x86_64
+		fi
+	else
+		if test x"$build_cpu" = x"x86_64"; then
+			SIMD=x86_64
+		fi
 	fi
-    elif test x"$enable_simd" = x"yes"; then
-        { $as_echo "$as_me:${as_lineno-$LINENO}: result: unavailable" >&5
-$as_echo "unavailable" >&6; }
-        as_fn_error $? "The SIMD optimizations are currently x86_64 only.
-Omit --enable-simd to continue without it." "$LINENO" 5
-    fi
 fi
 
 if test x"$SIMD" != x""; then
@@ -5069,13 +5002,14 @@
 
 
 if test x"$enable_asm" != x"no"; then
-    if test x"$build_cpu" = x"x86_64"; then
-	ASM="$build_cpu"
-    elif test x"$enable_asm" = x"yes"; then
-        { $as_echo "$as_me:${as_lineno-$LINENO}: result: unavailable" >&5
-$as_echo "unavailable" >&6; }
-        as_fn_error $? "The ASM optimizations are currently x86_64 only.
-Omit --enable-asm to continue without it." "$LINENO" 5
+	if test "$cross_compiling" = yes; then
+		if test x"$target" = "x86_64*"; then
+			ASM="x86_64"
+		fi
+	else
+	    if test x"$build_cpu" = x"x86_64"; then
+			ASM="$build_cpu"
+		fi
     fi
 fi
 
