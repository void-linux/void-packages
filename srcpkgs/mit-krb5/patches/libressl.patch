--- src/plugins/preauth/pkinit/pkinit_crypto_openssl.c	2019-01-08 17:02:37.000000000 +0100
+++ src/plugins/preauth/pkinit/pkinit_crypto_openssl.c	2019-05-11 16:29:37.001458084 +0200
@@ -189,7 +189,7 @@
     (*_x509_pp) = PKCS7_cert_from_signer_info(_p7,_si)
 #endif
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
 /* 1.1 standardizes constructor and destructor names, renaming
  * EVP_MD_CTX_{create,destroy} and deprecating ASN1_STRING_data. */
@@ -3053,7 +3053,7 @@
     return retval;
 }
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
 /*
  * We need to decode DomainParameters from RFC 3279 section 2.3.3.  We would
@@ -3079,7 +3079,7 @@
 ASN1_SEQUENCE(DHvparams) = {
     ASN1_SIMPLE(int_dhvparams, seed, ASN1_BIT_STRING),
     ASN1_SIMPLE(int_dhvparams, counter, BIGNUM)
-} static_ASN1_SEQUENCE_END_name(int_dhvparams, DHvparams)
+} ASN1_SEQUENCE_END_name(int_dhvparams, DHvparams)
 
 ASN1_SEQUENCE(DHxparams) = {
     ASN1_SIMPLE(int_dhx942_dh, p, BIGNUM),
@@ -3087,7 +3087,7 @@
     ASN1_OPT(int_dhx942_dh, q, BIGNUM),
     ASN1_OPT(int_dhx942_dh, j, BIGNUM),
     ASN1_OPT(int_dhx942_dh, vparams, DHvparams),
-} static_ASN1_SEQUENCE_END_name(int_dhx942_dh, DHxparams)
+} ASN1_SEQUENCE_END_name(int_dhx942_dh, DHxparams)
 
 static DH *
 decode_dh_params(const uint8_t *p, unsigned int len)
