--- src/nodes/mod.rs.orig
+++ src/nodes/mod.rs
@@ -173,11 +173,11 @@
     }
     let size = size.unwrap();
 
-    let result = if size > ::std::i64::MAX as u64 {
-        warn!("truncate request got size {}, which is too large (exceeds i64's MAX)", size);
+    let result = if size > ::nix::libc::off_t::max_value() as u64 {
+        warn!("truncate request got size {}, which is too large (exceeds off_t's MAX)", size);
         Err(nix::Error::invalid_argument())
     } else {
-        try_path(path, |p| unistd::truncate(p, size as i64))
+        try_path(path, |p| unistd::truncate(p, size as nix::libc::off_t))
     };
     if result.is_ok() {
         attr.size = size;
--- src/nodes/conv.rs.orig
+++ src/nodes/conv.rs
@@ -69,7 +69,7 @@
     } else {
         val.tv_usec() as i32
     };
-    Timespec::new(val.tv_sec() as sys::time::time_t, usec)
+    Timespec::new((val.tv_sec() as sys::time::time_t).into(), usec)
 }
 
 /// Converts a file type as returned by the file system to a FUSE file type.
