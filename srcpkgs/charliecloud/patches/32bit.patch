--- a/bin/core.h
+++ b/bin/core.h
@@ -68,18 +68,18 @@
 
 /** Constants **/
 
-#define BD_MASK          0xff00000000000000
-#define BD_SRC_OPTIONAL  0x8000000000000000
-#define BD_DST_OPTIONAL  0x4000000000000000
-#define BD_DST_CREATE    0x2000000000000000
-#define BD_DST_MERGE     0x1000000000000000
+#define BD_MASK          0xff00000000000000ULL
+#define BD_SRC_OPTIONAL  0x8000000000000000ULL
+#define BD_DST_OPTIONAL  0x4000000000000000ULL
+#define BD_DST_CREATE    0x2000000000000000ULL
+#define BD_DST_MERGE     0x1000000000000000ULL
 #define BD_OPTIONAL      (BD_SRC_OPTIONAL | BD_DST_OPTIONAL)
 
 
 /** Function prototypes **/
 
 void bind_mount(const char *src, const char *dst, const char *newroot,
-                unsigned long flags, const char *scratch);
+                bindflags flags, const char *scratch);
 void containerize(struct container *c);
 void hook_add(struct hook **hook_list, enum hook_dup dup,
               const char *name, hookf_t *f, void *d);
--- a/bin/json.c
+++ b/bin/json.c
@@ -396,8 +396,8 @@
 {
    size_t ct;
 
-   DEBUG("CDI: %s from %s (%u,%u %zu):", spec->kind, spec->src_path,
-         major(spec->src_dev), minor(spec->src_dev), spec->src_ino);
+   DEBUG("CDI: %s from %s (%u,%u %ju):", spec->kind, spec->src_path,
+         major(spec->src_dev), minor(spec->src_dev), (intmax_t)spec->src_ino);
    ct = list_count((void *)(spec->envs), sizeof(struct env_var));
    DEBUG("CDI:   environment: %zu:", ct);
    for (size_t i = 0; i < ct; i++)
