#!/bin/sh
## dwarf fortress wrapper written and maintained by
# Robert Stancil <robert.stancil@mavs.uta.edu>
#
# MIT License
#
# Copyright (c) 2019 Robert Stancil <robert.stancil@mavs.uta.edu>
#
# Modified by: Rutpiv <roger_freitas@live.com> in 2024 to adjust symlink
# creation and preserve existing save data by backing up old directories.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##

usage() {
 printf "Usage:\n %s [-f]\noptions:\n -f\tforce/recreate user's game data directory. <Warning: this will erase all save data>" "${0}"
}

while getopts 'f' c
do
 case $c in
  f) _FORCE=yes ;;
  *) usage ;;
 esac
done

if [ $(id -u) -eq 0 ]; then
 echo "Error, can't be run as root" >&2
 usage
 exit
fi

if [ -z ${XDG_DATA_HOME:-$HOME/.local/share} ]; then
 echo "homedir unset"
 usage
 exit
fi

# Check if an existing 'dwarffortress' directory with the old structure is found.
# If found, create a backup of the directory before removing it.
# The backup is stored as a tar.gz archive with a timestamp to prevent overwriting.
if [ -d "${XDG_DATA_HOME:-$HOME/.local/share}/dwarffortress" ] &&
	 [ -f "${XDG_DATA_HOME:-$HOME/.local/share}/dwarffortress/df" ]; then
 echo "Existing old 'dwarffortress' directory found. Creating a backup..."

 timestamp=$(date +%Y%m%d%H%M%S)
 backup_file="${XDG_DATA_HOME:-$HOME/.local/share}/dwarffortress_backup_${timestamp}.tar.gz"
 tar -czf "$backup_file" -C "${XDG_DATA_HOME:-$HOME/.local/share}" dwarffortress
 echo "Backup created at $backup_file"

 rm -rf "${XDG_DATA_HOME:-$HOME/.local/share}/dwarffortress"
 echo "Old 'dwarffortress' directory removed."
fi

if [ ! -d ${XDG_DATA_HOME:-$HOME/.local/share}/dwarffortress ]; then
 _FORCE=yes
fi
if [ $_FORCE ]
then
 rm -rf ${XDG_DATA_HOME:-$HOME/.local/share}/dwarffortress
 cp /usr/share/dwarffortress ${XDG_DATA_HOME:-$HOME/.local/share} -r
 for lib in /usr/lib/dwarffortress/libs/*; do
        ln -s "$lib" "${XDG_DATA_HOME:-$HOME/.local/share}/dwarffortress/"
 done
 ln -s /usr/bin/dwarfort ${XDG_DATA_HOME:-$HOME/.local/share}/dwarffortress/
fi

${XDG_DATA_HOME:-$HOME/.local/share}/dwarffortress/run_df
