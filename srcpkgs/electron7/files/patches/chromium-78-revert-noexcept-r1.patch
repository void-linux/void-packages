From 37a95dd93e553888c00cf9443a5ec738ce658e65 Mon Sep 17 00:00:00 2001
From: Zinovy Nis <zynis@yandex-team.ru>
Date: Mon, 16 Sep 2019 13:08:17 +0000
Subject: [PATCH] Revert "[clang-tidy] add noexcept for move ctors and operator= in blink"

This reverts commit 8f3eea10fe63a64ac67dc21542ebee6b896156a3.

Reason for revert: code bloating

Original change's description:
> [clang-tidy] add noexcept for move ctors and operator= in blink
>
> Bug: 994915
> Change-Id: I2e1bcf286a2d2fa6613e18b5268098a0d258fb2e
> Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1759163
> Commit-Queue: Zinovy Nis <zynis@yandex-team.ru>
> Reviewed-by: Jeremy Roman <jbroman@chromium.org>
> Reviewed-by: Mike West <mkwst@chromium.org>
> Cr-Commit-Position: refs/heads/master@{#688676}

TBR=jbroman@chromium.org,foolip@chromium.org,mkwst@chromium.org,zynis@yandex-team.ru

# Not skipping CQ checks because original CL landed > 1 day ago.

Bug: 994915
Change-Id: I12b3ecc1186e27809082dc399c6d6864109ce307
---

diff --git a/third_party/blink/common/indexeddb/indexeddb_key_path.cc b/third_party/blink/common/indexeddb/indexeddb_key_path.cc
index ec2b618..552d541 100644
--- a/third_party/blink/common/indexeddb/indexeddb_key_path.cc
+++ b/third_party/blink/common/indexeddb/indexeddb_key_path.cc
@@ -18,12 +18,12 @@
     : type_(mojom::IDBKeyPathType::Array), array_(array) {}
 
 IndexedDBKeyPath::IndexedDBKeyPath(const IndexedDBKeyPath& other) = default;
-IndexedDBKeyPath::IndexedDBKeyPath(IndexedDBKeyPath&& other) noexcept = default;
+IndexedDBKeyPath::IndexedDBKeyPath(IndexedDBKeyPath&& other) = default;
 IndexedDBKeyPath::~IndexedDBKeyPath() = default;
 IndexedDBKeyPath& IndexedDBKeyPath::operator=(const IndexedDBKeyPath& other) =
     default;
-IndexedDBKeyPath& IndexedDBKeyPath::operator=(
-    IndexedDBKeyPath&& other) noexcept = default;
+IndexedDBKeyPath& IndexedDBKeyPath::operator=(IndexedDBKeyPath&& other) =
+    default;
 
 const std::vector<base::string16>& IndexedDBKeyPath::array() const {
   DCHECK(type_ == blink::mojom::IDBKeyPathType::Array);
diff --git a/third_party/blink/common/indexeddb/indexeddb_metadata.cc b/third_party/blink/common/indexeddb/indexeddb_metadata.cc
index 50d5845..9349732 100644
--- a/third_party/blink/common/indexeddb/indexeddb_metadata.cc
+++ b/third_party/blink/common/indexeddb/indexeddb_metadata.cc
@@ -23,15 +23,15 @@
 
 IndexedDBIndexMetadata::IndexedDBIndexMetadata(
     const IndexedDBIndexMetadata& other) = default;
-IndexedDBIndexMetadata::IndexedDBIndexMetadata(
-    IndexedDBIndexMetadata&& other) noexcept = default;
+IndexedDBIndexMetadata::IndexedDBIndexMetadata(IndexedDBIndexMetadata&& other) =
+    default;
 
 IndexedDBIndexMetadata::~IndexedDBIndexMetadata() = default;
 
 IndexedDBIndexMetadata& IndexedDBIndexMetadata::operator=(
     const IndexedDBIndexMetadata& other) = default;
 IndexedDBIndexMetadata& IndexedDBIndexMetadata::operator=(
-    IndexedDBIndexMetadata&& other) noexcept = default;
+    IndexedDBIndexMetadata&& other) = default;
 
 bool IndexedDBIndexMetadata::operator==(
     const IndexedDBIndexMetadata& other) const {
@@ -56,14 +56,14 @@
 IndexedDBObjectStoreMetadata::IndexedDBObjectStoreMetadata(
     const IndexedDBObjectStoreMetadata& other) = default;
 IndexedDBObjectStoreMetadata::IndexedDBObjectStoreMetadata(
-    IndexedDBObjectStoreMetadata&& other) noexcept = default;
+    IndexedDBObjectStoreMetadata&& other) = default;
 
 IndexedDBObjectStoreMetadata::~IndexedDBObjectStoreMetadata() = default;
 
 IndexedDBObjectStoreMetadata& IndexedDBObjectStoreMetadata::operator=(
     const IndexedDBObjectStoreMetadata& other) = default;
 IndexedDBObjectStoreMetadata& IndexedDBObjectStoreMetadata::operator=(
-    IndexedDBObjectStoreMetadata&& other) noexcept = default;
+    IndexedDBObjectStoreMetadata&& other) = default;
 
 bool IndexedDBObjectStoreMetadata::operator==(
     const IndexedDBObjectStoreMetadata& other) const {
@@ -87,14 +87,14 @@
 IndexedDBDatabaseMetadata::IndexedDBDatabaseMetadata(
     const IndexedDBDatabaseMetadata& other) = default;
 IndexedDBDatabaseMetadata::IndexedDBDatabaseMetadata(
-    IndexedDBDatabaseMetadata&& other) noexcept = default;
+    IndexedDBDatabaseMetadata&& other) = default;
 
 IndexedDBDatabaseMetadata::~IndexedDBDatabaseMetadata() = default;
 
 IndexedDBDatabaseMetadata& IndexedDBDatabaseMetadata::operator=(
     const IndexedDBDatabaseMetadata& other) = default;
 IndexedDBDatabaseMetadata& IndexedDBDatabaseMetadata::operator=(
-    IndexedDBDatabaseMetadata&& other) noexcept = default;
+    IndexedDBDatabaseMetadata&& other) = default;
 
 bool IndexedDBDatabaseMetadata::operator==(
     const IndexedDBDatabaseMetadata& other) const {
diff --git a/third_party/blink/common/mediastream/media_devices.cc b/third_party/blink/common/mediastream/media_devices.cc
index 93df201..3661b4b 100644
--- a/third_party/blink/common/mediastream/media_devices.cc
+++ b/third_party/blink/common/mediastream/media_devices.cc
@@ -13,8 +13,7 @@
 WebMediaDeviceInfo::WebMediaDeviceInfo(const WebMediaDeviceInfo& other) =
     default;
 
-WebMediaDeviceInfo::WebMediaDeviceInfo(WebMediaDeviceInfo&& other) noexcept =
-    default;
+WebMediaDeviceInfo::WebMediaDeviceInfo(WebMediaDeviceInfo&& other) = default;
 
 WebMediaDeviceInfo::WebMediaDeviceInfo(const std::string& device_id,
                                        const std::string& label,
@@ -36,8 +35,8 @@
 WebMediaDeviceInfo& WebMediaDeviceInfo::operator=(
     const WebMediaDeviceInfo& other) = default;
 
-WebMediaDeviceInfo& WebMediaDeviceInfo::operator=(
-    WebMediaDeviceInfo&& other) noexcept = default;
+WebMediaDeviceInfo& WebMediaDeviceInfo::operator=(WebMediaDeviceInfo&& other) =
+    default;
 
 bool operator==(const WebMediaDeviceInfo& first,
                 const WebMediaDeviceInfo& second) {
diff --git a/third_party/blink/common/messaging/cloneable_message.cc b/third_party/blink/common/messaging/cloneable_message.cc
index 2984fd1..5c3ee7e 100644
--- a/third_party/blink/common/messaging/cloneable_message.cc
+++ b/third_party/blink/common/messaging/cloneable_message.cc
@@ -12,9 +12,8 @@
 namespace blink {
 
 CloneableMessage::CloneableMessage() = default;
-CloneableMessage::CloneableMessage(CloneableMessage&&) noexcept = default;
-CloneableMessage& CloneableMessage::operator=(CloneableMessage&&) noexcept =
-    default;
+CloneableMessage::CloneableMessage(CloneableMessage&&) = default;
+CloneableMessage& CloneableMessage::operator=(CloneableMessage&&) = default;
 CloneableMessage::~CloneableMessage() = default;
 
 CloneableMessage CloneableMessage::ShallowClone() const {
diff --git a/third_party/blink/common/messaging/transferable_message.cc b/third_party/blink/common/messaging/transferable_message.cc
index 07ac9bb..4a69d0a 100644
--- a/third_party/blink/common/messaging/transferable_message.cc
+++ b/third_party/blink/common/messaging/transferable_message.cc
@@ -9,10 +9,9 @@
 namespace blink {
 
 TransferableMessage::TransferableMessage() = default;
-TransferableMessage::TransferableMessage(TransferableMessage&&) noexcept =
+TransferableMessage::TransferableMessage(TransferableMessage&&) = default;
+TransferableMessage& TransferableMessage::operator=(TransferableMessage&&) =
     default;
-TransferableMessage& TransferableMessage::operator=(
-    TransferableMessage&&) noexcept = default;
 TransferableMessage::~TransferableMessage() = default;
 
 }  // namespace blink
diff --git a/third_party/blink/public/common/indexeddb/indexeddb_key_path.h b/third_party/blink/public/common/indexeddb/indexeddb_key_path.h
index 8ebe10c..9f5422c 100644
--- a/third_party/blink/public/common/indexeddb/indexeddb_key_path.h
+++ b/third_party/blink/public/common/indexeddb/indexeddb_key_path.h
@@ -22,10 +22,10 @@
   explicit IndexedDBKeyPath(const base::string16&);
   explicit IndexedDBKeyPath(const std::vector<base::string16>&);
   IndexedDBKeyPath(const IndexedDBKeyPath& other);
-  IndexedDBKeyPath(IndexedDBKeyPath&& other) noexcept;
+  IndexedDBKeyPath(IndexedDBKeyPath&& other);
   ~IndexedDBKeyPath();
   IndexedDBKeyPath& operator=(const IndexedDBKeyPath& other);
-  IndexedDBKeyPath& operator=(IndexedDBKeyPath&& other) noexcept;
+  IndexedDBKeyPath& operator=(IndexedDBKeyPath&& other);
 
   bool IsNull() const { return type_ == blink::mojom::IDBKeyPathType::Null; }
   bool operator==(const IndexedDBKeyPath& other) const;
diff --git a/third_party/blink/public/common/indexeddb/indexeddb_metadata.h b/third_party/blink/public/common/indexeddb/indexeddb_metadata.h
index 15663f6..7bb37c9 100644
--- a/third_party/blink/public/common/indexeddb/indexeddb_metadata.h
+++ b/third_party/blink/public/common/indexeddb/indexeddb_metadata.h
@@ -26,10 +26,10 @@
                          bool unique,
                          bool multi_entry);
   IndexedDBIndexMetadata(const IndexedDBIndexMetadata& other);
-  IndexedDBIndexMetadata(IndexedDBIndexMetadata&& other) noexcept;
+  IndexedDBIndexMetadata(IndexedDBIndexMetadata&& other);
   ~IndexedDBIndexMetadata();
   IndexedDBIndexMetadata& operator=(const IndexedDBIndexMetadata& other);
-  IndexedDBIndexMetadata& operator=(IndexedDBIndexMetadata&& other) noexcept;
+  IndexedDBIndexMetadata& operator=(IndexedDBIndexMetadata&& other);
   bool operator==(const IndexedDBIndexMetadata& other) const;
 
   base::string16 name;
@@ -50,12 +50,11 @@
                                bool auto_increment,
                                int64_t max_index_id);
   IndexedDBObjectStoreMetadata(const IndexedDBObjectStoreMetadata& other);
-  IndexedDBObjectStoreMetadata(IndexedDBObjectStoreMetadata&& other) noexcept;
+  IndexedDBObjectStoreMetadata(IndexedDBObjectStoreMetadata&& other);
   ~IndexedDBObjectStoreMetadata();
   IndexedDBObjectStoreMetadata& operator=(
       const IndexedDBObjectStoreMetadata& other);
-  IndexedDBObjectStoreMetadata& operator=(
-      IndexedDBObjectStoreMetadata&& other) noexcept;
+  IndexedDBObjectStoreMetadata& operator=(IndexedDBObjectStoreMetadata&& other);
   bool operator==(const IndexedDBObjectStoreMetadata& other) const;
 
   base::string16 name;
@@ -77,11 +76,10 @@
                             int64_t version,
                             int64_t max_object_store_id);
   IndexedDBDatabaseMetadata(const IndexedDBDatabaseMetadata& other);
-  IndexedDBDatabaseMetadata(IndexedDBDatabaseMetadata&& other) noexcept;
+  IndexedDBDatabaseMetadata(IndexedDBDatabaseMetadata&& other);
   ~IndexedDBDatabaseMetadata();
   IndexedDBDatabaseMetadata& operator=(const IndexedDBDatabaseMetadata& other);
-  IndexedDBDatabaseMetadata& operator=(
-      IndexedDBDatabaseMetadata&& other) noexcept;
+  IndexedDBDatabaseMetadata& operator=(IndexedDBDatabaseMetadata&& other);
   bool operator==(const IndexedDBDatabaseMetadata& other) const;
 
   base::string16 name;
diff --git a/third_party/blink/public/common/mediastream/media_devices.h b/third_party/blink/public/common/mediastream/media_devices.h
index 0d63e575..d87affe 100644
--- a/third_party/blink/public/common/mediastream/media_devices.h
+++ b/third_party/blink/public/common/mediastream/media_devices.h
@@ -27,7 +27,7 @@
 struct BLINK_COMMON_EXPORT WebMediaDeviceInfo {
   WebMediaDeviceInfo();
   WebMediaDeviceInfo(const WebMediaDeviceInfo& other);
-  WebMediaDeviceInfo(WebMediaDeviceInfo&& other) noexcept;
+  WebMediaDeviceInfo(WebMediaDeviceInfo&& other);
   WebMediaDeviceInfo(
       const std::string& device_id,
       const std::string& label,
@@ -37,7 +37,7 @@
       const media::VideoCaptureDeviceDescriptor& descriptor);
   ~WebMediaDeviceInfo();
   WebMediaDeviceInfo& operator=(const WebMediaDeviceInfo& other);
-  WebMediaDeviceInfo& operator=(WebMediaDeviceInfo&& other) noexcept;
+  WebMediaDeviceInfo& operator=(WebMediaDeviceInfo&& other);
 
   std::string device_id;
   std::string label;
diff --git a/third_party/blink/public/common/messaging/cloneable_message.h b/third_party/blink/public/common/messaging/cloneable_message.h
index de9952d..8dbd910 100644
--- a/third_party/blink/public/common/messaging/cloneable_message.h
+++ b/third_party/blink/public/common/messaging/cloneable_message.h
@@ -21,8 +21,8 @@
 // This type can be serialized as a blink::mojom::CloneableMessage struct.
 struct BLINK_COMMON_EXPORT CloneableMessage {
   CloneableMessage();
-  CloneableMessage(CloneableMessage&&) noexcept;
-  CloneableMessage& operator=(CloneableMessage&&) noexcept;
+  CloneableMessage(CloneableMessage&&);
+  CloneableMessage& operator=(CloneableMessage&&);
   ~CloneableMessage();
 
   // Returns a shallow clone of this message. |encoded_message| in the clone
diff --git a/third_party/blink/public/common/messaging/transferable_message.h b/third_party/blink/public/common/messaging/transferable_message.h
index 5eef63c..2d87363 100644
--- a/third_party/blink/public/common/messaging/transferable_message.h
+++ b/third_party/blink/public/common/messaging/transferable_message.h
@@ -22,8 +22,8 @@
 // type can be serialized as a blink::mojom::TransferableMessage struct.
 struct BLINK_COMMON_EXPORT TransferableMessage : public CloneableMessage {
   TransferableMessage();
-  TransferableMessage(TransferableMessage&&) noexcept;
-  TransferableMessage& operator=(TransferableMessage&&) noexcept;
+  TransferableMessage(TransferableMessage&&);
+  TransferableMessage& operator=(TransferableMessage&&);
   ~TransferableMessage();
 
   // Any ports being transferred as part of this message.
diff --git a/third_party/blink/public/platform/scheduler/web_scoped_virtual_time_pauser.h b/third_party/blink/public/platform/scheduler/web_scoped_virtual_time_pauser.h
index 75f3ae16..81edd69 100644
--- a/third_party/blink/public/platform/scheduler/web_scoped_virtual_time_pauser.h
+++ b/third_party/blink/public/platform/scheduler/web_scoped_virtual_time_pauser.h
@@ -42,9 +42,8 @@
   WebScopedVirtualTimePauser();
   ~WebScopedVirtualTimePauser();
 
-  WebScopedVirtualTimePauser(WebScopedVirtualTimePauser&& other) noexcept;
-  WebScopedVirtualTimePauser& operator=(
-      WebScopedVirtualTimePauser&& other) noexcept;
+  WebScopedVirtualTimePauser(WebScopedVirtualTimePauser&& other);
+  WebScopedVirtualTimePauser& operator=(WebScopedVirtualTimePauser&& other);
 
   WebScopedVirtualTimePauser(const WebScopedVirtualTimePauser&) = delete;
   WebScopedVirtualTimePauser& operator=(const WebScopedVirtualTimePauser&) =
diff --git a/third_party/blink/public/platform/web_string.h b/third_party/blink/public/platform/web_string.h
index e4fda4f..ffd1da0 100644
--- a/third_party/blink/public/platform/web_string.h
+++ b/third_party/blink/public/platform/web_string.h
@@ -102,10 +102,10 @@
   BLINK_PLATFORM_EXPORT WebString(const WebUChar* data, size_t len);
 
   BLINK_PLATFORM_EXPORT WebString(const WebString&);
-  BLINK_PLATFORM_EXPORT WebString(WebString&&) noexcept;
+  BLINK_PLATFORM_EXPORT WebString(WebString&&);
 
   BLINK_PLATFORM_EXPORT WebString& operator=(const WebString&);
-  BLINK_PLATFORM_EXPORT WebString& operator=(WebString&&) noexcept;
+  BLINK_PLATFORM_EXPORT WebString& operator=(WebString&&);
 
   BLINK_PLATFORM_EXPORT void Reset();
 
diff --git a/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util.h b/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util.h
index 99f47f5..8451b86 100644
--- a/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util.h
+++ b/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util.h
@@ -73,8 +73,8 @@
 
   VideoCaptureSettings(const VideoCaptureSettings& other);
   VideoCaptureSettings& operator=(const VideoCaptureSettings& other);
-  VideoCaptureSettings(VideoCaptureSettings&& other) noexcept;
-  VideoCaptureSettings& operator=(VideoCaptureSettings&& other) noexcept;
+  VideoCaptureSettings(VideoCaptureSettings&& other);
+  VideoCaptureSettings& operator=(VideoCaptureSettings&& other);
   ~VideoCaptureSettings();
 
   bool HasValue() const { return !failed_constraint_name_; }
@@ -193,8 +193,8 @@
       const AudioProcessingProperties& audio_processing_properties);
   AudioCaptureSettings(const AudioCaptureSettings& other);
   AudioCaptureSettings& operator=(const AudioCaptureSettings& other);
-  AudioCaptureSettings(AudioCaptureSettings&& other) noexcept;
-  AudioCaptureSettings& operator=(AudioCaptureSettings&& other) noexcept;
+  AudioCaptureSettings(AudioCaptureSettings&& other);
+  AudioCaptureSettings& operator=(AudioCaptureSettings&& other);
 
   bool HasValue() const { return !failed_constraint_name_; }
 
diff --git a/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util_sets.h b/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util_sets.h
index 199bdeb..c89e6e9 100644
--- a/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util_sets.h
+++ b/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util_sets.h
@@ -159,8 +159,8 @@
 
   DiscreteSet(const DiscreteSet& other) = default;
   DiscreteSet& operator=(const DiscreteSet& other) = default;
-  DiscreteSet(DiscreteSet&& other) noexcept = default;
-  DiscreteSet& operator=(DiscreteSet&& other) noexcept = default;
+  DiscreteSet(DiscreteSet&& other) = default;
+  DiscreteSet& operator=(DiscreteSet&& other) = default;
   ~DiscreteSet() = default;
 
   bool Contains(const T& value) const {
diff --git a/third_party/blink/public/web/modules/mediastream/media_stream_video_source.h b/third_party/blink/public/web/modules/mediastream/media_stream_video_source.h
index 5e50d1b..ed5967f 100644
--- a/third_party/blink/public/web/modules/mediastream/media_stream_video_source.h
+++ b/third_party/blink/public/web/modules/mediastream/media_stream_video_source.h
@@ -285,8 +285,8 @@
         const VideoTrackFormatCallback& format_callback,
         std::unique_ptr<VideoTrackAdapterSettings> adapter_settings,
         const ConstraintsCallback& callback);
-    PendingTrackInfo(PendingTrackInfo&& other) noexcept;
-    PendingTrackInfo& operator=(PendingTrackInfo&& other) noexcept;
+    PendingTrackInfo(PendingTrackInfo&& other);
+    PendingTrackInfo& operator=(PendingTrackInfo&& other);
     ~PendingTrackInfo();
 
     MediaStreamVideoTrack* track;
diff --git a/third_party/blink/renderer/core/animation/interpolation_value.h b/third_party/blink/renderer/core/animation/interpolation_value.h
index 75c5d35..17ccf02 100644
--- a/third_party/blink/renderer/core/animation/interpolation_value.h
+++ b/third_party/blink/renderer/core/animation/interpolation_value.h
@@ -27,11 +27,11 @@
 
   InterpolationValue(std::nullptr_t) {}
 
-  InterpolationValue(InterpolationValue&& other) noexcept
+  InterpolationValue(InterpolationValue&& other)
       : interpolable_value(std::move(other.interpolable_value)),
         non_interpolable_value(std::move(other.non_interpolable_value)) {}
 
-  void operator=(InterpolationValue&& other) noexcept {
+  void operator=(InterpolationValue&& other) {
     interpolable_value = std::move(other.interpolable_value);
     non_interpolable_value = std::move(other.non_interpolable_value);
   }
diff --git a/third_party/blink/renderer/core/animation/pairwise_interpolation_value.h b/third_party/blink/renderer/core/animation/pairwise_interpolation_value.h
index 39e6c57..87bb431 100644
--- a/third_party/blink/renderer/core/animation/pairwise_interpolation_value.h
+++ b/third_party/blink/renderer/core/animation/pairwise_interpolation_value.h
@@ -28,7 +28,7 @@
 
   PairwiseInterpolationValue(std::nullptr_t) {}
 
-  PairwiseInterpolationValue(PairwiseInterpolationValue&& other) noexcept
+  PairwiseInterpolationValue(PairwiseInterpolationValue&& other)
       : start_interpolable_value(std::move(other.start_interpolable_value)),
         end_interpolable_value(std::move(other.end_interpolable_value)),
         non_interpolable_value(std::move(other.non_interpolable_value)) {}
diff --git a/third_party/blink/renderer/core/css/css_selector_list.h b/third_party/blink/renderer/core/css/css_selector_list.h
index 4d38b09..51f354b 100644
--- a/third_party/blink/renderer/core/css/css_selector_list.h
+++ b/third_party/blink/renderer/core/css/css_selector_list.h
@@ -67,8 +67,7 @@
  public:
   CSSSelectorList() : selector_array_(nullptr) {}
 
-  CSSSelectorList(CSSSelectorList&& o) noexcept
-      : selector_array_(o.selector_array_) {
+  CSSSelectorList(CSSSelectorList&& o) : selector_array_(o.selector_array_) {
     o.selector_array_ = nullptr;
   }
 
@@ -82,7 +81,7 @@
   bool HasPseudoWhere() const;
   bool RequiresExpansion() const;
 
-  CSSSelectorList& operator=(CSSSelectorList&& o) noexcept {
+  CSSSelectorList& operator=(CSSSelectorList&& o) {
     DCHECK(this != &o);
     DeleteSelectorsIfNeeded();
     selector_array_ = o.selector_array_;
diff --git a/third_party/blink/renderer/core/display_lock/display_lock_context.cc b/third_party/blink/renderer/core/display_lock/display_lock_context.cc
index 0e6b6cb..79f281a 100644
--- a/third_party/blink/renderer/core/display_lock/display_lock_context.cc
+++ b/third_party/blink/renderer/core/display_lock/display_lock_context.cc
@@ -1033,7 +1033,7 @@
     : context_(context) {}
 
 DisplayLockContext::ScopedForcedUpdate::ScopedForcedUpdate(
-    ScopedForcedUpdate&& other) noexcept
+    ScopedForcedUpdate&& other)
     : context_(other.context_) {
   other.context_ = nullptr;
 }
diff --git a/third_party/blink/renderer/core/display_lock/display_lock_context.h b/third_party/blink/renderer/core/display_lock/display_lock_context.h
index 1a38b2af..f890b432 100644
--- a/third_party/blink/renderer/core/display_lock/display_lock_context.h
+++ b/third_party/blink/renderer/core/display_lock/display_lock_context.h
@@ -76,7 +76,7 @@
     DISALLOW_NEW();
 
    public:
-    ScopedForcedUpdate(ScopedForcedUpdate&&) noexcept;
+    ScopedForcedUpdate(ScopedForcedUpdate&&);
     ~ScopedForcedUpdate();
 
    private:
diff --git a/third_party/blink/renderer/core/editing/layout_selection.cc b/third_party/blink/renderer/core/editing/layout_selection.cc
index 00040d2..73cfe0f 100644
--- a/third_party/blink/renderer/core/editing/layout_selection.cc
+++ b/third_party/blink/renderer/core/editing/layout_selection.cc
@@ -178,7 +178,7 @@
  public:
   OldSelectedNodes()
       : paint_range(MakeGarbageCollected<SelectionPaintRange>()) {}
-  OldSelectedNodes(OldSelectedNodes&& other) noexcept {
+  OldSelectedNodes(OldSelectedNodes&& other) {
     paint_range = other.paint_range;
     selected_map = std::move(other.selected_map);
   }
@@ -205,8 +205,7 @@
       HeapHashSet<Member<const Node>>&& passed_selected_objects)
       : paint_range(passed_paint_range),
         selected_objects(std::move(passed_selected_objects)) {}
-  NewPaintRangeAndSelectedNodes(
-      NewPaintRangeAndSelectedNodes&& other) noexcept {
+  NewPaintRangeAndSelectedNodes(NewPaintRangeAndSelectedNodes&& other) {
     paint_range = other.paint_range;
     selected_objects = std::move(other.selected_objects);
   }
diff --git a/third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.cc b/third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.cc
index f0ac3c4..81f47ab 100644
--- a/third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.cc
+++ b/third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.cc
@@ -24,7 +24,7 @@
       start_time_(clock_->NowTicks()) {}
 
 LocalFrameUkmAggregator::ScopedUkmHierarchicalTimer::ScopedUkmHierarchicalTimer(
-    ScopedUkmHierarchicalTimer&& other) noexcept
+    ScopedUkmHierarchicalTimer&& other)
     : aggregator_(other.aggregator_),
       metric_index_(other.metric_index_),
       clock_(other.clock_),
diff --git a/third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.h b/third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.h
index 44c3f87..dc06091 100644
--- a/third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.h
+++ b/third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.h
@@ -195,7 +195,7 @@
     STACK_ALLOCATED();
 
    public:
-    ScopedUkmHierarchicalTimer(ScopedUkmHierarchicalTimer&&) noexcept;
+    ScopedUkmHierarchicalTimer(ScopedUkmHierarchicalTimer&&);
     ~ScopedUkmHierarchicalTimer();
 
    private:
diff --git a/third_party/blink/renderer/core/layout/ng/inline/ng_line_box_fragment_builder.h b/third_party/blink/renderer/core/layout/ng/inline/ng_line_box_fragment_builder.h
index 2af19ca..498e42e 100644
--- a/third_party/blink/renderer/core/layout/ng/inline/ng_line_box_fragment_builder.h
+++ b/third_party/blink/renderer/core/layout/ng/inline/ng_line_box_fragment_builder.h
@@ -181,7 +181,7 @@
 
    public:
     ChildList() = default;
-    void operator=(ChildList&& other) noexcept {
+    void operator=(ChildList&& other) {
       children_ = std::move(other.children_);
     }
 
diff --git a/third_party/blink/renderer/core/layout/ng/ng_constraint_space.h b/third_party/blink/renderer/core/layout/ng/ng_constraint_space.h
index 8f77b90..833b0d2 100644
--- a/third_party/blink/renderer/core/layout/ng/ng_constraint_space.h
+++ b/third_party/blink/renderer/core/layout/ng/ng_constraint_space.h
@@ -86,7 +86,7 @@
     else
       bfc_offset_ = other.bfc_offset_;
   }
-  NGConstraintSpace(NGConstraintSpace&& other) noexcept
+  NGConstraintSpace(NGConstraintSpace&& other)
       : available_size_(other.available_size_),
         exclusion_space_(std::move(other.exclusion_space_)),
         bitfields_(other.bitfields_) {
@@ -110,7 +110,7 @@
     bitfields_ = other.bitfields_;
     return *this;
   }
-  NGConstraintSpace& operator=(NGConstraintSpace&& other) noexcept {
+  NGConstraintSpace& operator=(NGConstraintSpace&& other) {
     available_size_ = other.available_size_;
     if (HasRareData())
       delete rare_data_;
diff --git a/third_party/blink/renderer/core/messaging/blink_cloneable_message.cc b/third_party/blink/renderer/core/messaging/blink_cloneable_message.cc
index b6c8768..7423930 100644
--- a/third_party/blink/renderer/core/messaging/blink_cloneable_message.cc
+++ b/third_party/blink/renderer/core/messaging/blink_cloneable_message.cc
@@ -9,9 +9,8 @@
 BlinkCloneableMessage::BlinkCloneableMessage() = default;
 BlinkCloneableMessage::~BlinkCloneableMessage() = default;
 
-BlinkCloneableMessage::BlinkCloneableMessage(BlinkCloneableMessage&&) noexcept =
-    default;
+BlinkCloneableMessage::BlinkCloneableMessage(BlinkCloneableMessage&&) = default;
 BlinkCloneableMessage& BlinkCloneableMessage::operator=(
-    BlinkCloneableMessage&&) noexcept = default;
+    BlinkCloneableMessage&&) = default;
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/messaging/blink_cloneable_message.h b/third_party/blink/renderer/core/messaging/blink_cloneable_message.h
index 337b0f8..a51e888 100644
--- a/third_party/blink/renderer/core/messaging/blink_cloneable_message.h
+++ b/third_party/blink/renderer/core/messaging/blink_cloneable_message.h
@@ -21,8 +21,8 @@
   BlinkCloneableMessage();
   ~BlinkCloneableMessage();
 
-  BlinkCloneableMessage(BlinkCloneableMessage&&) noexcept;
-  BlinkCloneableMessage& operator=(BlinkCloneableMessage&&) noexcept;
+  BlinkCloneableMessage(BlinkCloneableMessage&&);
+  BlinkCloneableMessage& operator=(BlinkCloneableMessage&&);
 
   scoped_refptr<blink::SerializedScriptValue> message;
   v8_inspector::V8StackTraceId sender_stack_trace_id;
diff --git a/third_party/blink/renderer/core/messaging/blink_transferable_message.cc b/third_party/blink/renderer/core/messaging/blink_transferable_message.cc
index 909ddb0..b5cdfda 100644
--- a/third_party/blink/renderer/core/messaging/blink_transferable_message.cc
+++ b/third_party/blink/renderer/core/messaging/blink_transferable_message.cc
@@ -16,10 +16,10 @@
 BlinkTransferableMessage::BlinkTransferableMessage() = default;
 BlinkTransferableMessage::~BlinkTransferableMessage() = default;
 
-BlinkTransferableMessage::BlinkTransferableMessage(
-    BlinkTransferableMessage&&) noexcept = default;
+BlinkTransferableMessage::BlinkTransferableMessage(BlinkTransferableMessage&&) =
+    default;
 BlinkTransferableMessage& BlinkTransferableMessage::operator=(
-    BlinkTransferableMessage&&) noexcept = default;
+    BlinkTransferableMessage&&) = default;
 
 scoped_refptr<blink::StaticBitmapImage> ToStaticBitmapImage(
     const SkBitmap& sk_bitmap) {
diff --git a/third_party/blink/renderer/core/messaging/blink_transferable_message.h b/third_party/blink/renderer/core/messaging/blink_transferable_message.h
index edf4fab..3957bed 100644
--- a/third_party/blink/renderer/core/messaging/blink_transferable_message.h
+++ b/third_party/blink/renderer/core/messaging/blink_transferable_message.h
@@ -24,8 +24,8 @@
   BlinkTransferableMessage();
   ~BlinkTransferableMessage();
 
-  BlinkTransferableMessage(BlinkTransferableMessage&&) noexcept;
-  BlinkTransferableMessage& operator=(BlinkTransferableMessage&&) noexcept;
+  BlinkTransferableMessage(BlinkTransferableMessage&&);
+  BlinkTransferableMessage& operator=(BlinkTransferableMessage&&);
 
   Vector<MessagePortChannel> ports;
 
diff --git a/third_party/blink/renderer/modules/imagecapture/image_capture_frame_grabber.h b/third_party/blink/renderer/modules/imagecapture/image_capture_frame_grabber.h
index 85b46e1..f050a85 100644
--- a/third_party/blink/renderer/modules/imagecapture/image_capture_frame_grabber.h
+++ b/third_party/blink/renderer/modules/imagecapture/image_capture_frame_grabber.h
@@ -92,10 +92,10 @@
       std::move(destruction_callback_).Run(std::move(callbacks_));
   }
 
-  ScopedWebCallbacks(ScopedWebCallbacks&& other) noexcept = default;
+  ScopedWebCallbacks(ScopedWebCallbacks&& other) = default;
   ScopedWebCallbacks(const ScopedWebCallbacks& other) = delete;
 
-  ScopedWebCallbacks& operator=(ScopedWebCallbacks&& other) noexcept = default;
+  ScopedWebCallbacks& operator=(ScopedWebCallbacks&& other) = default;
   ScopedWebCallbacks& operator=(const ScopedWebCallbacks& other) = delete;
 
   std::unique_ptr<CallbacksType> PassCallbacks() {
diff --git a/third_party/blink/renderer/modules/indexeddb/idb_request.h b/third_party/blink/renderer/modules/indexeddb/idb_request.h
index f85b864..d3f1132 100644
--- a/third_party/blink/renderer/modules/indexeddb/idb_request.h
+++ b/third_party/blink/renderer/modules/indexeddb/idb_request.h
@@ -110,13 +110,13 @@
     ~AsyncTraceState();
 
     // Used to transfer the trace end event state to an IDBRequest.
-    AsyncTraceState(AsyncTraceState&& other) noexcept {
+    AsyncTraceState(AsyncTraceState&& other) {
       DCHECK(IsEmpty());
       this->trace_event_name_ = other.trace_event_name_;
       this->id_ = other.id_;
       other.trace_event_name_ = nullptr;
     }
-    AsyncTraceState& operator=(AsyncTraceState&& rhs) noexcept {
+    AsyncTraceState& operator=(AsyncTraceState&& rhs) {
       DCHECK(IsEmpty());
       this->trace_event_name_ = rhs.trace_event_name_;
       this->id_ = rhs.id_;
diff --git a/third_party/blink/renderer/modules/indexeddb/idb_request_test.cc b/third_party/blink/renderer/modules/indexeddb/idb_request_test.cc
index 84de726..2d3d4de5 100644
--- a/third_party/blink/renderer/modules/indexeddb/idb_request_test.cc
+++ b/third_party/blink/renderer/modules/indexeddb/idb_request_test.cc
@@ -434,10 +434,9 @@
 class AsyncTraceStateForTesting : public IDBRequest::AsyncTraceState {
  public:
   AsyncTraceStateForTesting() : IDBRequest::AsyncTraceState() {}
-  AsyncTraceStateForTesting(AsyncTraceStateForTesting&& other) noexcept
+  AsyncTraceStateForTesting(AsyncTraceStateForTesting&& other)
       : IDBRequest::AsyncTraceState(std::move(other)) {}
-  AsyncTraceStateForTesting& operator=(
-      AsyncTraceStateForTesting&& rhs) noexcept {
+  AsyncTraceStateForTesting& operator=(AsyncTraceStateForTesting&& rhs) {
     AsyncTraceState::operator=(std::move(rhs));
     return *this;
   }
diff --git a/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util.cc b/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util.cc
index 24499bd..3bf00e9 100644
--- a/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util.cc
+++ b/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util.cc
@@ -134,13 +134,13 @@
 
 VideoCaptureSettings::VideoCaptureSettings(const VideoCaptureSettings& other) =
     default;
-VideoCaptureSettings::VideoCaptureSettings(
-    VideoCaptureSettings&& other) noexcept = default;
+VideoCaptureSettings::VideoCaptureSettings(VideoCaptureSettings&& other) =
+    default;
 VideoCaptureSettings::~VideoCaptureSettings() = default;
 VideoCaptureSettings& VideoCaptureSettings::operator=(
     const VideoCaptureSettings& other) = default;
 VideoCaptureSettings& VideoCaptureSettings::operator=(
-    VideoCaptureSettings&& other) noexcept = default;
+    VideoCaptureSettings&& other) = default;
 
 AudioCaptureSettings::AudioCaptureSettings() : AudioCaptureSettings("") {}
 
@@ -166,10 +166,10 @@
     default;
 AudioCaptureSettings& AudioCaptureSettings::operator=(
     const AudioCaptureSettings& other) = default;
-AudioCaptureSettings::AudioCaptureSettings(
-    AudioCaptureSettings&& other) noexcept = default;
+AudioCaptureSettings::AudioCaptureSettings(AudioCaptureSettings&& other) =
+    default;
 AudioCaptureSettings& AudioCaptureSettings::operator=(
-    AudioCaptureSettings&& other) noexcept = default;
+    AudioCaptureSettings&& other) = default;
 
 bool GetConstraintValueAsBoolean(
     const WebMediaConstraints& constraints,
diff --git a/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util_video_device.cc b/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util_video_device.cc
index 96992217..67c8bab 100644
--- a/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util_video_device.cc
+++ b/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util_video_device.cc
@@ -529,9 +529,9 @@
       facing_mode(facing_mode) {}
 
 VideoInputDeviceCapabilities::VideoInputDeviceCapabilities(
-    VideoInputDeviceCapabilities&& other) noexcept = default;
+    VideoInputDeviceCapabilities&& other) = default;
 VideoInputDeviceCapabilities& VideoInputDeviceCapabilities::operator=(
-    VideoInputDeviceCapabilities&& other) noexcept = default;
+    VideoInputDeviceCapabilities&& other) = default;
 
 VideoInputDeviceCapabilities::~VideoInputDeviceCapabilities() = default;
 
@@ -557,10 +557,10 @@
 
 VideoDeviceCaptureCapabilities::VideoDeviceCaptureCapabilities() = default;
 VideoDeviceCaptureCapabilities::VideoDeviceCaptureCapabilities(
-    VideoDeviceCaptureCapabilities&& other) noexcept = default;
+    VideoDeviceCaptureCapabilities&& other) = default;
 VideoDeviceCaptureCapabilities::~VideoDeviceCaptureCapabilities() = default;
 VideoDeviceCaptureCapabilities& VideoDeviceCaptureCapabilities::operator=(
-    VideoDeviceCaptureCapabilities&& other) noexcept = default;
+    VideoDeviceCaptureCapabilities&& other) = default;
 
 VideoCaptureSettings SelectSettingsVideoDeviceCapture(
     const VideoDeviceCaptureCapabilities& capabilities,
diff --git a/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util_video_device.h b/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util_video_device.h
index 66ae103..94d8ed9 100644
--- a/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util_video_device.h
+++ b/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util_video_device.h
@@ -34,9 +34,8 @@
                                Vector<media::VideoCaptureFormat> formats,
                                media::VideoFacingMode facing_mode);
   VideoInputDeviceCapabilities();
-  VideoInputDeviceCapabilities(VideoInputDeviceCapabilities&& other) noexcept;
-  VideoInputDeviceCapabilities& operator=(
-      VideoInputDeviceCapabilities&& other) noexcept;
+  VideoInputDeviceCapabilities(VideoInputDeviceCapabilities&& other);
+  VideoInputDeviceCapabilities& operator=(VideoInputDeviceCapabilities&& other);
   ~VideoInputDeviceCapabilities();
 
   String device_id;
@@ -47,11 +46,10 @@
 
 struct MODULES_EXPORT VideoDeviceCaptureCapabilities {
   VideoDeviceCaptureCapabilities();
-  VideoDeviceCaptureCapabilities(
-      VideoDeviceCaptureCapabilities&& other) noexcept;
+  VideoDeviceCaptureCapabilities(VideoDeviceCaptureCapabilities&& other);
   ~VideoDeviceCaptureCapabilities();
   VideoDeviceCaptureCapabilities& operator=(
-      VideoDeviceCaptureCapabilities&& other) noexcept;
+      VideoDeviceCaptureCapabilities&& other);
 
   // Each capabilities field is independent of each other.
   // TODO(crbug.com/704136): Replace VideoInputDeviceCapabilities in the
diff --git a/third_party/blink/renderer/modules/mediastream/media_stream_video_source.cc b/third_party/blink/renderer/modules/mediastream/media_stream_video_source.cc
index 7651e47..99759c1 100644
--- a/third_party/blink/renderer/modules/mediastream/media_stream_video_source.cc
+++ b/third_party/blink/renderer/modules/mediastream/media_stream_video_source.cc
@@ -461,10 +461,10 @@
       callback(callback) {}
 
 MediaStreamVideoSource::PendingTrackInfo::PendingTrackInfo(
-    PendingTrackInfo&& other) noexcept = default;
+    PendingTrackInfo&& other) = default;
 MediaStreamVideoSource::PendingTrackInfo&
 MediaStreamVideoSource::PendingTrackInfo::operator=(
-    MediaStreamVideoSource::PendingTrackInfo&& other) noexcept = default;
+    MediaStreamVideoSource::PendingTrackInfo&& other) = default;
 
 MediaStreamVideoSource::PendingTrackInfo::~PendingTrackInfo() {}
 
diff --git a/third_party/blink/renderer/platform/bindings/dom_data_store.h b/third_party/blink/renderer/platform/bindings/dom_data_store.h
index d660b67..0660dd18 100644
--- a/third_party/blink/renderer/platform/bindings/dom_data_store.h
+++ b/third_party/blink/renderer/platform/bindings/dom_data_store.h
@@ -230,12 +230,11 @@
         : TraceWrapperV8Reference(isolate, handle) {}
 
     // Move support without write barrier.
-    DOMWorldWrapperReference(DOMWorldWrapperReference&& other) noexcept
+    DOMWorldWrapperReference(DOMWorldWrapperReference&& other)
         : TraceWrapperV8Reference() {
       handle_ = std::move(other.handle_);
     }
-    DOMWorldWrapperReference& operator=(
-        DOMWorldWrapperReference&& rhs) noexcept {
+    DOMWorldWrapperReference& operator=(DOMWorldWrapperReference&& rhs) {
       handle_ = std::move(rhs.handle_);
       return *this;
     }
diff --git a/third_party/blink/renderer/platform/exported/web_string.cc b/third_party/blink/renderer/platform/exported/web_string.cc
index 71d4c07..fbe4828 100644
--- a/third_party/blink/renderer/platform/exported/web_string.cc
+++ b/third_party/blink/renderer/platform/exported/web_string.cc
@@ -51,9 +51,9 @@
 WebString::~WebString() = default;
 WebString::WebString() = default;
 WebString::WebString(const WebString&) = default;
-WebString::WebString(WebString&&) noexcept = default;
+WebString::WebString(WebString&&) = default;
 WebString& WebString::operator=(const WebString&) = default;
-WebString& WebString::operator=(WebString&&) noexcept = default;
+WebString& WebString::operator=(WebString&&) = default;
 
 WebString::WebString(const WebUChar* data, size_t len)
     : impl_(StringImpl::Create8BitIfPossible(data, len)) {}
diff --git a/third_party/blink/renderer/platform/graphics/contiguous_container.cc b/third_party/blink/renderer/platform/graphics/contiguous_container.cc
index fd01c00..19cb6f2 100644
--- a/third_party/blink/renderer/platform/graphics/contiguous_container.cc
+++ b/third_party/blink/renderer/platform/graphics/contiguous_container.cc
@@ -69,7 +69,7 @@
     : end_index_(0), max_object_size_(max_object_size) {}
 
 ContiguousContainerBase::ContiguousContainerBase(
-    ContiguousContainerBase&& source) noexcept
+    ContiguousContainerBase&& source)
     : ContiguousContainerBase(source.max_object_size_) {
   Swap(source);
 }
@@ -77,7 +77,7 @@
 ContiguousContainerBase::~ContiguousContainerBase() = default;
 
 ContiguousContainerBase& ContiguousContainerBase::operator=(
-    ContiguousContainerBase&& source) noexcept {
+    ContiguousContainerBase&& source) {
   Swap(source);
   return *this;
 }
diff --git a/third_party/blink/renderer/platform/graphics/contiguous_container.h b/third_party/blink/renderer/platform/graphics/contiguous_container.h
index 867e59c..3eee558 100644
--- a/third_party/blink/renderer/platform/graphics/contiguous_container.h
+++ b/third_party/blink/renderer/platform/graphics/contiguous_container.h
@@ -42,10 +42,10 @@
 
  protected:
   explicit ContiguousContainerBase(size_t max_object_size);
-  ContiguousContainerBase(ContiguousContainerBase&&) noexcept;
+  ContiguousContainerBase(ContiguousContainerBase&&);
   ~ContiguousContainerBase();
 
-  ContiguousContainerBase& operator=(ContiguousContainerBase&&) noexcept;
+  ContiguousContainerBase& operator=(ContiguousContainerBase&&);
 
   size_t size() const { return elements_.size(); }
   bool IsEmpty() const { return !size(); }
@@ -147,7 +147,7 @@
                            WTF_HEAP_PROFILER_TYPE_NAME(BaseElementType));
   }
 
-  ContiguousContainer(ContiguousContainer&& source) noexcept
+  ContiguousContainer(ContiguousContainer&& source)
       : ContiguousContainerBase(std::move(source)) {}
 
   ~ContiguousContainer() {
@@ -157,7 +157,7 @@
     }
   }
 
-  ContiguousContainer& operator=(ContiguousContainer&& source) noexcept {
+  ContiguousContainer& operator=(ContiguousContainer&& source) {
     // Must clear in the derived class to ensure that element destructors
     // care called.
     Clear();
diff --git a/third_party/blink/renderer/platform/graphics/gpu/image_layer_bridge.cc b/third_party/blink/renderer/platform/graphics/gpu/image_layer_bridge.cc
index ad10c54..4edbf7f 100644
--- a/third_party/blink/renderer/platform/graphics/gpu/image_layer_bridge.cc
+++ b/third_party/blink/renderer/platform/graphics/gpu/image_layer_bridge.cc
@@ -247,9 +247,9 @@
 }
 
 ImageLayerBridge::RegisteredBitmap::RegisteredBitmap() = default;
-ImageLayerBridge::RegisteredBitmap::RegisteredBitmap(
-    RegisteredBitmap&& other) noexcept = default;
+ImageLayerBridge::RegisteredBitmap::RegisteredBitmap(RegisteredBitmap&& other) =
+    default;
 ImageLayerBridge::RegisteredBitmap& ImageLayerBridge::RegisteredBitmap::
-operator=(RegisteredBitmap&& other) noexcept = default;
+operator=(RegisteredBitmap&& other) = default;
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/platform/graphics/gpu/image_layer_bridge.h b/third_party/blink/renderer/platform/graphics/gpu/image_layer_bridge.h
index bea81dfb..b6879f9 100644
--- a/third_party/blink/renderer/platform/graphics/gpu/image_layer_bridge.h
+++ b/third_party/blink/renderer/platform/graphics/gpu/image_layer_bridge.h
@@ -65,8 +65,8 @@
   // only with software compositing.
   struct RegisteredBitmap {
     RegisteredBitmap();
-    RegisteredBitmap(RegisteredBitmap&& other) noexcept;
-    RegisteredBitmap& operator=(RegisteredBitmap&& other) noexcept;
+    RegisteredBitmap(RegisteredBitmap&& other);
+    RegisteredBitmap& operator=(RegisteredBitmap&& other);
 
     scoped_refptr<cc::CrossThreadSharedBitmap> bitmap;
     cc::SharedBitmapIdRegistration registration;
diff --git a/third_party/blink/renderer/platform/graphics/paint/display_item_list.h b/third_party/blink/renderer/platform/graphics/paint/display_item_list.h
index cd3ed2f..9ee2571 100644
--- a/third_party/blink/renderer/platform/graphics/paint/display_item_list.h
+++ b/third_party/blink/renderer/platform/graphics/paint/display_item_list.h
@@ -28,10 +28,10 @@
  public:
   DisplayItemList(size_t initial_size_bytes)
       : ContiguousContainer(kMaximumDisplayItemSize, initial_size_bytes) {}
-  DisplayItemList(DisplayItemList&& source) noexcept
+  DisplayItemList(DisplayItemList&& source)
       : ContiguousContainer(std::move(source)) {}
 
-  DisplayItemList& operator=(DisplayItemList&& source) noexcept {
+  DisplayItemList& operator=(DisplayItemList&& source) {
     ContiguousContainer::operator=(std::move(source));
     return *this;
   }
diff --git a/third_party/blink/renderer/platform/heap/heap_test.cc b/third_party/blink/renderer/platform/heap/heap_test.cc
index dad0ca0..e94cbc95 100644
--- a/third_party/blink/renderer/platform/heap/heap_test.cc
+++ b/third_party/blink/renderer/platform/heap/heap_test.cc
@@ -145,7 +145,7 @@
   }
   KeyWithCopyingMoveConstructor(const KeyWithCopyingMoveConstructor&) = default;
   // The move constructor delegates to the copy constructor intentionally.
-  KeyWithCopyingMoveConstructor(KeyWithCopyingMoveConstructor&& x) noexcept
+  KeyWithCopyingMoveConstructor(KeyWithCopyingMoveConstructor&& x)
       : KeyWithCopyingMoveConstructor(x) {}
   KeyWithCopyingMoveConstructor& operator=(
       const KeyWithCopyingMoveConstructor&) = default;
diff --git a/third_party/blink/renderer/platform/image-decoders/segment_stream.cc b/third_party/blink/renderer/platform/image-decoders/segment_stream.cc
index 4024f9c..5a98701 100644
--- a/third_party/blink/renderer/platform/image-decoders/segment_stream.cc
+++ b/third_party/blink/renderer/platform/image-decoders/segment_stream.cc
@@ -10,10 +10,10 @@
 
 SegmentStream::SegmentStream() = default;
 
-SegmentStream::SegmentStream(SegmentStream&& rhs) noexcept
+SegmentStream::SegmentStream(SegmentStream&& rhs)
     : reader_(std::move(rhs.reader_)), position_(rhs.position_) {}
 
-SegmentStream& SegmentStream::operator=(SegmentStream&& rhs) noexcept {
+SegmentStream& SegmentStream::operator=(SegmentStream&& rhs) {
   reader_ = std::move(rhs.reader_);
   position_ = rhs.position_;
 
diff --git a/third_party/blink/renderer/platform/image-decoders/segment_stream.h b/third_party/blink/renderer/platform/image-decoders/segment_stream.h
index f49f551..fa1ccf2 100644
--- a/third_party/blink/renderer/platform/image-decoders/segment_stream.h
+++ b/third_party/blink/renderer/platform/image-decoders/segment_stream.h
@@ -19,8 +19,8 @@
   SegmentStream();
   SegmentStream(const SegmentStream&) = delete;
   SegmentStream& operator=(const SegmentStream&) = delete;
-  SegmentStream(SegmentStream&&) noexcept;
-  SegmentStream& operator=(SegmentStream&&) noexcept;
+  SegmentStream(SegmentStream&&);
+  SegmentStream& operator=(SegmentStream&&);
 
   ~SegmentStream() override;
 
diff --git a/third_party/blink/renderer/platform/mojo/revocable_interface_ptr.h b/third_party/blink/renderer/platform/mojo/revocable_interface_ptr.h
index 555be28..34bad3f 100644
--- a/third_party/blink/renderer/platform/mojo/revocable_interface_ptr.h
+++ b/third_party/blink/renderer/platform/mojo/revocable_interface_ptr.h
@@ -41,7 +41,7 @@
   RevocableInterfacePtr(std::nullptr_t) {}
 
   // Takes over the binding of another RevocableInterfacePtr.
-  RevocableInterfacePtr(RevocableInterfacePtr&& other) noexcept {
+  RevocableInterfacePtr(RevocableInterfacePtr&& other) {
     interface_ptr_ = std::move(other.interface_ptr_);
     SetInvalidator(other.invalidator_.get());
     // Reset the other interface ptr to remove it as an observer of the
@@ -58,7 +58,7 @@
 
   // Takes over the binding of another RevocableInterfacePtr, and closes any
   // message pipe already bound to this pointer.
-  RevocableInterfacePtr& operator=(RevocableInterfacePtr&& other) noexcept {
+  RevocableInterfacePtr& operator=(RevocableInterfacePtr&& other) {
     reset();
     interface_ptr_ = std::move(other.interface_ptr_);
     SetInvalidator(other.invalidator_.get());
diff --git a/third_party/blink/renderer/platform/network/encoded_form_data.cc b/third_party/blink/renderer/platform/network/encoded_form_data.cc
index bc4ec14..1b660e6 100644
--- a/third_party/blink/renderer/platform/network/encoded_form_data.cc
+++ b/third_party/blink/renderer/platform/network/encoded_form_data.cc
@@ -61,11 +61,10 @@
     : type_(kDataPipe), data_pipe_getter_(std::move(data_pipe_getter)) {}
 
 FormDataElement::FormDataElement(const FormDataElement&) = default;
-FormDataElement::FormDataElement(FormDataElement&&) noexcept = default;
+FormDataElement::FormDataElement(FormDataElement&&) = default;
 FormDataElement::~FormDataElement() = default;
 FormDataElement& FormDataElement::operator=(const FormDataElement&) = default;
-FormDataElement& FormDataElement::operator=(FormDataElement&&) noexcept =
-    default;
+FormDataElement& FormDataElement::operator=(FormDataElement&&) = default;
 
 bool operator==(const FormDataElement& a, const FormDataElement& b) {
   if (&a == &b)
diff --git a/third_party/blink/renderer/platform/network/encoded_form_data.h b/third_party/blink/renderer/platform/network/encoded_form_data.h
index 48f84c8..865f664 100644
--- a/third_party/blink/renderer/platform/network/encoded_form_data.h
+++ b/third_party/blink/renderer/platform/network/encoded_form_data.h
@@ -61,12 +61,12 @@
   explicit FormDataElement(scoped_refptr<WrappedDataPipeGetter>);
 
   FormDataElement(const FormDataElement&);
-  FormDataElement(FormDataElement&&) noexcept;
+  FormDataElement(FormDataElement&&);
 
   ~FormDataElement();
 
   FormDataElement& operator=(const FormDataElement&);
-  FormDataElement& operator=(FormDataElement&&) noexcept;
+  FormDataElement& operator=(FormDataElement&&);
 
   bool IsSafeToSendToAnotherThread() const;
 
diff --git a/third_party/blink/renderer/platform/scheduler/common/frame_or_worker_scheduler.cc b/third_party/blink/renderer/platform/scheduler/common/frame_or_worker_scheduler.cc
index ebe99ff..e971856 100644
--- a/third_party/blink/renderer/platform/scheduler/common/frame_or_worker_scheduler.cc
+++ b/third_party/blink/renderer/platform/scheduler/common/frame_or_worker_scheduler.cc
@@ -28,15 +28,14 @@
 }
 
 FrameOrWorkerScheduler::SchedulingAffectingFeatureHandle::
-    SchedulingAffectingFeatureHandle(
-        SchedulingAffectingFeatureHandle&& other) noexcept
+    SchedulingAffectingFeatureHandle(SchedulingAffectingFeatureHandle&& other)
     : feature_(other.feature_), scheduler_(std::move(other.scheduler_)) {
   other.scheduler_ = nullptr;
 }
 
 FrameOrWorkerScheduler::SchedulingAffectingFeatureHandle&
 FrameOrWorkerScheduler::SchedulingAffectingFeatureHandle::operator=(
-    SchedulingAffectingFeatureHandle&& other) noexcept {
+    SchedulingAffectingFeatureHandle&& other) {
   feature_ = other.feature_;
   policy_ = std::move(other.policy_);
   scheduler_ = std::move(other.scheduler_);
diff --git a/third_party/blink/renderer/platform/scheduler/common/post_cancellable_task.cc b/third_party/blink/renderer/platform/scheduler/common/post_cancellable_task.cc
index 2c84d70..fad56ee1 100644
--- a/third_party/blink/renderer/platform/scheduler/common/post_cancellable_task.cc
+++ b/third_party/blink/renderer/platform/scheduler/common/post_cancellable_task.cc
@@ -103,9 +103,9 @@
   Cancel();
 }
 
-TaskHandle::TaskHandle(TaskHandle&&) noexcept = default;
+TaskHandle::TaskHandle(TaskHandle&&) = default;
 
-TaskHandle& TaskHandle::operator=(TaskHandle&& other) noexcept {
+TaskHandle& TaskHandle::operator=(TaskHandle&& other) {
   TaskHandle tmp(std::move(other));
   runner_.swap(tmp.runner_);
   return *this;
diff --git a/third_party/blink/renderer/platform/scheduler/main_thread/web_scoped_virtual_time_pauser.cc b/third_party/blink/renderer/platform/scheduler/main_thread/web_scoped_virtual_time_pauser.cc
index f55730a..b64ec9d 100644
--- a/third_party/blink/renderer/platform/scheduler/main_thread/web_scoped_virtual_time_pauser.cc
+++ b/third_party/blink/renderer/platform/scheduler/main_thread/web_scoped_virtual_time_pauser.cc
@@ -28,7 +28,7 @@
 }
 
 WebScopedVirtualTimePauser::WebScopedVirtualTimePauser(
-    WebScopedVirtualTimePauser&& other) noexcept {
+    WebScopedVirtualTimePauser&& other) {
   virtual_time_when_paused_ = other.virtual_time_when_paused_;
   paused_ = other.paused_;
   duration_ = other.duration_;
@@ -39,7 +39,7 @@
 }
 
 WebScopedVirtualTimePauser& WebScopedVirtualTimePauser::operator=(
-    WebScopedVirtualTimePauser&& other) noexcept {
+    WebScopedVirtualTimePauser&& other) {
   if (scheduler_ && paused_)
     DecrementVirtualTimePauseCount();
   virtual_time_when_paused_ = other.virtual_time_when_paused_;
diff --git a/third_party/blink/renderer/platform/scheduler/public/frame_or_worker_scheduler.h b/third_party/blink/renderer/platform/scheduler/public/frame_or_worker_scheduler.h
index 56915ee..3fdb8cf 100644
--- a/third_party/blink/renderer/platform/scheduler/public/frame_or_worker_scheduler.h
+++ b/third_party/blink/renderer/platform/scheduler/public/frame_or_worker_scheduler.h
@@ -57,12 +57,11 @@
 
    public:
     SchedulingAffectingFeatureHandle() = default;
-    SchedulingAffectingFeatureHandle(
-        SchedulingAffectingFeatureHandle&&) noexcept;
+    SchedulingAffectingFeatureHandle(SchedulingAffectingFeatureHandle&&);
     inline ~SchedulingAffectingFeatureHandle() { reset(); }
 
     SchedulingAffectingFeatureHandle& operator=(
-        SchedulingAffectingFeatureHandle&&) noexcept;
+        SchedulingAffectingFeatureHandle&&);
 
     inline void reset() {
       if (scheduler_)
diff --git a/third_party/blink/renderer/platform/scheduler/public/post_cancellable_task.h b/third_party/blink/renderer/platform/scheduler/public/post_cancellable_task.h
index 38cbf63..ae66c73 100644
--- a/third_party/blink/renderer/platform/scheduler/public/post_cancellable_task.h
+++ b/third_party/blink/renderer/platform/scheduler/public/post_cancellable_task.h
@@ -28,8 +28,8 @@
   TaskHandle();
   ~TaskHandle();
 
-  TaskHandle(TaskHandle&&) noexcept;
-  TaskHandle& operator=(TaskHandle&&) noexcept;
+  TaskHandle(TaskHandle&&);
+  TaskHandle& operator=(TaskHandle&&);
 
   // Returns true if the task will run later. Returns false if the task is
   // cancelled or the task is run already.
diff --git a/third_party/blink/renderer/platform/weborigin/origin_access_entry.cc b/third_party/blink/renderer/platform/weborigin/origin_access_entry.cc
index 2e9a9d1..c9d777e7 100644
--- a/third_party/blink/renderer/platform/weborigin/origin_access_entry.cc
+++ b/third_party/blink/renderer/platform/weborigin/origin_access_entry.cc
@@ -59,8 +59,7 @@
                network::mojom::CorsPortMatchMode::kAllowOnlySpecifiedPort,
                priority) {}
 
-OriginAccessEntry::OriginAccessEntry(OriginAccessEntry&& from) noexcept =
-    default;
+OriginAccessEntry::OriginAccessEntry(OriginAccessEntry&& from) = default;
 
 network::cors::OriginAccessEntry::MatchResult OriginAccessEntry::MatchesOrigin(
     const SecurityOrigin& origin) const {
diff --git a/third_party/blink/renderer/platform/weborigin/origin_access_entry.h b/third_party/blink/renderer/platform/weborigin/origin_access_entry.h
index b3e5674..5113a40 100644
--- a/third_party/blink/renderer/platform/weborigin/origin_access_entry.h
+++ b/third_party/blink/renderer/platform/weborigin/origin_access_entry.h
@@ -58,7 +58,7 @@
       network::mojom::CorsDomainMatchMode,
       network::mojom::CorsOriginAccessMatchPriority priority =
           network::mojom::CorsOriginAccessMatchPriority::kDefaultPriority);
-  OriginAccessEntry(OriginAccessEntry&& from) noexcept;
+  OriginAccessEntry(OriginAccessEntry&& from);
 
   network::cors::OriginAccessEntry::MatchResult MatchesOrigin(
       const SecurityOrigin&) const;
diff --git a/third_party/blink/renderer/platform/wtf/deque.h b/third_party/blink/renderer/platform/wtf/deque.h
index c6fe1b9..4a98ffb 100644
--- a/third_party/blink/renderer/platform/wtf/deque.h
+++ b/third_party/blink/renderer/platform/wtf/deque.h
@@ -64,8 +64,8 @@ class Deque {
   Deque();
   Deque(const Deque&);
   Deque& operator=(const Deque&);
-  Deque(Deque&&) noexcept;
-  Deque& operator=(Deque&&) noexcept;
+  Deque(Deque&&);
+  Deque& operator=(Deque&&);
   ~Deque();
 
   void FinalizeGarbageCollectedObject() { NOTREACHED(); }
@@ -343,14 +343,14 @@
 }
 
 template <typename T, wtf_size_t inlineCapacity, typename Allocator>
-inline Deque<T, inlineCapacity, Allocator>::Deque(Deque&& other) noexcept
+inline Deque<T, inlineCapacity, Allocator>::Deque(Deque&& other)
     : start_(0), end_(0) {
   Swap(other);
 }
 
 template <typename T, wtf_size_t inlineCapacity, typename Allocator>
 inline Deque<T, inlineCapacity, Allocator>&
-Deque<T, inlineCapacity, Allocator>::operator=(Deque&& other) noexcept {
+Deque<T, inlineCapacity, Allocator>::operator=(Deque&& other) {
   Swap(other);
   return *this;
 }
diff --git a/third_party/blink/renderer/platform/wtf/functional.h b/third_party/blink/renderer/platform/wtf/functional.h
index 2c5aeea..5e4b373 100644
--- a/third_party/blink/renderer/platform/wtf/functional.h
+++ b/third_party/blink/renderer/platform/wtf/functional.h
@@ -117,8 +117,7 @@
 class PassedWrapper final {
  public:
   explicit PassedWrapper(T&& scoper) : scoper_(std::move(scoper)) {}
-  PassedWrapper(PassedWrapper&& other) noexcept
-      : scoper_(std::move(other.scoper_)) {}
+  PassedWrapper(PassedWrapper&& other) : scoper_(std::move(other.scoper_)) {}
   T MoveOut() const { return std::move(scoper_); }
 
  private:
@@ -319,9 +318,8 @@
   CrossThreadFunction(const CrossThreadFunction&) = delete;
   CrossThreadFunction& operator=(const CrossThreadFunction&) = delete;
 
-  CrossThreadFunction(CrossThreadFunction&& other) noexcept = default;
-  CrossThreadFunction& operator=(CrossThreadFunction&& other) noexcept =
-      default;
+  CrossThreadFunction(CrossThreadFunction&& other) = default;
+  CrossThreadFunction& operator=(CrossThreadFunction&& other) = default;
 
   R Run(Args... args) const & {
     return callback_.Run(std::forward<Args>(args)...);
@@ -356,9 +354,8 @@
   CrossThreadOnceFunction(const CrossThreadOnceFunction&) = delete;
   CrossThreadOnceFunction& operator=(const CrossThreadOnceFunction&) = delete;
 
-  CrossThreadOnceFunction(CrossThreadOnceFunction&& other) noexcept = default;
-  CrossThreadOnceFunction& operator=(CrossThreadOnceFunction&& other) noexcept =
-      default;
+  CrossThreadOnceFunction(CrossThreadOnceFunction&& other) = default;
+  CrossThreadOnceFunction& operator=(CrossThreadOnceFunction&& other) = default;
 
   R Run(Args... args) && {
     return std::move(callback_).Run(std::forward<Args>(args)...);
diff --git a/third_party/blink/renderer/platform/wtf/hash_map.h b/third_party/blink/renderer/platform/wtf/hash_map.h
index 8a002a8..46b39e0 100644
--- a/third_party/blink/renderer/platform/wtf/hash_map.h
+++ b/third_party/blink/renderer/platform/wtf/hash_map.h
@@ -106,8 +106,8 @@
 #endif
   HashMap(const HashMap&) = default;
   HashMap& operator=(const HashMap&) = default;
-  HashMap(HashMap&&) noexcept = default;
-  HashMap& operator=(HashMap&&) noexcept = default;
+  HashMap(HashMap&&) = default;
+  HashMap& operator=(HashMap&&) = default;
 
   // For example, HashMap<int, int>({{1, 11}, {2, 22}, {3, 33}}) will give you
   // a HashMap containing a mapping {1 -> 11, 2 -> 22, 3 -> 33}.
diff --git a/third_party/blink/renderer/platform/wtf/hash_set.h b/third_party/blink/renderer/platform/wtf/hash_set.h
index c79e45f1..d7cdeed 100644
--- a/third_party/blink/renderer/platform/wtf/hash_set.h
+++ b/third_party/blink/renderer/platform/wtf/hash_set.h
@@ -74,8 +74,8 @@
   }
   HashSet(const HashSet&) = default;
   HashSet& operator=(const HashSet&) = default;
-  HashSet(HashSet&&) noexcept = default;
-  HashSet& operator=(HashSet&&) noexcept = default;
+  HashSet(HashSet&&) = default;
+  HashSet& operator=(HashSet&&) = default;
 
   HashSet(std::initializer_list<ValueType> elements);
   HashSet& operator=(std::initializer_list<ValueType> elements);
diff --git a/third_party/blink/renderer/platform/wtf/hash_table.h b/third_party/blink/renderer/platform/wtf/hash_table.h
index 373280f..52483ec5 100644
--- a/third_party/blink/renderer/platform/wtf/hash_table.h
+++ b/third_party/blink/renderer/platform/wtf/hash_table.h
@@ -747,10 +747,10 @@
   }
 
   HashTable(const HashTable&);
-  HashTable(HashTable&&) noexcept;
+  HashTable(HashTable&&);
   void swap(HashTable&);
   HashTable& operator=(const HashTable&);
-  HashTable& operator=(HashTable&&) noexcept;
+  HashTable& operator=(HashTable&&);
 
   // When the hash table is empty, just return the same iterator for end as
   // for begin.  This is more efficient because we don't have to skip all the
@@ -1929,7 +1929,7 @@
           typename KeyTraits,
           typename Allocator>
 HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits, Allocator>::
-    HashTable(HashTable&& other) noexcept
+    HashTable(HashTable&& other)
     : table_(nullptr),
       table_size_(0),
       key_count_(0),
@@ -2008,7 +2008,7 @@
           typename Allocator>
 HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits, Allocator>&
 HashTable<Key, Value, Extractor, HashFunctions, Traits, KeyTraits, Allocator>::
-operator=(HashTable&& other) noexcept {
+operator=(HashTable&& other) {
   swap(other);
   return *this;
 }
diff --git a/third_party/blink/renderer/platform/wtf/linked_hash_set.h b/third_party/blink/renderer/platform/wtf/linked_hash_set.h
index 79c3d76d..71ef37a 100644
--- a/third_party/blink/renderer/platform/wtf/linked_hash_set.h
+++ b/third_party/blink/renderer/platform/wtf/linked_hash_set.h
@@ -121,7 +121,7 @@
   LinkedHashSetNodeBase(const LinkedHashSetNodeBase& other)
       : prev_(nullptr), next_(nullptr) {}
 
-  LinkedHashSetNodeBase(LinkedHashSetNodeBase&& other) noexcept
+  LinkedHashSetNodeBase(LinkedHashSetNodeBase&& other)
       : prev_(other.prev_), next_(other.next_) {
     other.prev_ = nullptr;
     other.next_ = nullptr;
@@ -151,7 +151,7 @@
                     LinkedHashSetNodeBase* next)
       : LinkedHashSetNodeBase(prev, next), value_(std::move(value)) {}
 
-  LinkedHashSetNode(LinkedHashSetNode&& other) noexcept
+  LinkedHashSetNode(LinkedHashSetNode&& other)
       : LinkedHashSetNodeBase(std::move(other)),
         value_(std::move(other.value_)) {}
 
@@ -214,9 +214,9 @@
 
   LinkedHashSet();
   LinkedHashSet(const LinkedHashSet&);
-  LinkedHashSet(LinkedHashSet&&) noexcept;
+  LinkedHashSet(LinkedHashSet&&);
   LinkedHashSet& operator=(const LinkedHashSet&);
-  LinkedHashSet& operator=(LinkedHashSet&&) noexcept;
+  LinkedHashSet& operator=(LinkedHashSet&&);
 
   // Needs finalization. The anchor needs to unlink itself from the chain.
   ~LinkedHashSet();
@@ -748,7 +748,7 @@
 }
 
 template <typename T, typename U, typename V, typename W>
-inline LinkedHashSet<T, U, V, W>::LinkedHashSet(LinkedHashSet&& other) noexcept
+inline LinkedHashSet<T, U, V, W>::LinkedHashSet(LinkedHashSet&& other)
     : anchor_() {
   Swap(other);
 }
@@ -763,7 +763,7 @@
 
 template <typename T, typename U, typename V, typename W>
 inline LinkedHashSet<T, U, V, W>& LinkedHashSet<T, U, V, W>::operator=(
-    LinkedHashSet&& other) noexcept {
+    LinkedHashSet&& other) {
   Swap(other);
   return *this;
 }
diff --git a/third_party/blink/renderer/platform/wtf/list_hash_set.h b/third_party/blink/renderer/platform/wtf/list_hash_set.h
index ead6a87..78bd279 100644
--- a/third_party/blink/renderer/platform/wtf/list_hash_set.h
+++ b/third_party/blink/renderer/platform/wtf/list_hash_set.h
@@ -145,9 +145,9 @@ class ListHashSet {
 
   ListHashSet();
   ListHashSet(const ListHashSet&);
-  ListHashSet(ListHashSet&&) noexcept;
+  ListHashSet(ListHashSet&&);
   ListHashSet& operator=(const ListHashSet&);
-  ListHashSet& operator=(ListHashSet&&) noexcept;
+  ListHashSet& operator=(ListHashSet&&);
   ~ListHashSet();
 
   void Swap(ListHashSet&);
@@ -780,8 +780,7 @@
 }
 
 template <typename T, size_t inlineCapacity, typename U, typename V>
-inline ListHashSet<T, inlineCapacity, U, V>::ListHashSet(
-    ListHashSet&& other) noexcept
+inline ListHashSet<T, inlineCapacity, U, V>::ListHashSet(ListHashSet&& other)
     : head_(nullptr), tail_(nullptr) {
   Swap(other);
 }
@@ -796,7 +795,7 @@
 
 template <typename T, size_t inlineCapacity, typename U, typename V>
 inline ListHashSet<T, inlineCapacity, U, V>&
-ListHashSet<T, inlineCapacity, U, V>::operator=(ListHashSet&& other) noexcept {
+ListHashSet<T, inlineCapacity, U, V>::operator=(ListHashSet&& other) {
   Swap(other);
   return *this;
 }
diff --git a/third_party/blink/renderer/platform/wtf/type_traits_test.cc b/third_party/blink/renderer/platform/wtf/type_traits_test.cc
index 0930b73..1b45d55 100644
--- a/third_party/blink/renderer/platform/wtf/type_traits_test.cc
+++ b/third_party/blink/renderer/platform/wtf/type_traits_test.cc
@@ -158,7 +158,7 @@
   STACK_ALLOCATED();
 
  public:
-  CopyAssignmentDeleted& operator=(CopyAssignmentDeleted&&) noexcept;
+  CopyAssignmentDeleted& operator=(CopyAssignmentDeleted&&);
 
  private:
   CopyAssignmentDeleted& operator=(const CopyAssignmentDeleted&) = delete;
@@ -173,7 +173,7 @@
   STACK_ALLOCATED();
 
  public:
-  CopyAssignmentPrivate& operator=(CopyAssignmentPrivate&&) noexcept;
+  CopyAssignmentPrivate& operator=(CopyAssignmentPrivate&&);
 
  private:
   CopyAssignmentPrivate& operator=(const CopyAssignmentPrivate&);
@@ -188,7 +188,7 @@
   STACK_ALLOCATED();
 
  public:
-  CopyAssignmentUndeclared& operator=(CopyAssignmentUndeclared&&) noexcept;
+  CopyAssignmentUndeclared& operator=(CopyAssignmentUndeclared&&);
 };
 
 static_assert(!std::is_copy_assignable<CopyAssignmentUndeclared>::value,
diff --git a/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_contents.h b/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_contents.h
index 3f44cd2..ee7c89a 100644
--- a/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_contents.h
+++ b/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_contents.h
@@ -68,7 +68,7 @@
           deleter_(deleter),
           deleter_info_(deleter_info) {}
     // Move constructor
-    DataHandle(DataHandle&& other) noexcept { *this = std::move(other); }
+    DataHandle(DataHandle&& other) { *this = std::move(other); }
     ~DataHandle() {
       if (!data_)
         return;
diff --git a/third_party/blink/renderer/platform/wtf/vector.h b/third_party/blink/renderer/platform/wtf/vector.h
index 2783c2b..43a27f7 100644
--- a/third_party/blink/renderer/platform/wtf/vector.h
+++ b/third_party/blink/renderer/platform/wtf/vector.h
@@ -1018,8 +1018,8 @@
   Vector& operator=(const Vector<T, otherCapacity, Allocator>&);
 
   // Moving.
-  Vector(Vector&&) noexcept;
-  Vector& operator=(Vector&&) noexcept;
+  Vector(Vector&&);
+  Vector& operator=(Vector&&);
 
   // Construct with an initializer list. You can do e.g.
   //     Vector<int> v({1, 2, 3});
@@ -1459,7 +1459,7 @@
 
 template <typename T, wtf_size_t inlineCapacity, typename Allocator>
 Vector<T, inlineCapacity, Allocator>::Vector(
-    Vector<T, inlineCapacity, Allocator>&& other) noexcept {
+    Vector<T, inlineCapacity, Allocator>&& other) {
   size_ = 0;
   // It's a little weird to implement a move constructor using swap but this
   // way we don't have to add a move constructor to VectorBuffer.
@@ -1468,7 +1468,7 @@
 
 template <typename T, wtf_size_t inlineCapacity, typename Allocator>
 Vector<T, inlineCapacity, Allocator>& Vector<T, inlineCapacity, Allocator>::
-operator=(Vector<T, inlineCapacity, Allocator>&& other) noexcept {
+operator=(Vector<T, inlineCapacity, Allocator>&& other) {
   swap(other);
   return *this;
 }
diff --git a/third_party/blink/renderer/platform/wtf/vector_test.cc b/third_party/blink/renderer/platform/wtf/vector_test.cc
index aa8a138..788cc2bb 100644
--- a/third_party/blink/renderer/platform/wtf/vector_test.cc
+++ b/third_party/blink/renderer/platform/wtf/vector_test.cc
@@ -420,8 +420,8 @@
 class MojoMoveOnlyType final {
  public:
   MojoMoveOnlyType();
-  MojoMoveOnlyType(MojoMoveOnlyType&&) noexcept;
-  MojoMoveOnlyType& operator=(MojoMoveOnlyType&&) noexcept;
+  MojoMoveOnlyType(MojoMoveOnlyType&&);
+  MojoMoveOnlyType& operator=(MojoMoveOnlyType&&);
   ~MojoMoveOnlyType();
 
  private:
diff --git a/third_party/blink/renderer/platform/wtf/wtf_test_helper.h b/third_party/blink/renderer/platform/wtf/wtf_test_helper.h
index e797445..8f31365 100644
--- a/third_party/blink/renderer/platform/wtf/wtf_test_helper.h
+++ b/third_party/blink/renderer/platform/wtf/wtf_test_helper.h
@@ -36,9 +36,9 @@
  public:
   explicit MoveOnly(int i = 0) : i_(i) {}
 
-  MoveOnly(MoveOnly&& other) noexcept : i_(other.i_) { other.i_ = 0; }
+  MoveOnly(MoveOnly&& other) : i_(other.i_) { other.i_ = 0; }
 
-  MoveOnly& operator=(MoveOnly&& other) noexcept {
+  MoveOnly& operator=(MoveOnly&& other) {
     if (this != &other) {
       i_ = other.i_;
       other.i_ = 0;
@@ -62,12 +62,12 @@
 
   explicit MoveOnlyHashValue(int value = kEmpty, int id = 0)
       : value_(value), id_(id) {}
-  MoveOnlyHashValue(MoveOnlyHashValue&& other) noexcept
+  MoveOnlyHashValue(MoveOnlyHashValue&& other)
       : value_(other.value_), id_(other.id_) {
     other.value_ = kMovedOut;
     other.id_ = 0;
   }
-  MoveOnlyHashValue& operator=(MoveOnlyHashValue&& other) noexcept {
+  MoveOnlyHashValue& operator=(MoveOnlyHashValue&& other) {
     value_ = other.value_;
     id_ = other.id_;
     other.value_ = kMovedOut;
