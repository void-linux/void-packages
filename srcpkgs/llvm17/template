# Template file for 'llvm17'
pkgname=llvm17
version=17.0.6
revision=6
build_wrksrc=llvm
build_style=cmake
_llvm_prefix=lib/llvm/17
_llvm_mandir=usr/${_llvm_prefix}/share/man
_llvm_bindir=usr/${_llvm_prefix}/bin
_llvm_datadir=usr/${_llvm_prefix}/share
_llvm_incdir=usr/${_llvm_prefix}/include
_llvm_libdir=usr/${_llvm_prefix}/lib
_llvm_libexecdir=usr/${_llvm_prefix}/libexec
configure_args="
 -DCMAKE_BUILD_TYPE=Release -Wno-dev
 -DCMAKE_INSTALL_PREFIX=/usr/${_llvm_prefix}
 -DENABLE_LINKER_BUILD_ID=YES
 -DLIBCXX_CXX_ABI=libcxxabi
 -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=YES
 -DLIBCXXABI_USE_LLVM_UNWINDER=YES
 -DLIBCXXABI_ENABLE_STATIC_UNWINDER=YES
 -DLIBOMP_ENABLE_SHARED=YES
 -DLIBOMP_INSTALL_ALIASES=NO
 -DOPENMP_INSTALL_LIBDIR=lib
 -DOFFLOAD_INSTALL_LIBDIR=lib
 -DLLVM_INCLUDE_DOCS=YES
 -DLLVM_BUILD_DOCS=YES
 -DLLVM_ENABLE_SPHINX=YES
 -DSPHINX_WARNINGS_AS_ERRORS=NO
 -DLLVM_INSTALL_UTILS=YES
 -DLLVM_BUILD_LLVM_DYLIB=YES
 -DLLVM_LINK_LLVM_DYLIB=YES
 -DCLANG_LINK_CLANG_DYLIB=YES
 -DCLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang17
 -DLLVM_ENABLE_RTTI=YES
 -DLLVM_ENABLE_FFI=YES
 -DLLVM_BINUTILS_INCDIR=/usr/include
 -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=NO
 -DLLDB_ENABLE_PYTHON=NO
"
hostmakedepends="perl zlib-devel libffi-devel swig python3-Sphinx pkg-config
 python3-recommonmark python3-sphinx-automodapi python3-yaml
 python3-sphinx-markdown-tables"
makedepends="zlib-devel elfutils-devel libffi-devel libedit-devel libxml2-devel
 binutils-devel"
short_desc="LLVM Compiler Infrastructure Project - Version 17"
maintainer="Daniel Martinez <danielmartinez@cock.li>"
license="Apache-2.0"
homepage="https://www.llvm.org"
distfiles="https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}/llvm-project-${version}.src.tar.xz"
checksum=58a8818c60e6627064f312dbf46c02d9949956558340938b71cf731ad8bc0813
conflicts="llvm15>=0"
lib32disabled=yes
python_version=3

build_options="clang clang_tools_extra lld mlir libclc polly lldb flang bolt openmp"
build_options_default="clang clang_tools_extra lld mlir libclc polly lldb openmp"

if [ "$XBPS_TARGET_WORDSIZE" = "64" ]; then
	build_options_default+=" flang bolt"
fi

# build fails because compiler_rt generates armv7 instructions when target is armv6
case "$XBPS_TARGET_MACHINE" in
	armv6*) ;;
	*) configure_args+=" -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON" ;;
esac

if [ "$XBPS_TARGET_LIBC" = "musl" ]; then
	configure_args+=" -DLIBCXX_HAS_MUSL_LIBC=YES
	 -DCOMPILER_RT_BUILD_GWP_ASAN=OFF"
fi

subpackages="libllvm17 llvm17-doc llvm17-devel"

# use $(:) to silence xlint
_enabled_projects=$(:)

if [ "$build_option_clang" ]; then
	_enabled_projects+="clang;"
	subpackages+=" clang17 clang17-headers clang17-devel libclang17 libclang-cpp17 clang-analyzer17 "
fi
if [ "$build_option_clang_tools_extra" ]; then
	_enabled_projects+="clang-tools-extra;"
	subpackages+=" clang-tools-extra17 "
fi
if [ "$build_option_bolt" ]; then
	_enabled_projects+="bolt;"
	subpackages+=" llvm-bolt17 "
fi
if [ "$build_option_polly" ]; then
	_enabled_projects+="polly;"
fi
if [ "$build_option_lldb" ]; then
	_enabled_projects+="lldb;"
	subpackages+=" lldb17 lldb17-devel liblldb17 "
fi
if [ "$build_option_lld" ]; then
	_enabled_projects+="lld;"
	subpackages+=" lld17 lld17-devel "
fi
if [ "$build_option_libclc" ]; then
	_enabled_projects+="libclc;"
fi
if [ "$build_option_mlir" ]; then
	_enabled_projects+="mlir;"
	subpackages+=" mlir17 mlir17-devel "
fi
if [ "$build_option_flang" ]; then
	_enabled_projects+="flang;"
	subpackages+=" flang17 flang17-devel "
fi

subpackages+=" compiler-rt17 "
_enabled_runtimes="compiler-rt"

if [ "$build_option_openmp" ]; then
	# openmp fails when built as runtime if cross-compiled
	if [ "$CROSS_BUILD" ]; then
		_enabled_projects+="openmp;"
	else
		_enabled_runtimes+=";openmp"
	fi
	subpackages+=" libomp17 libomp17-devel "
fi

configure_args+=" -DLLVM_ENABLE_RUNTIMES=${_enabled_runtimes}"
configure_args+=" -DLLVM_ENABLE_PROJECTS=${_enabled_projects}"

if [ "$CROSS_BUILD" ]; then
	hostmakedepends+=" llvm17-cross-tools"
fi

# For OCaml bindings and lldb lua scripting
if [ -z "$CROSS_BUILD" ]; then
	subpackages+=" llvm17-cross-tools"
	# OCaml cross build is broken
	hostmakedepends+=" ocaml ocaml-findlib "
	# lldb cross build fails with lua
	makedepends+=" lua53-devel "
fi

_vlink_libs() {
	local _files="$1"
	local _f
	for _f in $DESTDIR/$_files; do
		local _base=$(basename "${_f}")
		ln -s llvm/17/lib/${_base} ${DESTDIR}/usr/lib
		vmove ${_llvm_libdir}/${_base}
		vmove usr/lib/${_base}
	done
}

post_patch() {
	if [ "$build_option_lldb" ]; then
		if [ "$XBPS_TARGET_LIBC" = "musl" ]; then
			vsed -i 's|__ptrace_request|int|g' \
				${wrksrc}/lldb/source/Plugins/Process/Linux/NativeProcessLinux.cpp
		fi
		# disable docs for lldb as they fail to generate
		vsed -i '/add_subdirectory(docs)/d' \
			${wrksrc}/lldb/CMakeLists.txt
	fi

	# update config.guess for better platform detection
	cp $XBPS_COMMONDIR/environment/configure/automake/config.guess \
		${wrksrc}/llvm/cmake

	# fix linker failures on some archs
	vsed -i 's,check_library_exists(gcc_s .*,set(LIBCXXABI_HAS_GCC_S_LIB ON),' \
		${wrksrc}/libcxxabi/cmake/config-ix.cmake
	vsed -i 's,check_library_exists(gcc .*,set(LIBCXXABI_HAS_GCC_LIB ON),' \
		${wrksrc}/libcxxabi/cmake/config-ix.cmake

	# need libssp_nonshared on some musl platforms (because of nodefaultlibs)
	case "$XBPS_TARGET_MACHINE" in
		ppc64*) ;;
		ppc*-musl|i686-musl|mips*-musl)
			vsed -i 's,^# Setup flags.$,add_library_flags(ssp_nonshared),' \
				${wrksrc}/libunwind/src/CMakeLists.txt
			vsed -i 's,^# Setup flags.$,add_library_flags(ssp_nonshared),' \
				${wrksrc}/libcxxabi/src/CMakeLists.txt
			vsed -i 's,#ssp,,' ${wrksrc}/libcxx/CMakeLists.txt
			;;
	esac
}

pre_configure() {
	local triplet

	# Vastly reduce size of debugging symbols:
	CFLAGS=${CFLAGS/ -g/ -g1}
	CXXFLAGS=${CXXFLAGS/ -g/ -g1}

	# since gcc9, the build likes to blow up for ppc32 apparently because
	# of clang being too large for a 24-bit relative call to the PLT, so
	# optimize for size instead
	case "$XBPS_TARGET_MACHINE" in
		ppc64*) ;;
		mips*-musl|ppc*) configure_args+=" -DVOID_CXX_OPT_FLAGS=-Os" ;;
		armv*) configure_args+=" -DLIBCXX_VOID_GCC_BUG_109180_WORKAROUND=ON ";;
	esac

	if [ "$CROSS_BUILD" ]; then
		configure_args+=" -DLLVM_NATIVE_TOOL_DIR=/${_llvm_bindir}"
		configure_args+=" -DLLVM_TABLEGEN=/${_llvm_bindir}/llvm-tblgen"
		configure_args+=" -DCLANG_TABLEGEN=/${_llvm_bindir}/clang-tblgen"
		configure_args+=" -DMLIR_TABLEGEN=/${_llvm_bindir}/mlir-tblgen"
		configure_args+=" -DMLIR_PDLL_TABLEGEN=/${_llvm_bindir}/mlir-pdll"
		configure_args+=" -DMLIR_LINALG_ODS_YAML_GEN=/${_llvm_bindir}/mlir-linalg-ods-yaml-gen"
		configure_args+=" -DCLANG_TIDY_CONFUSABLE_CHARS_GEN=/${_llvm_bindir}/clang-tidy-confusable-chars-gen"
		configure_args+=" -DCLANG_PSEUDO_GEN=/${_llvm_bindir}/clang-pseudo-gen"
		configure_args+=" -DLLVM_CONFIG_PATH=/${_llvm_bindir}/llvm-config"
		configure_args+=" -DLLDB_TABLEGEN_EXE=/${_llvm_bindir}/lldb-tblgen"
	fi

	case "$XBPS_TARGET_MACHINE" in
	arm*-musl|i686-musl|riscv64-musl)
		# sanitizer code is broken since it duplicates some libc bits
		configure_args+=" -DCOMPILER_RT_BUILD_SANITIZERS=NO"
		configure_args+=" -DCOMPILER_RT_BUILD_XRAY=NO"
		configure_args+=" -DCOMPILER_RT_BUILD_MEMPROF=NO"
		;;
	esac

	case "$XBPS_TARGET_MACHINE" in
		i686*) _arch="X86";;
		x86_64*) _arch="X86";;
		armv5*) _arch="Armv5te";;
		armv6*) _arch="Armv6";;
		armv7*) _arch="Armv7";;
		aarch64*) _arch="AArch64";;
		mips*) _arch="Mips";;
		ppc*) _arch="PowerPC";;
		riscv64*) _arch="RISCV64";;
	esac

	triplet=${XBPS_CROSS_TRIPLET:-$XBPS_TRIPLET}

	configure_args+=" -DLLVM_TARGET_ARCH=${_arch}"
	configure_args+=" -DLLVM_HOST_TRIPLE=${triplet}"
	configure_args+=" -DLLVM_DEFAULT_TARGET_TRIPLE=${triplet}"
	PATH="/usr/libexec/chroot-git:$PATH"
}

pre_build() {
	PATH="/usr/libexec/chroot-git:$PATH"
}

post_build() {
	if [ -z "$CROSS_BUILD" ]; then
		# Binaries ONLY used during the process of building llvm, and aren't usually installed
		vmkdir usr/bin
		vcopy build/bin/lldb-tblgen usr/bin
		vcopy build/bin/clang-tidy-confusable-chars-gen usr/bin
		vcopy build/bin/clang-pseudo-gen usr/bin
	fi
}

post_install() {

	# Required for multilib.
	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		for _header in llvm-config; do
			mv ${DESTDIR}/${_llvm_incdir}/llvm/Config/${_header}{,-64}.h
			vinstall ${FILESDIR}/llvm-Config-${_header}.h 644 \
				${_llvm_incdir}/Config ${_header}.h
		done
	fi

	# Remove llvm-config-host in cross builds.
	if [ "$CROSS_BUILD" ]; then
		rm -f ${DESTDIR}/${_llvm_bindir}/llvm-config-host
	fi

	rm -rf ${DESTDIR}/usr/share/gdb

	# Can this be disabled some other way?
	rm -rf ${DESTDIR}/usr/lib64

	vmkdir usr/lib/clang
	ln -s ../llvm/17/lib/clang/17 ${DESTDIR}/usr/lib/clang/17
}

_llvm_alts=(
	bin/FileCheck share/man/man1/FileCheck.1
	bin/UnicodeNameMappingGenerator
	bin/bugpoint share/man/man1/bugpoint.1
	bin/count
	bin/dsymutil share/man/man1/dsymutil.1
	bin/intercept-build
	bin/llc
	bin/lli
	bin/lli-child-target
	bin/llvm-PerfectShuffle
	bin/llvm-addr2line
	bin/llvm-ar
	bin/llvm-as
	bin/llvm-bcanalyzer
	bin/llvm-bitcode-strip
	bin/llvm-c-test
	bin/llvm-cat
	bin/llvm-cfi-verify
	bin/llvm-cgdata
	bin/llvm-config
	bin/llvm-cov
	bin/llvm-cvtres
	bin/llvm-cxxdump
	bin/llvm-cxxfilt
	bin/llvm-cxxmap
	bin/llvm-debuginfo-analyzer
	bin/llvm-debuginfod
	bin/llvm-debuginfod-find
	bin/llvm-diff
	bin/llvm-dis
	bin/llvm-dlltool
	bin/llvm-dwarfdump
	bin/llvm-dwarfutil
	bin/llvm-dwp
	bin/llvm-exegesis
	bin/llvm-extract
	bin/llvm-gsymutil
	bin/llvm-ifs
	bin/llvm-install-name-tool
	bin/llvm-jitlink
	bin/llvm-jitlink-executor
	bin/llvm-lib
	bin/llvm-libtool-darwin
	bin/llvm-link
	bin/llvm-lipo
	bin/llvm-lto
	bin/llvm-lto2
	bin/llvm-mc
	bin/llvm-mca
	bin/llvm-ml
	bin/llvm-modextract
	bin/llvm-mt
	bin/llvm-nm
	bin/llvm-objcopy
	bin/llvm-objdump
	bin/llvm-opt-report share/man/man1/llvm-opt-report.1
	bin/llvm-otool
	bin/llvm-pdbutil
	bin/llvm-profdata   share/man/man1/llvm-profdata.1
	bin/llvm-profgen    share/man/man1/llvm-profgen.1
	bin/llvm-ranlib     share/man/man1/llvm-ranlib.1
	bin/llvm-rc
	bin/llvm-readelf    share/man/man1/llvm-readelf.1
	bin/llvm-readobj    share/man/man1/llvm-readobj.1
	bin/llvm-remark-size-diff
	bin/llvm-reduce     share/man/man1/llvm-reduce.1
	bin/llvm-remarkutil share/man/man1/llvm-remarkutil.1
	bin/llvm-rtdyld
	bin/llvm-sim
	bin/llvm-size        share/man/man1/llvm-size.1
	bin/llvm-split
	bin/llvm-stress      share/man/man1/llvm-stress.1
	bin/llvm-strings     share/man/man1/llvm-strings.1
	bin/llvm-strip       share/man/man1/llvm-strip.1
	bin/llvm-symbolizer  share/man/man1/llvm-symbolizer.1
	bin/llvm-tblgen      share/man/man1/llvm-tblgen.1
	bin/llvm-tli-checker share/man/man1/llvm-tli-checker.1
	bin/llvm-undname
	bin/llvm-windres
	bin/llvm-xray
	bin/not
	bin/obj2yaml
	bin/opt share/man/man1/opt.1
	bin/sancov
	bin/sanstats
	bin/split-file
	bin/verify-uselistorder
	bin/yaml-bench
	bin/yaml2obj
	share/man/man1/lit.1
	share/man/man1/llc.1
	share/man/man1/lldb-tblgen.1
	share/man/man1/lli.1
	share/man/man1/llvm-addr2line.1
	share/man/man1/llvm-ar.1
	share/man/man1/llvm-as.1
	share/man/man1/llvm-bcanalyzer.1
	share/man/man1/llvm-config.1
	share/man/man1/llvm-cov.1
	share/man/man1/llvm-cxxfilt.1
	share/man/man1/llvm-cxxmap.1
	share/man/man1/llvm-debuginfo-analyzer.1
	share/man/man1/llvm-diff.1
	share/man/man1/llvm-dis.1
	share/man/man1/llvm-dwarfdump.1
	share/man/man1/llvm-dwarfutil.1
	share/man/man1/llvm-exegesis.1
	share/man/man1/llvm-extract.1
	share/man/man1/llvm-ifs.1
	share/man/man1/llvm-install-name-tool.1
	share/man/man1/llvm-lib.1
	share/man/man1/llvm-libtool-darwin.1
	share/man/man1/llvm-link.1
	share/man/man1/llvm-lipo.1
	share/man/man1/llvm-locstats.1
	share/man/man1/llvm-mc.1
	share/man/man1/llvm-mca.1
	share/man/man1/llvm-nm.1
	share/man/man1/llvm-objcopy.1
	share/man/man1/llvm-objdump.1
	share/man/man1/llvm-otool.1
	share/man/man1/llvm-pdbutil.1
	share/man/man1/llvm-remark-size-diff.1
	share/man/man1/tblgen.1
)

alternatives=$(:)
for _alt in "${_llvm_alts[@]}"; do
	alternatives+=" llvm:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
done

clang17_package() {
	lib32disabled=yes
	depends="libstdc++-devel libgcc-devel binutils compiler-rt17>=0"
	case "${XBPS_TARGET_MACHINE}" in
	armv[67]l-musl) depends+=" musl1.1-devel" ;;
	*) depends+=" ${XBPS_TARGET_LIBC}-devel" ;;
	esac
	conflicts="clang15>=0"
	short_desc+=" - C language family frontend"
	homepage="https://clang.llvm.org/"
	_clang17_files=(
		bin/clang-17
		bin/clang
		bin/clang++
		bin/clang-cl
		bin/clang-cpp
		bin/clang-check
		bin/clang-extdef-mapping
		bin/clang-format
		bin/clang-linker-wrapper
		bin/clang-offload-bundler
		bin/clang-offload-packager
		bin/clang-refactor
		bin/clang-rename
		bin/clang-repl
		bin/clang-scan-deps
		bin/clang-tblgen
		bin/c-index-test
		bin/diagtool
		bin/amdgpu-arch
		bin/nvptx-arch
		bin/hmaptool
		bin/git-clang-format
		lib/LLVMgold.so
		share/man/man1/clang.1
		share/man/man1/diagtool.1
		share/man/man1/clang-tblgen.1
	)

	for _alt in "${_clang17_files[@]}"; do
		alternatives+=" clang:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
	done

	if [ "$build_option_polly" ]; then
		alternatives+="
		 clang:/usr/lib/LLVMPolly.so:/${_llvm_libdir}/LLVMPolly.so
		 clang:/usr/share/man/man1/polly.1:/${_llvm_mandir}/man1/polly1.1
		"
	fi

	pkg_install() {
		for _bin in "${_clang17_files[@]}"; do
			vmove usr/${_llvm_prefix}/${_bin}
		done

		if [ "$build_option_polly" ]; then
			vmove ${_llvm_libdir}/LLVMPolly.so
			vmove ${_llvm_mandir}/man1/polly.1
		fi
	}
}

clang17-headers_package() {
	lib32disabled=yes
	short_desc+=" - C language family frontend - Headers"
	homepage="https://clang.llvm.org/"
	pkg_install() {
		vmove ${_llvm_libdir}/clang/17/include
		vmove usr/lib/clang
	}
}

clang17-devel_package() {
	lib32disabled=yes
	depends="libstdc++-devel libgcc-devel binutils
	 clang17>=${version}_${revision} clang-analyzer17>=${version}_${revision}
	 llvm17>=${version}_${revision}"
	case "${XBPS_TARGET_MACHINE}" in
	armv[67]l-musl) depends+=" musl1.1-devel" ;;
	*) depends+=" ${XBPS_TARGET_LIBC}-devel" ;;
	esac
	conflicts="clang15-devel>=0"
	if [ "$build_option_clang_tools_extra" ]; then
		depends+=" clang-tools-extra17>=${version}_${revision}"
	fi
	short_desc+=" - C language family frontend - development Files"
	homepage="https://clang.llvm.org/"
	pkg_install() {
		vmove ${_llvm_incdir}/clang
		vmove ${_llvm_incdir}/clang-c
		vmove ${_llvm_libdir}/libear
		vmove ${_llvm_libdir}/cmake/clang
		vmove "${_llvm_libdir}/libclang*.a"
		vmove "${_llvm_libdir}/libclang*.so"
		vmove ${_llvm_datadir}/clang
		if [ "$build_option_clang_tools_extra" ]; then
			vmove ${_llvm_incdir}/clang-tidy
			vmove ${_llvm_libdir}/libfindAllSymbols.a
		fi
		if [ "$build_option_polly" ]; then
			vmove ${_llvm_incdir}/polly
			vmove ${_llvm_libdir}/cmake/polly
			vmove "${_llvm_libdir}/libPolly*.a"
		fi
	}
}

libclang17_package() {
	depends="clang17-headers>=${version}_${revision}"
	short_desc+=" - C frontend library"
	pkg_install() {
		_vlink_libs "${_llvm_libdir}/libclang.so.*"
	}
}

libclang-cpp17_package() {
	depends="clang17-headers>=${version}_${revision}"
	short_desc+=" - C frontend library (C++ interface)"
	pkg_install() {
		_vlink_libs "${_llvm_libdir}/libclang-cpp.so.*"
	}
}

clang-analyzer17_package() {
	depends="clang17>=${version}_${revision} python3 perl"
	short_desc+=" - A source code analysis framework"
	homepage="https://clang-analyzer.llvm.org/"
	pycompile_dirs="usr/share/scan-view"
	conflicts="clang-analyzer15>=0"
	_clang_analyzer17_files=(
		share/scan-view
		share/scan-build
		lib/libscanbuild
		libexec/analyze-c++
		libexec/analyze-cc
		libexec/intercept-c++
		libexec/intercept-cc
		libexec/c++-analyzer
		libexec/ccc-analyzer
		share/man/man1/scan-build.1
		bin/analyze-build
		bin/scan-build
		bin/scan-build-py
		bin/scan-view
	)
	for _alt in "${_clang_analyzer17_files[@]}"; do
		alternatives+=" clang-analyzer:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
	done
	pkg_install() {
		for _f in "${_clang_analyzer17_files[@]}"; do
			vmove usr/${_llvm_prefix}/${_f}
		done
	}
}

clang-tools-extra17_package() {
	lib32disabled=yes
	depends="clang17>=${version}_${revision} python3"
	short_desc+=" - Extra Clang tools"
	homepage="https://clang.llvm.org/extra/"
	conflicts="clang-tools-extra15>=0"
	_clang_tools_extra17_files=(
		bin/clang-apply-replacements
		bin/clang-change-namespace
		bin/clang-doc
		bin/clang-include-cleaner
		bin/clang-include-fixer
		bin/clang-move
		bin/clang-pseudo
		bin/clang-query
		bin/clang-reorder-fields
		bin/clang-tidy
		bin/clangd
		bin/find-all-symbols
		bin/modularize
		bin/pp-trace
		bin/run-clang-tidy
		share/man/man1/extraclangtools.1
	)
	for _alt in "${_clang_tools_extra17_files[@]}"; do
		alternatives+=" clang-tools-extra:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
	done
	pkg_install() {
		vlicense ${wrksrc}/clang-tools-extra/LICENSE.TXT
		for _f in "${_clang_tools_extra17_files[@]}"; do
			vmove usr/${_llvm_prefix}/${_f}
		done
	}
}

# "bolt" package name is already used
llvm-bolt17_package() {
	lib32disabled=yes
	short_desc+=" - post-link optimizer"
	homepage="https://github.com/llvm/llvm-project/tree/main/bolt"
	depends="clang17>=${version}_${revision}"
	_llvm_bolt17_files=(
		bin/llvm-bolt
		bin/perf2bolt
		bin/llvm-boltdiff
		bin/merge-fdata
		bin/llvm-bolt-heatmap
	)
	for _alt in "${_llvm_bolt17_files[@]}"; do
		alternatives+=" llvm-bolt:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
	done
	pkg_install() {
		vlicense ${wrksrc}/bolt/LICENSE.TXT
		for _f in "${_llvm_bolt17_files[@]}"; do
			vmove usr/${_llvm_prefix}/${_f}
		done
		if [ -z "$CROSS_BUILD" ]; then
			vmove ${_llvm_libdir}/libbolt_rt_instr.a
			vmove ${_llvm_libdir}/libbolt_rt_hugify.a
		fi
	}
}

lldb17_package() {
	lib32disabled=yes
	short_desc+=" - LLDB debugger"
	homepage="https://lldb.llvm.org/"
	conflicts="lldb15>=0"
	_lldb17_files=(
		bin/lldb
		bin/lldb-argdumper
		bin/lldb-instr
		bin/lldb-server
		bin/lldb-vscode
	)
	if [ -z "$CROSS_BUILD" ]; then
		_lldb17_files+=("lib/lua/5.3/lldb.so")
	fi
	for _alt in "${_lldb17_files[@]}"; do
		alternatives+=" lldb:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
	done
	pkg_install() {
		vlicense ${wrksrc}/lldb/LICENSE.TXT
		for _f in "${_lldb17_files[@]}"; do
			vmove usr/${_llvm_prefix}/${_f}
		done
	}
}

lldb17-devel_package() {
	lib32disabled=yes
	depends="lldb17>=${version}_${revision}"
	short_desc+=" - LLDB debugger - development files"
	conflicts="lldb15-devel>=0"
	pkg_install() {
		vmove ${_llvm_incdir}/lldb
		vmove "${_llvm_libdir}/liblldb*.so"
	}
}

liblldb17_package() {
	lib32disabled=yes
	short_desc+=" - LLDB debugger - runtime library"
	pkg_install() {
		_vlink_libs "${_llvm_libdir}/liblldb*.so.*"
	}
}

lld17_package() {
	lib32disabled=yes
	short_desc+=" - linker"
	homepage="https://lld.llvm.org"
	conflicts="lld15>=0"
	_lld17_files=(
		bin/lld
		bin/lld-link
		bin/ld.lld
		bin/ld64.lld
		bin/wasm-ld
	)
	for _alt in "${_lld17_files[@]}"; do
		alternatives+=" lld:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
	done
	pkg_install() {
		vlicense ${wrksrc}/lld/LICENSE.TXT
		for _f in "${_lld17_files[@]}"; do
			vmove usr/${_llvm_prefix}/${_f}
		done
	}
}

lld17-devel_package() {
	lib32disabled=yes
	short_desc+=" - linker - development files"
	homepage="https://lld.llvm.org"
	depends="lld17>=${version}_${revision} llvm17>=${version}_${revision}"
	conflicts="lld15-devel>=0"
	pkg_install() {
		vmove ${_llvm_incdir}/lld
		vmove ${_llvm_libdir}/cmake/lld
		vmove "${_llvm_libdir}/liblld*.a"
	}
}

mlir17_package() {
	lib32disabled=yes
	short_desc+=" - multi-level IR compiler framework"
	homepage="https://mlir.llvm.org/"
	_mlir17_files=(
		bin/mlir-cpu-runner
		bin/mlir-linalg-ods-yaml-gen
		bin/mlir-lsp-server
		bin/mlir-opt
		bin/mlir-pdll
		bin/mlir-pdll-lsp-server
		bin/mlir-reduce
		bin/mlir-tblgen
		bin/mlir-translate
		bin/tblgen-lsp-server
		share/man/man1/mlir-tblgen.1
	)
	for _alt in "${_mlir17_files[@]}"; do
		alternatives+=" mlir:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
	done
	pkg_install() {
		for _f in "${_mlir17_files[@]}"; do
			vmove usr/${_llvm_prefix}/${_f}
		done
		_vlink_libs "${_llvm_libdir}/libMLIR*.so.*"
		_vlink_libs "${_llvm_libdir}/libmlir*.so.*"
	}
}

mlir17-devel_package() {
	lib32disabled=yes
	short_desc+=" - multi-level IR compiler framework - development files"
	homepage="https://mlir.llvm.org/"
	depends="mlir17>=${version}_${revision} llvm17>=${version}_${revision}"
	pkg_install() {
		vmove ${_llvm_incdir}/mlir
		vmove ${_llvm_incdir}/mlir-c
		vmove ${_llvm_libdir}/cmake/mlir
		vmove "${_llvm_libdir}/libMLIR*"
		vmove "${_llvm_libdir}/objects-Release/obj.MLIR*"
		vmove "${_llvm_libdir}/libmlir*"
	}
}

flang17_package() {
	lib32disabled=yes
	short_desc+=" - Fortran language frontend"
	homepage="https://flang.llvm.org/"
	depends="mlir17>=${version}_${revision}"
	_flang17_files=(
		bin/flang-new
		bin/flang-to-external-fc
		bin/bbc
		bin/f18-parse-demo
		bin/fir-opt
		bin/tco
	)
	for _alt in "${_flang17_files[@]}"; do
		alternatives+=" flang:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
	done
	pkg_install() {
		for _f in "${_flang17_files[@]}"; do
			vmove usr/${_llvm_prefix}/${_f}
		done
		vmove "${_llvm_libdir}/libflang*.a"
		vmove "${_llvm_libdir}/libFortran*.a"
		vmove "${_llvm_incdir}/flang/*.mod"
	}
}

flang17-devel_package() {
	lib32disabled=yes
	short_desc+=" - Fortran language frontend - development files"
	homepage="https://flang.llvm.org/"
	depends="flang17>=${version}_${revision} llvm17>=${version}_${revision}"
	pkg_install() {
		vmove ${_llvm_incdir}/flang
		vmove ${_llvm_libdir}/cmake/flang
		vmove "${_llvm_libdir}/libFIR*.a"
		vmove "${_llvm_libdir}/libHLFIR*.a"
	}
}

libomp17_package() {
	short_desc+=" - Clang OpenMP support library"
	_libomp17_files=(
		lib/libomp.so
	)
	case "$XBPS_TARGET_MACHINE" in
		x86_64*|aarch64*|riscv64*)
			_libomp17_files+=("lib/libompd.so")
		;;
	esac
	if [ "$build_option_offload" ]; then
		_libomp17_files+=("bin/llvm-omp-device-info")
		_libomp17_files+=("bin/llvm-omp-kernel-replay")
		_libomp17_files+=("lib/libomptarget.so")
	fi
	for _alt in "${_libomp17_files[@]}"; do
		alternatives+=" libomp:/usr/${_alt}:/usr/${_llvm_prefix}/${_alt}"
	done
	pkg_install() {
		for _f in "${_libomp17_files[@]}"; do
			vmove usr/${_llvm_prefix}/${_f}
		done
		if [ "$build_option_offload" ]; then
			_vlink_libs "${_llvm_libdir}/libomp*.so*"
		fi
	}
}

libomp17-devel_package() {
	short_desc+=" - Clang OpenMP support library - development files"
	depends="libomp17>=${version}_${revision} llvm17>=${version}_${revision}"
	pkg_install() {
		if [ -f "${DESTDIR}/${_llvm_libdir}/libarcher.so" ]; then
			vmove "${_llvm_libdir}/libarcher*.so"
		fi
		if [ -f "${DESTDIR}/${_llvm_libdir}/libarcher_static.a" ]; then
			vmove "${_llvm_libdir}/libarcher*.a"
		fi

		vmove ${_llvm_libdir}/cmake/openmp

		if [ "$build_option_offload" ]; then
			vmove "${_llvm_libdir}/libomptarget*.bc"
			vmove "${_llvm_libdir}/libomp*.a"
		fi
	}
}

compiler-rt17_package() {
	short_desc+=" - runtime libraries"
	homepage="https://compiler-rt.llvm.org/"
	depends="clang17-headers>=${version}_${revision}"
	pkg_install() {
		vmove ${_llvm_libdir}/clang/17/lib
		if [ -d "${DESTDIR}/${_llvm_libdir}/clang/17/bin" ]; then
			vmove ${_llvm_libdir}/clang/17/bin
		fi
		if [ -d "${DESTDIR}/${_llvm_libdir}/clang/17/share" ]; then
			vmove ${_llvm_libdir}/clang/17/share
		fi
	}
}

libllvm17_package() {
	short_desc+=" - library"
	pkg_install() {
		_vlink_libs "${_llvm_libdir}/libLLVM-*.so"
	}
}

llvm17-doc_package() {
	short_desc+=" - documentation"
	pkg_install() {
		vmove ${_llvm_datadir}/doc
	}
}

llvm17-devel_package() {
	short_desc+=" - development files"
	depends="llvm17>=${version}_${revision}"
	conflicts="llvm15-devel>=0"
	if [ "$build_option_openmp" ]; then
		depends+=" libomp17-devel>=${version}_${revision} "
	fi
	if [ "$build_option_mlir" ]; then
		depends+=" mlir17-devel>=${version}_${revision} "
	fi
	if [ "$build_option_clang" ]; then
		depends+=" clang17-devel>=${version}_${revision} "
	fi
	pkg_install() {
		vmove ${_llvm_libdir}/libLLVM.so
		vmove ${_llvm_libdir}/libLTO.so
		vmove ${_llvm_libdir}/libRemarks.so
		vmove ${_llvm_incdir}/llvm
		vmove ${_llvm_incdir}/llvm-c
		vmove "${_llvm_libdir}/libLLVM*.a"
		vmove ${_llvm_libdir}/cmake/llvm
	}
}

# These binaries are ONLY used when building llvm, they aren't normally installed
llvm17-cross-tools_package() {
	short_desc+=" - build tools for cross compiling LLVM"
	depends="lldb17-devel>=${version}_${revision} llvm17-devel>=${version}_${revision}"
	pkg_install() {
		vmkdir ${_llvm_bindir}
		vcopy build/bin/clang-tidy-confusable-chars-gen ${_llvm_bindir}
		vcopy build/bin/clang-pseudo-gen ${_llvm_bindir}

		if [ "$build_option_lldb" ]; then
			vcopy build/bin/lldb-tblgen ${_llvm_bindir}
		fi
	}
}
