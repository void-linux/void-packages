Source: https://www.virtualbox.org/ticket/20914
--- a/src/VBox/Additions/linux/drm/vbox_fb.c
+++ b/src/VBox/Additions/linux/drm/vbox_fb.c
@@ -362,6 +362,9 @@ static int vboxfb_create(struct drm_fb_h
 	info->screen_size = size;
 
 #ifdef CONFIG_FB_DEFERRED_IO
+# if RTLNX_VER_MIN(5,19,0)
+	info->fix.smem_len = info->screen_size;
+# endif
 	info->fbdefio = &vbox_defio;
 	fb_deferred_io_init(info);
 #endif
--- a/src/VBox/Additions/linux/drm/vbox_ttm.c
+++ b/src/VBox/Additions/linux/drm/vbox_ttm.c
@@ -320,8 +320,10 @@ static struct ttm_tt *vbox_ttm_tt_create
 	if (ttm_tt_init(tt, bdev, size, page_flags, dummy_read_page)) {
 #elif RTLNX_VER_MAX(5,11,0) && !RTLNX_RHEL_RANGE(8,5, 8,99)
 	if (ttm_tt_init(tt, bo, page_flags)) {
-#else
+#elif RTLNX_VER_MAX(5,19,0)
 	if (ttm_tt_init(tt, bo, page_flags, ttm_write_combined)) {
+#else
+	if (ttm_tt_init(tt, bo, page_flags, ttm_write_combined, 0)) {
 #endif
 		kfree(tt);
 		return NULL;
--- a/src/VBox/Additions/linux/sharedfolders/regops.c
+++ b/src/VBox/Additions/linux/sharedfolders/regops.c
@@ -3581,8 +3581,14 @@ struct inode_operations vbsf_reg_iops =
  * Needed for mmap and reads+writes when the file is mmapped in a
  * shared+writeable fashion.
  */
+#if RTLNX_VER_MIN(5,19,0)
+static int vbsf_read_folio(struct file *file, struct folio *folio)
+{
+    struct page *page = &folio->page;
+#else
 static int vbsf_readpage(struct file *file, struct page *page)
 {
+#endif
     struct inode *inode = VBSF_GET_F_DENTRY(file)->d_inode;
     int           err;
 
@@ -3728,8 +3734,7 @@ static int vbsf_writepage(struct page *p
 /**
  * Called when writing thru the page cache (which we shouldn't be doing).
  */
-int vbsf_write_begin(struct file *file, struct address_space *mapping, loff_t pos,
-                     unsigned len, unsigned flags, struct page **pagep, void **fsdata)
+static inline void vbsf_write_begin_warn(loff_t pos, unsigned len, unsigned flags)
 {
     /** @todo r=bird: We shouldn't ever get here, should we?  Because we don't use
      *        the page cache for any writes AFAIK.  We could just as well use
@@ -3745,8 +3750,24 @@ int vbsf_write_begin(struct file *file,
         WARN_ON(1);
 # endif
     }
+}
+
+# if RTLNX_VER_MIN(5,19,0)
+int vbsf_write_begin(struct file *file, struct address_space *mapping, loff_t pos,
+                     unsigned len, struct page **pagep, void **fsdata)
+{
+    vbsf_write_begin_warn(pos, len, 0);
+    return simple_write_begin(file, mapping, pos, len, pagep, fsdata);
+}
+# else
+int vbsf_write_begin(struct file *file, struct address_space *mapping, loff_t pos,
+                     unsigned len, unsigned flags, struct page **pagep, void **fsdata)
+{
+    vbsf_write_begin_warn(pos, len, flags);
     return simple_write_begin(file, mapping, pos, len, flags, pagep, fsdata);
 }
+# endif
+
 #endif /* KERNEL_VERSION >= 2.6.24 */
 
 #if RTLNX_VER_MIN(5,14,0)
@@ -3820,7 +3841,11 @@ static int vbsf_direct_IO(int rw, struct
  * @todo the FsPerf touch/flush (mmap) test fails on 4.4.0 (ubuntu 16.04 lts).
  */
 struct address_space_operations vbsf_reg_aops = {
+#if RTLNX_VER_MIN(5,19,0)
+    .read_folio     = vbsf_read_folio,
+#else
     .readpage       = vbsf_readpage,
+#endif
     .writepage      = vbsf_writepage,
     /** @todo Need .writepages if we want msync performance...  */
 #if RTLNX_VER_MIN(5,18,0)
@@ -3842,4 +3867,3 @@ struct address_space_operations vbsf_reg
     .direct_IO      = vbsf_direct_IO,
 #endif
 };
-
--- a/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c
+++ b/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c
@@ -40,6 +40,7 @@
 #include <iprt/semaphore.h>
 #include <iprt/initterm.h>
 #include <iprt/process.h>
+#include <iprt/thread.h>
 #include <VBox/err.h>
 #include <iprt/mem.h>
 #include <VBox/log.h>
@@ -1457,11 +1458,37 @@ SUPR0DECL(uint32_t) SUPR0GetKernelFeatur
 SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
 {
     RT_NOREF(fCtxHook);
-#if RTLNX_VER_MIN(5,18,0)
+#if RTLNX_VER_MIN(4,19,0) /* Going back to 4.19.0 for better coverage, we
+                             probably only need 5.17.7+ in the end. */
+    /*
+     * HACK ALERT!
+     *
+     * We'd like to use the old __kernel_fpu_begin() API which was removed in
+     * early 2019, because we typically run with preemption enabled and have an
+     * preemption hook installed which will call kernel_fpu_end() in case we're
+     * scheduled out after getting in here.  The preemption hook is almost
+     * useless if we run with preemption disabled.
+     *
+     * For the case where the kernel does not have preemption hooks, we get here
+     * with preemption already disabled and one more count doesn't make any
+     * difference.
+     *
+     * So, after the kernel_fpu_begin() call we undo the implicit preempt_disable()
+     * call it does, so the preemption hook can do its work and the VBox user has
+     * a more responsive system.
+     *
+     * See @bugref{10209#c12} and onwards for more details.
+     */
+    Assert(fCtxHook || !RTThreadPreemptIsEnabled(NIL_RTTHREAD));
     kernel_fpu_begin();
-    /* if (fCtxHook) */
-        preempt_enable();  /* HACK ALERT! undo the implicit preempt_disable() in kernel_fpu_begin(). */
-    return true;
+# if 0 /* Always do it for now for better test coverage. */
+    if (fCtxHook)
+# endif
+        preempt_enable();
+    return false; /** @todo Not sure if we have license to use any extended state, or
+                   *        if we're limited to the SSE & x87 FPU. If it's the former,
+                   *        we should return @a true and the caller can skip
+                   *        saving+restoring the host state and save some time. */
 #else
     return false;
 #endif
@@ -1471,9 +1498,13 @@ SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxH
 SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
 {
     RT_NOREF(fCtxHook);
-#if RTLNX_VER_MIN(5,18,0)
-    /* if (fCtxHook) */
-        preempt_disable();  /* HACK ALERT! undo the implicit preempt_enable() in SUPR0FpuBegin(). */
+#if RTLNX_VER_MIN(4,19,0)
+    /* HACK ALERT! See SUPR0FpuBegin for an explanation of this. */
+    Assert(!RTThreadPreemptIsEnabled(NIL_RTTHREAD));
+# if 0 /* Always do it for now for better test coverage. */
+    if (fCtxHook)
+# endif
+        preempt_disable();
     kernel_fpu_end();
 #endif
 }
--- a/src/VBox/Runtime/r0drv/linux/the-linux-kernel.h
+++ b/src/VBox/Runtime/r0drv/linux/the-linux-kernel.h
@@ -184,6 +184,11 @@
 # include <asm/tlbflush.h>
 #endif
 
+/* for kernel_fpu_begin / kernel_fpu_end() */
+#if RTLNX_VER_MIN(4,2,0)
+# include <asm/fpu/api.h>
+#endif
+
 #if RTLNX_VER_MIN(3,7,0)
 # include <asm/smap.h>
 #else
