diff --git plotly/figure_factory/_candlestick.py plotly/figure_factory/_candlestick.py
index 925b4c1..c0847b3 100644
--- plotly/figure_factory/_candlestick.py
+++ plotly/figure_factory/_candlestick.py
@@ -211,11 +211,11 @@ def create_candlestick(open, high, low, close, dates=None, direction='both',
         utils.validate_equal_length(open, high, low, close)
     validate_ohlc(open, high, low, close, direction, **kwargs)
 
-    if direction is 'increasing':
+    if direction == 'increasing':
         candle_incr_data = make_increasing_candle(open, high, low, close,
                                                   dates, **kwargs)
         data = candle_incr_data
-    elif direction is 'decreasing':
+    elif direction == 'decreasing':
         candle_decr_data = make_decreasing_candle(open, high, low, close,
                                                   dates, **kwargs)
         data = candle_decr_data
diff --git plotly/figure_factory/_facet_grid.py plotly/figure_factory/_facet_grid.py
index 61af2b1..d0eb2bc 100644
--- plotly/figure_factory/_facet_grid.py
+++ plotly/figure_factory/_facet_grid.py
@@ -751,7 +751,7 @@ def create_facet_grid(df, x=None, y=None, facet_row=None, facet_col=None,
         x='wt',
         y='mpg',
         facet_col='cyl',
-        facet_col_labels={4: "$\\alpha$", 6: '$\\beta$', 8: '$\sqrt[y]{x}$'},
+        facet_col_labels={4: "$\\alpha$", 6: '$\\beta$', 8: '$\\sqrt[y]{x}$'},
     )
 
     py.iplot(fig, filename='facet_grid_mtcars_custom_labels')
diff --git plotly/figure_factory/_ohlc.py plotly/figure_factory/_ohlc.py
index b5e84cd..0c41430 100644
--- plotly/figure_factory/_ohlc.py
+++ plotly/figure_factory/_ohlc.py
@@ -264,11 +264,11 @@ def create_ohlc(open, high, low, close, dates=None, direction='both',
         utils.validate_equal_length(open, high, low, close)
     validate_ohlc(open, high, low, close, direction, **kwargs)
 
-    if direction is 'increasing':
+    if direction == 'increasing':
         ohlc_incr = make_increasing_ohlc(open, high, low, close, dates,
                                          **kwargs)
         data = [ohlc_incr]
-    elif direction is 'decreasing':
+    elif direction == 'decreasing':
         ohlc_decr = make_decreasing_ohlc(open, high, low, close, dates,
                                          **kwargs)
         data = [ohlc_decr]
diff --git plotly/matplotlylib/renderer.py plotly/matplotlylib/renderer.py
index 548ae74..9eb3fd2 100644
--- plotly/matplotlylib/renderer.py
+++ plotly/matplotlylib/renderer.py
@@ -428,7 +428,7 @@ class PlotlyRenderer(Renderer):
 
         """
         self.msg += "    Attempting to draw a path collection\n"
-        if props['offset_coordinates'] is 'data':
+        if props['offset_coordinates'] == 'data':
             markerstyle = mpltools.get_markerstyle_from_collection(props)
             scatter_props = {
                 'coordinates': 'data',
@@ -536,7 +536,7 @@ class PlotlyRenderer(Renderer):
             self.draw_title(**props)
         else:  # just a regular text annotation...
             self.msg += "      Text object is a normal annotation\n"
-            if props['coordinates'] is not 'data':
+            if props['coordinates'] != 'data':
                 self.msg += "        Text object isn't linked to 'data' " \
                             "coordinates\n"
                 x_px, y_px = props['mplobj'].get_transform().transform(
diff --git plotly/tools.py plotly/tools.py
index ba6aae7..db8eaa2 100644
--- plotly/tools.py
+++ plotly/tools.py
@@ -319,7 +319,7 @@ def get_embed(file_owner_or_url, file_id=None, width="100%", height=525):
         raise exceptions.PlotlyError(
             "The 'file_id' argument must be a non-negative number."
         )
-    if share_key is '':
+    if share_key == '':
         s = ("<iframe id=\"igraph\" scrolling=\"no\" style=\"border:none;\" "
              "seamless=\"seamless\" "
              "src=\"{plotly_rest_url}/"
diff --git plotly/utils.py plotly/utils.py
index 7d62301..f600402 100644
--- plotly/utils.py
+++ plotly/utils.py
@@ -84,8 +84,8 @@ def ensure_dir_exists(directory):
 def iso_to_plotly_time_string(iso_string):
     """Remove timezone info and replace 'T' delimeter with ' ' (ws)."""
     # make sure we don't send timezone info to plotly
-    if (iso_string.split('-')[:3] is '00:00') or\
-            (iso_string.split('+')[0] is '00:00'):
+    if (iso_string.split('-')[:3] == '00:00') or\
+            (iso_string.split('+')[0] == '00:00'):
         raise Exception("Plotly won't accept timestrings with timezone info.\n"
                         "All timestrings are assumed to be in UTC.")
 
