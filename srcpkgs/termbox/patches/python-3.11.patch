Index: termbox-1.1.2/.waf3/waflib/ConfigSet.py
===================================================================
--- termbox-1.1.2.orig/.waf3/waflib/ConfigSet.py
+++ termbox-1.1.2/.waf3/waflib/ConfigSet.py
@@ -134,7 +134,7 @@ class ConfigSet(object):
 		Utils.writef(filename,''.join(buf))
 	def load(self,filename):
 		tbl=self.table
-		code=Utils.readf(filename,m='rU')
+		code=Utils.readf(filename,m='r')
 		for m in re_imp.finditer(code):
 			g=m.group
 			tbl[g(2)]=eval(g(3))
Index: termbox-1.1.2/.waf3/waflib/Context.py
===================================================================
--- termbox-1.1.2.orig/.waf3/waflib/Context.py
+++ termbox-1.1.2/.waf3/waflib/Context.py
@@ -113,7 +113,7 @@ class Context(ctx):
 				cache[node]=True
 				self.pre_recurse(node)
 				try:
-					function_code=node.read('rU')
+					function_code=node.read('r')
 					exec(compile(function_code,node.abspath(),'exec'),self.exec_dict)
 				finally:
 					self.post_recurse(node)
@@ -321,7 +321,7 @@ def load_module(path):
 		pass
 	module=imp.new_module(WSCRIPT_FILE)
 	try:
-		code=Utils.readf(path,m='rU')
+		code=Utils.readf(path,m='r')
 	except(IOError,OSError):
 		raise Errors.WafError('Could not read the file %r'%path)
 	module_dir=os.path.dirname(path)
Index: termbox-1.1.2/.waf3/waflib/Node.py
===================================================================
--- termbox-1.1.2.orig/.waf3/waflib/Node.py
+++ termbox-1.1.2/.waf3/waflib/Node.py
@@ -282,7 +282,6 @@ class Node(object):
 					if maxdepth:
 						for k in node.ant_iter(accept=accept,maxdepth=maxdepth-1,pats=npats,dir=dir,src=src,remove=remove):
 							yield k
-		raise StopIteration
 	def ant_glob(self,*k,**kw):
 		src=kw.get('src',True)
 		dir=kw.get('dir',False)
