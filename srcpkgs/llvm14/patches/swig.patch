From b6e705f628d6b4f29c45ec3f7c19b69d4ce6a3b0 Mon Sep 17 00:00:00 2001
From: Jitka Plesnikova <jplesnik@redhat.com>
Date: Wed, 21 Sep 2022 11:39:52 +0200
Subject: [PATCH] Fixes for swig-4.1.0 macro definition correction

For swig-4.1.0 change:

    #2193 -DFOO on the SWIG command line now sets FOO to 1 for
    consistency with C/C++ compiler preprocessors.  Previously
    SWIG set FOO to an empty value.

    Existing invocations of SWIG with `-DFOO` where the empty value
    matters can be updated to `-DFOO=` which should work with both
    old and new releases of SWIG.

    *** POTENTIAL INCOMPATIBILITY ***

See https://github.com/swig/swig/issues/2193

This patch is backwards compatible with older versions of SWIG.
---
 lldb/bindings/CMakeLists.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/lldb/bindings/CMakeLists.txt b/lldb/bindings/CMakeLists.txt
index c8aa0bcf9681..aa4637101ad0 100644
--- a/lldb/bindings/CMakeLists.txt
+++ b/lldb/bindings/CMakeLists.txt
@@ -26,8 +26,8 @@ set(SWIG_COMMON_FLAGS
   -features autodoc
   -I${LLDB_SOURCE_DIR}/include
   -I${CMAKE_CURRENT_SOURCE_DIR}
-  -D__STDC_LIMIT_MACROS
-  -D__STDC_CONSTANT_MACROS
+  -D__STDC_LIMIT_MACROS=
+  -D__STDC_CONSTANT_MACROS=
   ${DARWIN_EXTRAS}
 )
 
-- 
2.37.3

From ae33ebc5bbb005281778d44fedcb817c9090ebc4 Mon Sep 17 00:00:00 2001
From: Jitka Plesnikova <jplesnik@redhat.com>
Date: Wed, 21 Sep 2022 11:42:46 +0200
Subject: [PATCH] Fix 'error: non-const lvalue...' caused by SWIG 4.1.0

Fix the failure caused by change in SwigValueWraper for C++11 and later
for improved move semantics in SWIG commit.

https://github.com/swig/swig/commit/d1055f4b3d51cb8060893f8036846ac743302dab
---
 lldb/bindings/python/python-typemaps.swig | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lldb/bindings/python/python-typemaps.swig b/lldb/bindings/python/python-typemaps.swig
index 203be803d2eb..11f68d59ae7b 100644
--- a/lldb/bindings/python/python-typemaps.swig
+++ b/lldb/bindings/python/python-typemaps.swig
@@ -435,7 +435,7 @@ template <> bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {

 %typemap(out) lldb::FileSP {
   $result = nullptr;
-  lldb::FileSP &sp = $1;
+  const lldb::FileSP &sp = $1;
   if (sp) {
     PythonFile pyfile = unwrapOrSetPythonException(PythonFile::FromFile(*sp));
     if (!pyfile.IsValid())
--
2.37.3


