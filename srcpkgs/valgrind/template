# Template file for 'valgrind'
pkgname=valgrind
version=3.22.0
revision=2
build_style=gnu-configure
configure_args="--enable-tls --without-mpicc --enable-lto=yes"
hostmakedepends="automake perl pkg-config"
makedepends="libgomp-devel"
depends="perl"
short_desc="Tool for finding memory management bugs in programs"
maintainer="Duncaen <duncaen@voidlinux.org>"
license="GPL-2.0-or-later"
homepage="http://valgrind.org/"
changelog="https://valgrind.org/docs/manual/dist.news.html"
distfiles="https://sourceware.org/pub/valgrind/valgrind-${version}.tar.bz2"
checksum=c811db5add2c5f729944caf47c4e7a65dcaabb9461e472b578765dd7bf6d2d4c
# https://valgrind.org/docs/manual/dist.readme-packagers.html
nostrip=yes

CFLAGS="-fno-stack-protector"
CXXFLAGS="-fno-stack-protector"

lib32files="/usr/lib/valgrind/*-x86-linux
 /usr/lib/valgrind/default.supp"
lib32symlinks="
 valgrind/cachegrind-x86-linux
 valgrind/callgrind-x86-linux
 valgrind/drd-x86-linux
 valgrind/exp-bbv-x86-linux
 valgrind/exp-dhat-x86-linux
 valgrind/exp-sgcheck-x86-linux
 valgrind/getoff-x86-linux
 valgrind/helgrind-x86-linux
 valgrind/lackey-x86-linux
 valgrind/massif-x86-linux
 valgrind/memcheck-x86-linux
 valgrind/none-x86-linux"

case $XBPS_TARGET_MACHINE in
	armv6*) broken="Unsupported architecture";;
esac

if [ "$XBPS_TARGET_MACHINE" = "armv7l" ]; then
	configure_args+=" ac_cv_host=armv7l-unknown-linux-gnueabihf"
fi

valgrind-devel_package() {
	depends="valgrind>=${version}_${revision}"
	short_desc+=" - development files"
	pkg_install() {
		vmove usr/include
		vmove usr/lib/pkgconfig
		vmove "usr/lib/valgrind/*.a"
		vmove usr/share/doc
	}
}
