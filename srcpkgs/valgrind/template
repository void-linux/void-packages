# Template file for 'valgrind'
pkgname=valgrind
version=3.16.1
revision=1
build_style=gnu-configure
configure_args="--enable-tls --without-mpicc --enable-lto=yes"
hostmakedepends="automake perl pkg-config"
makedepends="libgomp-devel"
depends="perl"
short_desc="Tool for finding memory management bugs in programs"
maintainer="Orphaned <orphan@voidlinux.org>"
license="GPL-2.0-or-later"
homepage="http://valgrind.org/"
distfiles="https://sourceware.org/pub/${pkgname}/${pkgname}-${version}.tar.bz2"
checksum=c91f3a2f7b02db0f3bc99479861656154d241d2fdb265614ba918cc6720a33ca
patch_args="-Np1"

CFLAGS="-fno-stack-protector"
CXXFLAGS="-fno-stack-protector"

lib32files="/usr/lib/valgrind/*-x86-linux
 /usr/lib/valgrind/default.supp"
lib32symlinks="
 valgrind/cachegrind-x86-linux
 valgrind/callgrind-x86-linux
 valgrind/drd-x86-linux
 valgrind/exp-bbv-x86-linux
 valgrind/exp-dhat-x86-linux
 valgrind/exp-sgcheck-x86-linux
 valgrind/getoff-x86-linux
 valgrind/helgrind-x86-linux
 valgrind/lackey-x86-linux
 valgrind/massif-x86-linux
 valgrind/memcheck-x86-linux
 valgrind/none-x86-linux"

case $XBPS_TARGET_MACHINE in
	armv6*) broken="Unsupported architecture";;
esac

if [ "$XBPS_TARGET_MACHINE" = "armv7l" ]; then
	configure_args+=" ac_cv_host=armv7l-unknown-linux-gnueabihf"
fi

pre_configure() {
	autoreconf -fi
}

valgrind-devel_package() {
	depends="valgrind>=${version}_${revision}"
	short_desc+=" - development files"
	pkg_install() {
		vmove usr/include
		vmove usr/lib/pkgconfig
		vmove "usr/lib/valgrind/*.a"
		vmove usr/share/doc
	}
}
