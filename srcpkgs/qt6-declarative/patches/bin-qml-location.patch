--- a/tests/auto/qml/debugger/qqmldebugtranslationclient/tst_qqmldebugtranslationclient.cpp
+++ b/tests/auto/qml/debugger/qqmldebugtranslationclient/tst_qqmldebugtranslationclient.cpp
@@ -94,7 +94,11 @@ private:
     {
         m_currentOutputLine = 0;
 
+#ifdef QT_DECLARATIVE_BIN_PATH
+        auto executable = QT_DECLARATIVE_BIN_PATH "/qml";
+#else
         auto executable = QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qml";
+#endif
         auto services = QQmlDebugTranslationServiceImpl::s_key;
         auto extraArgs = testFile(QMLFILE);
         auto block = true;
--- a/tests/auto/qml/debugger/qqmlinspector/tst_qqmlinspector.cpp
+++ b/tests/auto/qml/debugger/qqmlinspector/tst_qqmlinspector.cpp
@@ -72,7 +72,12 @@ tst_QQmlInspector::tst_QQmlInspector()
 QQmlDebugTest::ConnectResult tst_QQmlInspector::startQmlProcess(const QString &qmlFile,
                                                                 bool restrictServices)
 {
-    return QQmlDebugTest::connectTo(QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qml",
+#ifdef QT_DECLARATIVE_BIN_PATH
+    auto executable = QT_DECLARATIVE_BIN_PATH "/qml";
+#else
+    auto executable = QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qml";
+#endif
+    return QQmlDebugTest::connectTo(executable,
                                   restrictServices ? QStringLiteral("QmlInspector") : QString(),
                                   testFile(qmlFile), true);
 }
--- a/tests/auto/qml/debugger/qqmlprofilerservice/tst_qqmlprofilerservice.cpp
+++ b/tests/auto/qml/debugger/qqmlprofilerservice/tst_qqmlprofilerservice.cpp
@@ -204,10 +204,16 @@ private:
         CheckType = CheckMessageType | CheckDetailType | CheckLine | CheckColumn | CheckFileEndsWith
     };
 
+#ifdef QT_DECLARATIVE_BIN_PATH
+#define QMLSCENE_PATH QT_DECLARATIVE_BIN_PATH "/qml"
+#else
+#define QMLSCENE_PATH QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qmlscene"
+#endif
+
     ConnectResult connectTo(bool block, const QString &file, bool recordFromStart = true,
                           uint flushInterval = 0, bool restrictServices = true,
                           const QString &executable
-            = QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qmlscene");
+            = QMLSCENE_PATH);
     void checkProcessTerminated();
     void checkTraceReceived();
     void checkJsHeap();
--- a/tests/auto/qml/debugger/qqmldebuggingenabler/qqmldebuggingenabler/tst_qqmldebuggingenabler.cpp
+++ b/tests/auto/qml/debugger/qqmldebuggingenabler/qqmldebuggingenabler/tst_qqmldebuggingenabler.cpp
@@ -110,8 +110,13 @@ void tst_QQmlDebuggingEnabler::qmlscene(
     QFETCH(bool, blockMode);
     QFETCH(QStringList, services);
 
-    m_process = new QQmlDebugProcess(
-                QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qmlscene", this);
+#ifdef QT_DECLARATIVE_BIN_PATH
+    auto executable = QT_DECLARATIVE_BIN_PATH "/qmlscene";
+#else
+    auto executable = QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qmlscene";
+#endif
+
+    m_process = new QQmlDebugProcess(executable, this);
     m_process->setMaximumBindErrors(1);
     m_process->start(QStringList()
                      << QString::fromLatin1("-qmljsdebugger=connector:%1%2%3%4")
--- a/tests/auto/qml/debugger/qqmlenginecontrol/tst_qqmlenginecontrol.cpp
+++ b/tests/auto/qml/debugger/qqmlenginecontrol/tst_qqmlenginecontrol.cpp
@@ -91,7 +91,12 @@ tst_QQmlEngineControl::tst_QQmlEngineCon
 QQmlDebugTest::ConnectResult tst_QQmlEngineControl::connectTo(const QString &file,
                                                             bool restrictServices)
 {
-    return QQmlDebugTest::connectTo(QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qmlscene",
+#ifdef QT_DECLARATIVE_BIN_PATH
+    auto executable = QT_DECLARATIVE_BIN_PATH "/qmlscene";
+#else
+    auto executable = QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qmlscene";
+#endif
+    return QQmlDebugTest::connectTo(executable,
                                   restrictServices ? QStringLiteral("EngineControl") : QString(),
                                   testFile(file), true);
 }
--- a/tests/auto/qml/debugger/qqmlenginedebuginspectorintegrationtest/tst_qqmlenginedebuginspectorintegration.cpp
+++ b/tests/auto/qml/debugger/qqmlenginedebuginspectorintegrationtest/tst_qqmlenginedebuginspectorintegration.cpp
@@ -96,7 +96,11 @@ tst_QQmlEngineDebugInspectorIntegration:
 QQmlDebugTest::ConnectResult tst_QQmlEngineDebugInspectorIntegration::init(bool restrictServices)
 {
     return QQmlDebugTest::connectTo(
+#ifdef QT_DECLARATIVE_BIN_PATH
+                QT_DECLARATIVE_BIN_PATH "/qml",
+#else
                 QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qml",
+#endif
                 restrictServices ? QStringLiteral("QmlDebugger,QmlInspector") : QString(),
                 testFile("qtquick2.qml"), true);
 }
--- a/tests/auto/qml/debugger/qqmlpreview/tst_qqmlpreview.cpp
+++ b/tests/auto/qml/debugger/qqmlpreview/tst_qqmlpreview.cpp
@@ -81,7 +81,12 @@ tst_QQmlPreview::tst_QQmlPreview()
 
 QQmlDebugTest::ConnectResult tst_QQmlPreview::startQmlProcess(const QString &qmlFile)
 {
-    return QQmlDebugTest::connectTo(QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qml",
+#ifdef QT_DECLARATIVE_BIN_PATH
+    auto executable = QT_DECLARATIVE_BIN_PATH "/qml";
+#else
+    auto executable = QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qml";
+#endif
+    return QQmlDebugTest::connectTo(executable,
                                   QStringLiteral("QmlPreview"), testFile(qmlFile), true);
 }
 
--- a/tests/auto/qml/qmlformat/tst_qmlformat.cpp
+++ b/tests/auto/qml/qmlformat/tst_qmlformat.cpp
@@ -88,7 +88,11 @@ TestQmlformat::TestQmlformat()
 void TestQmlformat::initTestCase()
 {
     QQmlDataTest::initTestCase();
+#ifdef QT_DECLARATIVE_BIN_PATH
+    m_qmlformatPath = QLatin1String(QT_DECLARATIVE_BIN_PATH "/qmlformat");
+#else
     m_qmlformatPath = QLibraryInfo::path(QLibraryInfo::BinariesPath) + QLatin1String("/qmlformat");
+#endif
 #ifdef Q_OS_WIN
     m_qmlformatPath += QLatin1String(".exe");
 #endif
--- a/tests/auto/qml/qmlimportscanner/tst_qmlimportscanner.cpp
+++ b/tests/auto/qml/qmlimportscanner/tst_qmlimportscanner.cpp
@@ -63,8 +63,12 @@ TestQmlimportscanner::TestQmlimportscann
 void TestQmlimportscanner::initTestCase()
 {
     QQmlDataTest::initTestCase();
+#ifdef QT_DECLARATIVE_LIBEXEC_PATH
+    m_qmlimportscannerPath = QLatin1String(QT_DECLARATIVE_LIBEXEC_PATH "/qmlimportscanner");
+#else
     m_qmlimportscannerPath = QLibraryInfo::path(QLibraryInfo::LibraryExecutablesPath)
             + QLatin1String("/qmlimportscanner");
+#endif
 #ifdef Q_OS_WIN
     m_qmlimportscannerPath += QLatin1String(".exe");
 #endif
--- a/tests/auto/qml/qmllint/tst_qmllint.cpp
+++ b/tests/auto/qml/qmllint/tst_qmllint.cpp
@@ -136,11 +136,17 @@ TestQmllint::TestQmllint()
 void TestQmllint::initTestCase()
 {
     QQmlDataTest::initTestCase();
+#ifdef QT_DECLARATIVE_BIN_PATH
+    m_qmllintPath = QLatin1String(QT_DECLARATIVE_BIN_PATH "/qmllint");
+    m_qmljsrootgenPath = QLatin1String(QT_DECLARATIVE_BIN_PATH "/qmljsrootgen");
+    m_qmltyperegistrarPath = QLatin1String(QT_DECLARATIVE_BIN_PATH "/qmltyperegistrar");
+#else
     m_qmllintPath = QLibraryInfo::path(QLibraryInfo::BinariesPath) + QLatin1String("/qmllint");
     m_qmljsrootgenPath = QLibraryInfo::path(QLibraryInfo::LibraryExecutablesPath)
             + QLatin1String("/qmljsrootgen");
     m_qmltyperegistrarPath = QLibraryInfo::path(QLibraryInfo::LibraryExecutablesPath)
             + QLatin1String("/qmltyperegistrar");
+#endif
 #ifdef Q_OS_WIN
     m_qmllintPath += QLatin1String(".exe");
     m_qmljsrootgenPath += QLatin1String(".exe");
--- a/tests/auto/qml/debugger/qdebugmessageservice/tst_qdebugmessageservice.cpp
+++ b/tests/auto/qml/debugger/qdebugmessageservice/tst_qdebugmessageservice.cpp
@@ -143,7 +143,12 @@ tst_QDebugMessageService::tst_QDebugMess
 
 void tst_QDebugMessageService::retrieveDebugOutput()
 {
-    QCOMPARE(QQmlDebugTest::connectTo(QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qml",
+#ifdef QT_DECLARATIVE_BIN_PATH
+    auto executable = QT_DECLARATIVE_BIN_PATH "/qml";
+#else
+    auto executable = QLibraryInfo::path(QLibraryInfo::BinariesPath) + "/qml";
+#endif
+    QCOMPARE(QQmlDebugTest::connectTo(executable,
                                     QString(), testFile(QMLFILE), true), ConnectSuccess);
 
     QTRY_VERIFY(m_client->logBuffer.size() >= 2);
--- a/tests/auto/qml/qmlplugindump/tst_qmlplugindump.cpp
+++ b/tests/auto/qml/qmlplugindump/tst_qmlplugindump.cpp
@@ -62,7 +62,11 @@ tst_qmlplugindump::tst_qmlplugindump()
 void tst_qmlplugindump::initTestCase()
 {
     QQmlDataTest::initTestCase();
+#ifdef QT_DECLARATIVE_BIN_PATH
+    qmlplugindumpPath = QT_DECLARATIVE_BIN_PATH;
+#else
     qmlplugindumpPath = QLibraryInfo::path(QLibraryInfo::BinariesPath);
+#endif
 
 #if defined(Q_OS_WIN)
     qmlplugindumpPath += QLatin1String("/qmlplugindump.exe");
