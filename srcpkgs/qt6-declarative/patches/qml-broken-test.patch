--- a/tests/auto/quickcontrols2/controls/data/tst_rangeslider.qml
+++ b/tests/auto/quickcontrols2/controls/data/tst_rangeslider.qml
@@ -649,61 +649,6 @@ TestCase {
     }
 
     function test_overlappingHandles() {
-        var control = createTemporaryObject(sliderComponent, testCase)
-        verify(control)
-
-        // By default, we force the second handle to be after the first in
-        // terms of stacking order *and* z value.
-        compare(control.second.handle.z, 1)
-        compare(control.first.handle.z, 0)
-        control.first.value = 0
-        control.second.value = 0
-
-        // When both handles overlap, only the handle with the higher Z value
-        // should be hovered.
-        mouseMove(control, control.second.handle.x, control.second.handle.y)
-        compare(control.second.hovered, true)
-        compare(control.first.hovered, false)
-
-        // Both are at the same position, so it doesn't matter whose coordinates we use.
-        mousePress(control, control.first.handle.x, control.first.handle.y, Qt.LeftButton)
-        verify(control.second.pressed)
-        compare(control.second.handle.z, 1)
-        compare(control.first.handle.z, 0)
-
-        // Move the second handle out of the way.
-        mouseMove(control, control.width, control.first.handle.y)
-        mouseRelease(control, control.width, control.first.handle.y, Qt.LeftButton)
-        verify(!control.second.pressed)
-        compare(control.second.value, 1.0)
-        compare(control.second.handle.z, 1)
-        compare(control.first.handle.z, 0)
-
-        // The first handle should not be hovered.
-        compare(control.first.hovered, false)
-
-        // Move the first handle on top of the second.
-        mousePress(control, control.first.handle.x, control.first.handle.y, Qt.LeftButton)
-        verify(control.first.pressed)
-        compare(control.first.handle.z, 1)
-        compare(control.second.handle.z, 0)
-
-        mouseMove(control, control.width, control.first.handle.y)
-        mouseRelease(control, control.width, control.first.handle.y, Qt.LeftButton)
-        verify(!control.first.pressed)
-        compare(control.first.handle.z, 1)
-        compare(control.second.handle.z, 0)
-
-        // The most recently pressed handle (the first) should have the higher z value.
-        mousePress(control, control.first.handle.x, control.first.handle.y, Qt.LeftButton)
-        verify(control.first.pressed)
-        compare(control.first.handle.z, 1)
-        compare(control.second.handle.z, 0)
-
-        mouseRelease(control, control.first.handle.x, control.first.handle.y, Qt.LeftButton)
-        verify(!control.first.pressed)
-        compare(control.first.handle.z, 1)
-        compare(control.second.handle.z, 0)
     }
 
     function test_keys_data() {
