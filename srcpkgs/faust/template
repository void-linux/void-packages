# Template file for 'faust'
pkgname=faust
version=2.20.2
revision=1
build_style=gnu-makefile
hostmakedepends="cmake pkg-config libmicrohttpd-devel llvm llvm-libunwind-devel"
short_desc="Functional Programming Language for Real Time Signal Processing"
maintainer="mag <mag-one@autistici.org>"
license="GPL-2.0-or-later"
homepage="http://www.faust.grame.fr"
distfiles=https://github.com/grame-cncm/faust/releases/download/${version}/${pkgname}-${version}.tar.gz
checksum="c32588ee60d0f7ca25034d3d5436def6b35495f4d3beb3b02208d48684bcfbe9"
nostrip_files="libsndfile.so "
noshlibprovides="libsndfile.so"

case $XBPS_MACHINE in
	*-musl) hostmakedepends+=" libexecinfo-devel";;
esac

# INFO:
#
# - Faust puts its own libraries in /usr/share/faust
# - In the same dir there's the Android app template
#   used by the 'faust2android' script.
# - The Android app template contains 'libsndfile.so'
#   for Android that causes the installation to fail:
#
# => faust-2.15.11_1: running post-install hook: 11-pkglint-elf-in-usrshare ...
# => ERROR: faust-2.15.11_1: ELF files found in /usr/share:
# => ERROR:    /usr/share/faust/android/app/lib/libsndfile/lib/armeabi-v7a/libsndfile.so
# => ERROR:    /usr/share/faust/android/app/lib/libsndfile/lib/arm64-v8a/libsndfile.so
# => ERROR: faust-2.15.11_1: cannot continue with installation!
#

# FIRST (LAZY) WORKAROUND:
#
#post_install() {
# rm -rf $PKGDESTDIR/usr/share/faust/android/
#}

# BETTER (?) WORKAROUND:
#
skiprdeps="/usr/lib/faust/android/app/lib/libsndfile/lib/armeabi-v7a/libsndfile.so /usr/lib/faust/android/app/lib/libsndfile/lib/arm64-v8a/libsndfile.so"

post_install() {
	mv $PKGDESTDIR/usr/share/faust $PKGDESTDIR/usr/lib
	ln -s /usr/lib/faust $PKGDESTDIR/usr/share/faust

	# add Faust Examples in package
	cp -R ${wrksrc}/examples $PKGDESTDIR/usr/lib/faust
}
