diff --git a/clutter/clutter/evdev/clutter-seat-evdev.c b/clutter/clutter/evdev/clutter-seat-evdev.c
index a453b1150..9bfb75af3 100644
--- ./clutter/clutter/evdev/clutter-seat-evdev.c
+++ ./clutter/clutter/evdev/clutter-seat-evdev.c
@@ -142,7 +142,7 @@ clutter_seat_evdev_release_touch_state (ClutterSeatEvdev  *seat,
                                         ClutterTouchState *touch_state)
 {
   g_clear_pointer (&seat->touch_states[touch_state->seat_slot],
-                   (GDestroyNotify) clutter_touch_state_free);
+                   clutter_touch_state_free);
 }
 
 ClutterSeatEvdev *
diff --git a/src/backends/meta-screen-cast-stream-src.c b/src/backends/meta-screen-cast-stream-src.c
index 457c0589e..ba7de3d84 100644
--- ./src/backends/meta-screen-cast-stream-src.c
+++ ./src/backends/meta-screen-cast-stream-src.c
@@ -578,9 +578,9 @@ meta_screen_cast_stream_src_finalize (GObject *object)
   if (meta_screen_cast_stream_src_is_enabled (src))
     meta_screen_cast_stream_src_disable (src);
 
-  g_clear_pointer (&priv->pipewire_stream, (GDestroyNotify) pw_stream_destroy);
-  g_clear_pointer (&priv->pipewire_remote, (GDestroyNotify) pw_remote_destroy);
-  g_clear_pointer (&priv->pipewire_core, (GDestroyNotify) pw_core_destroy);
+  g_clear_pointer (&priv->pipewire_stream,  pw_stream_destroy);
+  g_clear_pointer (&priv->pipewire_remote,  pw_remote_destroy);
+  g_clear_pointer (&priv->pipewire_core,  pw_core_destroy);
   g_source_destroy (&priv->pipewire_source->base);
 
   G_OBJECT_CLASS (meta_screen_cast_stream_src_parent_class)->finalize (object);
diff --git a/src/backends/native/meta-cursor-renderer-native.c b/src/backends/native/meta-cursor-renderer-native.c
index c7326af42..605b80c12 100644
--- ./src/backends/native/meta-cursor-renderer-native.c
+++ ./src/backends/native/meta-cursor-renderer-native.c
@@ -679,7 +679,7 @@ cursor_gpu_state_free (MetaCursorNativeGpuState *cursor_gpu_state)
   int i;
 
   for (i = 0; i < HW_CURSOR_BUFFER_COUNT; i++)
-    g_clear_pointer (&cursor_gpu_state->bos[i], (GDestroyNotify) gbm_bo_destroy);
+    g_clear_pointer (&cursor_gpu_state->bos[i],  gbm_bo_destroy);
   g_free (cursor_gpu_state);
 }
 
@@ -823,7 +823,7 @@ invalidate_pending_cursor_sprite_gbm_bo (MetaCursorSprite *cursor_sprite,
 
   pending_bo = get_pending_cursor_sprite_gbm_bo_index (cursor_gpu_state);
   g_clear_pointer (&cursor_gpu_state->bos[pending_bo],
-                   (GDestroyNotify) gbm_bo_destroy);
+                   gbm_bo_destroy);
   cursor_gpu_state->pending_bo_state = META_CURSOR_GBM_BO_STATE_INVALIDATED;
 }
 
diff --git a/src/compositor/meta-background-actor.c b/src/compositor/meta-background-actor.c
index 197a62c0f..de0efb002 100644
--- ./src/compositor/meta-background-actor.c
+++ ./src/compositor/meta-background-actor.c
@@ -183,7 +183,7 @@ set_clip_region (MetaBackgroundActor *self,
 {
   MetaBackgroundActorPrivate *priv = self->priv;
 
-  g_clear_pointer (&priv->clip_region, (GDestroyNotify) cairo_region_destroy);
+  g_clear_pointer (&priv->clip_region,  cairo_region_destroy);
   if (clip_region)
     priv->clip_region = cairo_region_copy (clip_region);
 }
diff --git a/src/compositor/meta-shaped-texture.c b/src/compositor/meta-shaped-texture.c
index 98346c6ae..e0f8467be 100644
--- ./src/compositor/meta-shaped-texture.c
+++ ./src/compositor/meta-shaped-texture.c
@@ -142,7 +142,7 @@ set_unobscured_region (MetaShapedTexture *self,
 {
   MetaShapedTexturePrivate *priv = self->priv;
 
-  g_clear_pointer (&priv->unobscured_region, (GDestroyNotify) cairo_region_destroy);
+  g_clear_pointer (&priv->unobscured_region,  cairo_region_destroy);
   if (unobscured_region)
     {
       guint width, height;
@@ -170,7 +170,7 @@ set_clip_region (MetaShapedTexture *self,
 {
   MetaShapedTexturePrivate *priv = self->priv;
 
-  g_clear_pointer (&priv->clip_region, (GDestroyNotify) cairo_region_destroy);
+  g_clear_pointer (&priv->clip_region,  cairo_region_destroy);
   if (clip_region)
     priv->clip_region = cairo_region_copy (clip_region);
 }
diff --git a/src/wayland/meta-wayland-touch.c b/src/wayland/meta-wayland-touch.c
index 55b772588..20088257c 100644
--- ./src/wayland/meta-wayland-touch.c
+++ ./src/wayland/meta-wayland-touch.c
@@ -549,8 +549,8 @@ meta_wayland_touch_disable (MetaWaylandTouch *touch)
 
   meta_wayland_touch_cancel (touch);
 
-  g_clear_pointer (&touch->touch_surfaces, (GDestroyNotify) g_hash_table_unref);
-  g_clear_pointer (&touch->touches, (GDestroyNotify) g_hash_table_unref);
+  g_clear_pointer (&touch->touch_surfaces,  g_hash_table_unref);
+  g_clear_pointer (&touch->touches,  g_hash_table_unref);
 }
 
 void
diff --git a/src/wayland/meta-xwayland-selection.c b/src/wayland/meta-xwayland-selection.c
index f629a1302..470c7a3eb 100644
--- ./src/wayland/meta-xwayland-selection.c
+++ ./src/wayland/meta-xwayland-selection.c
@@ -484,7 +484,7 @@ x11_selection_data_finish (MetaSelectionBridge *selection,
     x11_selection_data_send_finished (selection, success);
 
   g_clear_pointer (&selection->x11_selection,
-                   (GDestroyNotify) x11_selection_data_free);
+                   x11_selection_data_free);
 }
 
 static void
@@ -706,7 +706,7 @@ wayland_data_read_cb (GObject      *object,
         {
           reply_selection_request (&data->request_event, FALSE);
           g_clear_pointer (&selection->wayland_selection,
-                           (GDestroyNotify) wayland_selection_data_free);
+                           wayland_selection_data_free);
         }
 
       return;
@@ -752,7 +752,7 @@ wayland_data_read_cb (GObject      *object,
         }
 
       g_clear_pointer (&selection->wayland_selection,
-                       (GDestroyNotify) wayland_selection_data_free);
+                       wayland_selection_data_free);
     }
 }
 
@@ -867,7 +867,7 @@ meta_x11_source_cancel (MetaWaylandDataSource *source)
 
   x11_selection_data_send_finished (selection, FALSE);
   g_clear_pointer (&selection->x11_selection,
-                   (GDestroyNotify) x11_selection_data_free);
+                   x11_selection_data_free);
 }
 
 static void
@@ -1155,7 +1155,7 @@ meta_xwayland_selection_handle_selection_notify (MetaWaylandCompositor *composit
   if (event->property == None)
     {
       g_clear_pointer (&selection->x11_selection,
-                       (GDestroyNotify) x11_selection_data_free);
+                       x11_selection_data_free);
       return FALSE;
     }
 
@@ -1293,7 +1293,7 @@ meta_xwayland_selection_handle_selection_request (MetaWaylandCompositor *composi
     return FALSE;
 
   g_clear_pointer (&selection->wayland_selection,
-                   (GDestroyNotify) wayland_selection_data_free);
+                   wayland_selection_data_free);
 
   if (event->target == gdk_x11_get_xatom_by_name ("TARGETS"))
     {
@@ -1608,7 +1608,7 @@ meta_xwayland_selection_handle_xfixes_selection_notify (MetaWaylandCompositor *c
             }
 
           g_clear_pointer (&selection->x11_selection,
-                           (GDestroyNotify) x11_selection_data_free);
+                           x11_selection_data_free);
 
           XConvertSelection (xdisplay,
                              event->selection,
@@ -1747,9 +1747,9 @@ shutdown_selection_bridge (MetaSelectionBridge *selection)
   XDestroyWindow (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
                   selection->window);
   g_clear_pointer (&selection->wayland_selection,
-                   (GDestroyNotify) wayland_selection_data_free);
+                   wayland_selection_data_free);
   g_clear_pointer (&selection->x11_selection,
-                   (GDestroyNotify) x11_selection_data_free);
+                   x11_selection_data_free);
 }
 
 void
