# Template file for 'element-desktop'
pkgname=element-desktop
version=1.11.106
revision=1
_electronver=35
create_wrksrc=yes
build_helper="rust"
conf_files="/etc/element-desktop/config.json"
hostmakedepends="git yarn nodejs rust cargo python3 curl
 sqlcipher-devel libnotify-devel pkg-config electron-tasje"
makedepends="libsecret-devel electron${_electronver}-devel"
depends="c-ares http-parser libevent
 libxslt minizip nss snappy sqlcipher electron${_electronver}"
short_desc="Glossy Matrix collaboration client, desktop version"
maintainer="Orphaned <orphan@voidlinux.org>"
license="Apache-2.0"
homepage="https://element.io"
changelog="https://raw.githubusercontent.com/vector-im/element-desktop/develop/CHANGELOG.md"
distfiles="https://github.com/vector-im/element-desktop/archive/v${version}.tar.gz>element-desktop-v${version}.tar.gz
 https://github.com/vector-im/element-web/archive/v${version}.tar.gz>element-web-v${version}.tar.gz"
checksum="c6598ff1736dc8cc0e48141420ce9a78c1354d773e477d3f803859460ac27f3f
 8c92be4ceac34c5e476eb7a3975920d7c65b03177e70ef1d4aa79108b9ec147e"

export USE_SYSTEM_APP_BUILDER=true

post_extract() {
	mv "element-desktop-${version}" element-desktop
	mv "element-web-${version}" element-web
}

post_patch() {
	# Disable auto-updating
	vsed -e 's|"https://packages.element.io/desktop/update/"|null|' -i element-desktop/element.io/release/config.json
}

pre_build() {
	# since element 1.8.x it's necessary to force the npm arch
	# to x86, otherwise it will fail in electron js stuff on
	# platforms officially unsupported by electron (ppc64le...)
	local carch=x64
	case "$XBPS_TARGET_MACHINE" in
		i686*) carch=ia32 ;;
	esac

	cd element-web
	yarn install --no-fund --ignore-scripts --frozen-lockfile

	cd ../element-desktop
	yarn install --no-fund --ignore-scripts --frozen-lockfile
}

do_build() {
	cd element-web
	NODE_ENV=production VERSION=${version} yarn build

	cd ../element-desktop

	yarn asar-webapp

	# add "optional" native dependencies
	# hak stands for hack
	yarn run hak

	yarn build:ts

	yarn build:res

	cat <<-EOF >tsconfig.electron-builder.json
	{
		"compilerOptions": {
			"module": "node16",
			"moduleResolution": "node16",
			"esModuleInterop": true,
			"resolveJsonModule": true,
			"skipLibCheck": true,
			"strict": true,
			"target": "es2019",
			"sourceMap": false,
			"noImplicitAny": false,
			"noEmitOnError": true,
		},
		"files": ["electron-builder.ts"]
	}
	EOF
	yarn tsc -p tsconfig.electron-builder.json
	ELECTRON_RUN_AS_NODE=1 IS_TASJE=1 node -e 'console.log(JSON.stringify(require("./electron-builder.js").default))' >electron-builder.json

	yarn install --frozen-lockfile --ignore-scripts --production
	npm rebuild keytar-forked --nodedir=/usr/include/electron35/node_headers --build-from-source

	# stripping in build because it gets into asar
	/usr/bin/$STRIP node_modules/keytar-forked/build/Release/keytar.node

	tasje -c ./electron-builder.json pack
}

do_install() {
	vmkdir usr/lib/element-desktop/resources

	cd element-web

	vcopy webapp usr/lib/element-desktop/resources

	vinstall webapp/themes/element/img/logos/element-logo.svg 644 /usr/share/icons/hicolor/scalable/apps/ element.svg

	vinstall config.sample.json 644 etc/element-desktop config.json
	ln -s /etc/element-desktop/config.json $DESTDIR/usr/lib/element-desktop/resources/webapp/config.json

	cd ../element-desktop
	vinstall webapp.asar 644 usr/lib/element-desktop
	vinstall dist/resources/app.asar 644 usr/lib/element-desktop/resources
	vcopy dist/resources/app.asar.unpacked usr/lib/element-desktop/resources

	vcopy dist/resources/img usr/lib/element-desktop/resources
	vinstall dist/element-desktop.desktop 644 usr/share/applications
	while read -r size; do
		vinstall dist/icons/$size.png 644 "usr/share/icons/hicolor/$size/apps" element-desktop.png
	done <dist/icons/size-list

	cat <<-EOF > element-desktop
	#!/bin/sh
	exec electron${_electronver} /usr/lib/element-desktop/resources/app.asar "\$@"
	EOF
	vbin element-desktop
	ln -s element-desktop "${DESTDIR}/usr/bin/riot-desktop"

	find $DESTDIR
}

riot-desktop_package() {
	depends="element-desktop"
	short_desc+=" (transitional dummy package)"
	metapackage=yes
}
