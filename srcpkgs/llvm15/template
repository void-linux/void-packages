# Template file for 'llvm15'
pkgname=llvm15
version=15.0.7
revision=1
build_wrksrc=llvm
build_style=cmake
_ext_suffix=".cpython-${py3_ver/./}-linux-${XBPS_TARGET_LIBC/glibc/gnu}.so"
configure_args="
 -DCMAKE_BUILD_TYPE=Release -Wno-dev
 -DENABLE_LINKER_BUILD_ID=YES
 -DLLDB_USE_SYSTEM_SIX=YES
 -DLIBCXX_CXX_ABI=libcxxabi
 -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=YES
 -DLIBCXXABI_USE_LLVM_UNWINDER=YES
 -DLIBCXXABI_ENABLE_STATIC_UNWINDER=YES
 -DLIBOMP_ENABLE_SHARED=YES
 -DLIBOMP_INSTALL_ALIASES=NO
 -DLLVM_INCLUDE_DOCS=YES
 -DLLVM_BUILD_DOCS=YES
 -DLLVM_ENABLE_SPHINX=YES
 -DSPHINX_WARNINGS_AS_ERRORS=NO
 -DLLVM_INSTALL_UTILS=YES
 -DLLVM_BUILD_LLVM_DYLIB=YES
 -DLLVM_LINK_LLVM_DYLIB=YES
 -DLLVM_ENABLE_RTTI=YES
 -DLLVM_ENABLE_FFI=YES
 -DLLVM_BINUTILS_INCDIR=/usr/include
 -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=NO
 -DLLDB_PYTHON_RELATIVE_PATH=lib/python${py3_ver}/site-packages
 -DLLDB_PYTHON_EXE_RELATIVE_PATH=bin/python${py3_ver}
 -DLLDB_PYTHON_EXT_SUFFIX=$_ext_suffix"
hostmakedepends="perl python3 zlib-devel libffi-devel swig python3-Sphinx
 python3-recommonmark python3-sphinx-automodapi"
makedepends="python3-devel zlib-devel elfutils-devel libffi-devel libedit-devel
 libxml2-devel binutils-devel libatomic-devel"
depends="libllvm15>=${version}_${revision}"
short_desc="Low Level Virtual Machine"
maintainer="Orphaned <orphan@voidlinux.org>"
license="Apache-2.0"
homepage="https://www.llvm.org"
distfiles="https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}/llvm-project-${version}.src.tar.xz"
checksum=8b5fcb24b4128cf04df1b0b9410ce8b1a729cb3c544e6da885d234280dedeac6
lib32disabled=yes
python_version=3

if [ "$XBPS_TARGET_LIBC" = "musl" ]; then
	configure_args+=" -DLIBCXX_HAS_MUSL_LIBC=YES
	 -DCOMPILER_RT_BUILD_GWP_ASAN=OFF"
fi

# "operand out of range" assembler failures
case "$XBPS_TARGET_MACHINE" in
	ppc64*) ;;
	ppc*) configure_args+=" -DCLANG_ENABLE_CLANGD=OFF" ;;
esac

_enabled_projects="clang;clang-tools-extra;compiler-rt;libcxx;libcxxabi;libunwind;lld"

_lldb_enable=yes
_libomp_enable=no

case "$XBPS_TARGET_MACHINE" in
	ppc64le*) ;;
	ppc*|i686*|riscv64*) _lldb_enable=no ;;
esac

case "$XBPS_TARGET_MACHINE" in
	x86_64*|aarch64*|ppc64*) _libomp_enable=yes;;
esac

subpackages="clang-tools-extra"

# must go before clang
if [ "$_libomp_enable" = "yes" ]; then
	_enabled_projects+=";openmp"
	subpackages+=" libomp libomp-devel"
	# because of cmake nonsense referencing libomptarget.so.*
	depends+=" libomp>=${version}_${revision}"
	if [ "$CROSS_BUILD" ]; then
		# Seems to require a full host llvm/clang build
		configure_args+=" -DLIBOMPTARGET_BUILD_CUDA_PLUGIN=OFF"
		configure_args+=" -DLIBOMPTARGET_BUILD_AMDGPU_PLUGIN=OFF"
	fi
fi

subpackages+=" clang clang-analyzer libclang libclang-cpp
 llvm-libunwind llvm-libunwind-devel libcxx libcxx-devel
 libcxxabi libcxxabi-devel libllvm15"

if [ "$_lldb_enable" = "yes" ]; then
	# XXX fails to cross compile due to python
	_enabled_projects+=";lldb"
	subpackages+=" lldb lldb-devel"
fi

subpackages+=" lld lld-devel"

configure_args+=" -DLLVM_ENABLE_PROJECTS=${_enabled_projects}"

post_patch() {
	if [ "$_lldb_enable" = "yes" ]; then
		if [ "$XBPS_TARGET_LIBC" = "musl" ]; then
			vsed -i 's|__ptrace_request|int|g' \
				${wrksrc}/lldb/source/Plugins/Process/Linux/NativeProcessLinux.cpp
		fi
		# disable docs for lldb as they fail to generate
		vsed -i '/add_subdirectory(docs)/d' \
			${wrksrc}/lldb/CMakeLists.txt
	fi

	# update config.guess for better platform detection
	cp $XBPS_COMMONDIR/environment/configure/automake/config.guess \
		${wrksrc}/llvm/cmake

	# fix linker failures on some archs
	vsed -i 's,check_library_exists(gcc_s .*,set(LIBCXXABI_HAS_GCC_S_LIB ON),' \
		${wrksrc}/libcxxabi/cmake/config-ix.cmake
	vsed -i 's,check_library_exists(gcc .*,set(LIBCXXABI_HAS_GCC_LIB ON),' \
		${wrksrc}/libcxxabi/cmake/config-ix.cmake

	# need libssp_nonshared on some musl platforms (because of nodefaultlibs)
	case "$XBPS_TARGET_MACHINE" in
		ppc64*) ;;
		ppc*-musl|i686-musl|mips*-musl)
			vsed -i 's,^# Setup flags.$,add_library_flags(ssp_nonshared),' \
				${wrksrc}/libunwind/src/CMakeLists.txt
			vsed -i 's,^# Setup flags.$,add_library_flags(ssp_nonshared),' \
				${wrksrc}/libcxxabi/src/CMakeLists.txt
			vsed -i 's,#ssp,,' ${wrksrc}/libcxx/CMakeLists.txt
			;;
	esac

	case "$XBPS_TARGET_MACHINE" in
		arm*-musl|i686-musl) # sanitizer code is broken since it duplicates some libc bits
			vsed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' \
				${wrksrc}/compiler-rt/cmake/config-ix.cmake
			;;
	esac
}

pre_configure() {
	local triplet

	# Vastly reduce size of debugging symbols:
	CFLAGS=${CFLAGS/ -g/ -g1}
	CXXFLAGS=${CXXFLAGS/ -g/ -g1}

	# since gcc9, the build likes to blow up for ppc32 apparently because
	# of clang being too large for a 24-bit relative call to the PLT, so
	# optimize for size instead
	case "$XBPS_TARGET_MACHINE" in
		ppc64*) ;;
		mips*-musl|ppc*) configure_args+=" -DVOID_CXX_OPT_FLAGS=-Os" ;;
		armv*) configure_args+=" -DVOID_GCC_BUG_109180_WORKAROUND=ON" ;;
	esac

	if [ "$CROSS_BUILD" ]; then
		msg_normal "Building host tblgen\n"
		mkdir -p build/HOST
		cd build/HOST
		CC="$BUILD_CC" CXX="$BUILD_CXX" CFLAGS="$BUILD_CFLAGS" \
			CXXFLAGS="$BUILD_CXXFLAGS" LDFLAGS="$BUILD_LDFLAGS" \
			cmake ../.. -DCMAKE_BUILD_TYPE=Release \
			-DLLVM_ENABLE_PROJECTS=${_enabled_projects}
		make ${makejobs} -C utils/TableGen
		make ${makejobs} -C tools/clang/utils/TableGen
		make ${makejobs} -C tools/clang/tools/extra/clang-tidy/misc/ConfusableTable
		make ${makejobs} -C tools/clang/tools/extra/pseudo/gen
		[ "$_lldb_enable" = "yes" ] && make ${makejobs} -C tools/lldb/utils/TableGen
		configure_args+=" -DLLVM_TABLEGEN=${wrksrc}/llvm/build/HOST/bin/llvm-tblgen"
		configure_args+=" -DCLANG_TABLEGEN=${wrksrc}/llvm/build/HOST/bin/clang-tblgen"
		configure_args+=" -DCLANG_TIDY_CONFUSABLE_CHARS_GEN=${wrksrc}/llvm/build/HOST/bin/clang-tidy-confusable-chars-gen"
		configure_args+=" -DCLANG_PSEUDO_GEN=${wrksrc}/llvm/build/HOST/bin/clang-pseudo-gen"
		[ "$_lldb_enable" = "yes" ] && configure_args+=" -DLLDB_TABLEGEN=${wrksrc}/llvm/build/HOST/bin/lldb-tblgen"
		cd ../..
	fi

	case "$XBPS_TARGET_MACHINE" in
		i686*) _arch="X86";;
		x86_64*) _arch="X86";;
		armv5*) _arch="Armv5te";;
		armv6*) _arch="Armv6";;
		armv7*) _arch="Armv7";;
		aarch64*) _arch="AArch64";;
		mips*) _arch="Mips";;
		ppc*) _arch="PowerPC";;
		riscv64*) _arch="RISCV64";;
	esac

	triplet=${XBPS_CROSS_TRIPLET:-$XBPS_TRIPLET}

	configure_args+=" -DLLVM_TARGET_ARCH=${_arch}"
	configure_args+=" -DLLVM_HOST_TRIPLE=${triplet}"
	configure_args+=" -DLLVM_DEFAULT_TARGET_TRIPLE=${triplet}"
}

do_install() {
	cd build
	cmake -DCMAKE_INSTALL_PREFIX=${DESTDIR}/usr -P cmake_install.cmake

	# Required for multilib.
	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		for _header in llvm-config; do
			mv ${DESTDIR}/usr/include/llvm/Config/${_header}{,-64}.h
			vinstall ${FILESDIR}/llvm-Config-${_header}.h 644 \
				usr/include/llvm/Config ${_header}.h
		done
	fi

	# Remove llvm-config-host in cross builds.
	if [ "$CROSS_BUILD" ]; then
		rm -f ${DESTDIR}/usr/bin/llvm-config-host
	fi

	# Install libcxxabi headers
	vinstall ${wrksrc}/libcxxabi/include/__cxxabi_config.h 644 usr/include
	vinstall ${wrksrc}/libcxxabi/include/cxxabi.h 644 usr/include

	# Install libunwind headers
	vinstall ${wrksrc}/libunwind/include/__libunwind_config.h 644 usr/include
	vinstall ${wrksrc}/libunwind/include/libunwind.h 644 usr/include
	vinstall ${wrksrc}/libunwind/include/unwind.h 644 usr/include
	vinstall ${wrksrc}/libunwind/include/mach-o/compact_unwind_encoding.h \
		644 usr/include/mach-o
}

clang-analyzer_package() {
	pycompile_dirs="usr/share/scan-view"
	depends="clang-${version}_${revision} python3 perl"
	short_desc+=" - A source code analysis framework"
	homepage="https://clang-analyzer.llvm.org/"
	pkg_install() {
		vmove "usr/bin/scan-*"
		vmove "usr/libexec/*analyzer"
		vmove "usr/share/scan-*"
		vmove usr/share/man/man1/scan-build.1
	}
}

clang-tools-extra_package() {
	lib32disabled=yes
	depends="clang-${version}_${revision} python3"
	short_desc+=" - Extra Clang tools"
	homepage="https://clang.llvm.org/extra/"
	pkg_install() {
		vmove usr/bin/clang-apply-replacements
		vmove usr/bin/clang-change-namespace
		vmove usr/bin/clang-doc
		vmove usr/bin/clang-include-fixer
		vmove usr/bin/clang-move
		vmove usr/bin/clang-pseudo
		vmove usr/bin/clang-query
		vmove usr/bin/clang-reorder-fields
		vmove usr/bin/clang-tidy
		vmove usr/bin/clangd
		vmove usr/bin/find-all-symbols
		vmove usr/bin/hmaptool
		vmove usr/bin/modularize
		vmove usr/bin/pp-trace
		vmove usr/include/clang-tidy
		vmove "usr/lib/libclangApplyReplacements*"
		vmove "usr/lib/libclangChangeNamespace*"
		vmove "usr/lib/libclangDaemon*"
		vmove "usr/lib/libclangDoc*"
		vmove "usr/lib/libclangIncludeCleaner*"
		vmove "usr/lib/libclangIncludeFixer*"
		vmove "usr/lib/libclangMove*"
		vmove "usr/lib/libclangPseudo*"
		vmove "usr/lib/libclangReorderFields*"
		vmove "usr/lib/libclangQuery*"
		vmove "usr/lib/libclangTidy*"
		vmove "usr/lib/libclangd*"
		vmove "usr/lib/libfindAllSymbols*"
		vmove "usr/share/clang/*find-all-symbols*"
		vmove "usr/share/clang/*include-fixer*"
		vmove "usr/share/clang/*tidy*"
		vmove usr/share/doc/LLVM/clang-tools
		vmove usr/share/man/man1/extraclangtools.1
	}
}

clang_package() {
	lib32disabled=yes
	depends="libstdc++-devel libgcc-devel  binutils ${XBPS_TARGET_LIBC}-devel
	 libclang-${version}_${revision}"
	short_desc+=" - C language family frontend"
	homepage="https://clang.llvm.org/"
	pkg_install() {
		vmove "usr/bin/*clang*"
		vmove usr/bin/c-index-test
		vmove usr/bin/diagtool
		vmove usr/include/clang
		vmove usr/include/clang-c
		vmove usr/lib/clang
		vmove usr/lib/cmake/clang
		vmove "usr/lib/libclang*.a"
		vmove "usr/lib/libclang*.so"
		vmove usr/share/clang
		vmove usr/share/doc/LLVM/clang
		vmove usr/share/man/man1/clang.1
		vmove usr/share/man/man1/diagtool.1
	}
}

libclang_package() {
	short_desc+=" - C frontend runtime library"
	pkg_install() {
		vmove "usr/lib/libclang.so.*"
	}
}

libclang-cpp_package() {
	short_desc+=" - C frontend runtime library (C++ interface)"
	pkg_install() {
		vmove "usr/lib/libclang-cpp.so.*"
	}
}

lld_package() {
	lib32disabled=yes
	short_desc+=" - linker"
	homepage="https://lld.llvm.org"
	pkg_install() {
		vmove "usr/bin/ld.lld*"
		vmove "usr/bin/ld64.lld*"
		vmove "usr/bin/lld*"
		vmove usr/bin/wasm-ld
		vmove usr/share/doc/LLVM/lld
	}
}

lld-devel_package() {
	lib32disabled=yes
	short_desc+=" - linker - development files"
	homepage="https://lld.llvm.org"
	depends="lld>=${version}_${revision}"
	pkg_install() {
		vmove usr/include/lld
		vmove usr/lib/cmake/lld
		vmove "usr/lib/liblld*a"
	}
}

lldb_package() {
	lib32disabled=yes
	depends+=" python3-six"
	short_desc+=" - LLDB debugger"
	homepage="https://lldb.llvm.org/"
	pkg_install() {
		vmove "usr/bin/*lldb*"
		vmove "usr/lib/liblldb*so.*"
		vmove usr/lib/python*
	}
}

lldb-devel_package() {
	lib32disabled=yes
	depends="lldb>=${version}_${revision}"
	short_desc+=" - LLDB debugger - development files"
	pkg_install() {
		vmove usr/include/lldb
		vmove "usr/lib/liblldb*.so"
	}
}

llvm-libunwind_package() {
	short_desc+=" - libunwind"
	pkg_install() {
		vmove "usr/lib/libunwind.so.*"
	}
}

llvm-libunwind-devel_package() {
	short_desc+=" - libunwind - development files"
	depends="llvm-libunwind>=${version}_${revision}"
	conflicts="libunwind-devel>=0"
	pkg_install() {
		vmove usr/include/mach-o
		vmove "usr/include/*unwind*"
		vmove "usr/lib/libunwind.a"
		vmove "usr/lib/libunwind.so"
		vmove usr/share/doc/LLVM/libunwind
	}
}

libcxxabi_package() {
	short_desc+=" - low level support for libc++"
	pkg_install() {
		vmove "usr/lib/libc++abi.so.*"
	}
}

libcxxabi-devel_package() {
	short_desc+=" - low level support for libc++ - development files"
	depends="libcxxabi>=${version}_${revision}"
	pkg_install() {
		vmove "usr/include/*cxxabi*"
		vmove "usr/lib/libc++abi.so"
		vmove "usr/lib/libc++abi.a"
	}
}

libcxx_package() {
	short_desc+=" - C++ standard library"
	pkg_install() {
		vmove "usr/lib/libc++.so.*"
	}
}

libcxx-devel_package() {
	short_desc+=" - C++ standard library - development files"
	depends="libcxx>=${version}_${revision}"
	pkg_install() {
		vmove usr/include/c++
		vmove "usr/lib/libc++.so"
		vmove "usr/lib/libc++.a"
		vmove "usr/lib/libc++experimental.a"
		vmove usr/share/doc/LLVM/libcxx
	}
}

libomp_package() {
	short_desc+=" - Clang OpenMP support library"
	pkg_install() {
		vmove usr/lib/libarcher.so
		vmove usr/lib/libompd.so
		vmove "usr/lib/libomptarget.rtl.*.so"
		vmove "usr/lib/libomp*.so.*"
	}
}

libomp-devel_package() {
	short_desc+=" - Clang OpenMP support library - development files"
	depends="libomp>=${version}_${revision}"
	pkg_install() {
		vmove "usr/include/omp*.h"
		vmove "usr/lib/clang/${version}/include/omp*.h"
		vmove "usr/lib/libarcher*"
		vmove "usr/lib/libomp*.so"
		vmove usr/lib/cmake/openmp
		vmove usr/share/doc/LLVM/openmp
		vmove usr/share/man/man1/llvmopenmp.1
	}
}

libllvm15_package() {
	short_desc+=" - runtime library"
	pkg_install() {
		vmove "usr/lib/libLLVM-*.so*"
	}
}
