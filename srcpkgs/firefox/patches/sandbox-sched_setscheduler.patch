upstream bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1657849
diff --git a/security/sandbox/linux/SandboxFilter.cpp b/security/sandbox/linux/SandboxFilter.cpp
index ed958bc..9824433 100644
--- firefox-142.0.1/security/sandbox/linux/SandboxFilter.cpp	2025-08-27 05:19:55.000000000 +0200
+++ -	2025-08-27 13:34:45.154107444 +0200
@@ -1884,10 +1884,16 @@
         return Allow();
       case __NR_sched_get_priority_min:
       case __NR_sched_get_priority_max:
+#ifndef __GLIBC__
+      case __NR_sched_setscheduler:
+#endif
         return Allow();
       case __NR_sched_getparam:
       case __NR_sched_getscheduler:
-      case __NR_sched_setscheduler: {
+#ifdef __GLIBC__
+      case __NR_sched_setscheduler:
+#endif
+      {
         Arg<pid_t> pid(0);
         return If(pid == 0, Allow()).Else(Trap(SchedTrap, nullptr));
       }
@@ -2077,13 +2083,21 @@
       case __NR_sched_getparam:
       case __NR_sched_setparam:
       case __NR_sched_getscheduler:
+#ifdef __GLIBC__
       case __NR_sched_setscheduler:
+#endif
       case __NR_sched_getattr:
       case __NR_sched_setattr: {
         Arg<pid_t> pid(0);
         return If(pid == 0, Allow()).Else(Trap(SchedTrap, nullptr));
       }
 
+#ifndef __GLIBC__
+      // sched_setscheduler gets special treatment here (bug 1657849):                                      
+      case __NR_sched_setscheduler:
+        return Allow();
+#endif
+
         // The priority bounds are also used, sometimes (bug 1838675):
       case __NR_sched_get_priority_min:
       case __NR_sched_get_priority_max:
